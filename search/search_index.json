{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DCC-EX Documentation","text":"<p>Testing MkDocs for DCC-EX documentation</p>"},{"location":"exrail/multi-files/","title":"Multiple Files in EXRAIL","text":"<p>EXRAIL commands are read by the compiler only from the file myAutomation.h, the absence of a file with this name means no EXRAIL code is loaded into the command station. However, it is simple to partition myAutomation.h into separate files for the convenience of editing. For example myTurnouts.h, myRoster.h and so on. By ensuring all the files start with \"my\" it avoids issues with name clashes or Git.</p> <p>To include your additional files, use the c++ preprocessor #include control in myAutomation.h to insert the file contents exactly as if you had typed them into myAutomation.h</p> <pre><code>// Include my roster file\n#include \"myRoster.h\"\n// Include my turnout definitions\n#include \"myTurnouts.h\"\n// Special animation\n#include \"myCowOnElectricFence.h\"\n</code></pre>"},{"location":"exrail/roster-similar-locos/","title":"Roster for Similar Sound Locos","text":"<p>The ROSTER command in EXRAIL can be tedious if you have several sound locos with the same function settings. Using a preprocessor definition saves typing.</p> <pre><code>ROSTER(1201,\"Red class 99\",\"light/*horn/flash/bang/wallop/squeal/honk\") \nROSTER(1202,\"Green class 99\",\"light/*horn/flash/bang/wallop/squeal/honk\") \n</code></pre> <p>Can be simplified by pre-defining the functions:</p> <pre><code>#define CLASS99F \"light/*horn/flash/bang/wallop/squeal/honk\" \nROSTER(1201,\"Red class 99\",CLASS99F) \nROSTER(1202,\"Green class 99\",CLASS99F) \n</code></pre> <p>This technique is particularly useful for rostering DC tracks where the function keys are related to PWM frequency:</p> <pre><code>#define DCFuncs\"/////////////////////////////FQ490 Hz/FQ3400 Hz/FQ62500 Hz\"\nROSTER(1225,\"DC TRACK B 1225\",DCFuncs)\nROSTER(1226,\"DC TRACK C 1226\",DCFuncs)\n</code></pre> <p>It is also possible to utilise the compiler rule that \"Hello\" \"Sailor\" is treated as \"HelloSailor\". This means that common functions can be used with loco specific additions.</p> <pre><code>#define CommonFuncs \"light/*horn\" \nROSTER(1201,\"Noisy class 99\",CommonFuncs \"/flash/bang/wallop/squeal/honk\") \nROSTER(1202,\"Quieter class 99\",CommonFuncs) \n</code></pre>"}]}