{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DCC-EX Model Train Control, Animation, and Automation","text":"<ul> <li> <p> Get Started</p> <p>Click this card to go to our Getting Started guide.</p> <p>link to getting started will be invisible</p> </li> <li> <p> I just want to run my trains</p> <p>Link to a ready-to-run page here</p> <p>link to ready to run will be invisible</p> </li> </ul> <ul> <li> <p> Connect accessories</p> <p>I want to add signals/turnouts/accessories.</p> <p>link to accessories will be invisible</p> </li> <li> <p> I want to animate/automate my layout</p> <p>Get into EXRAIL</p> <p>link to exrail will be invisible</p> </li> </ul> <ul> <li> <p> </p> <ul> <li> New Documentation</li> <li> Announcing DCCEXProtocol Library 1.2.0</li> <li> Another new EX-Installer release</li> </ul> <p>link to news will be invisible</p> </li> <li> <p> </p> <p>Get EX-Installer to install our software.</p> <p>link to downloads will be invisible</p> </li> <li> <p> </p> <p>Go here to get our software.</p> <p>link to downloads will be invisible</p> </li> </ul>"},{"location":"#welcome-to-dcc-ex","title":"Welcome to DCC-EX","text":"<p>DCC-EX is a team of dedicated enthusiasts producing open source DCC and DC solutions to run your model trains and layout, with the mission to provide free and open source software and hardware designs that make model trains accessible and affordable to everyone.</p> <p>Our easy to use software products use either our own custom hardware or off-the-shelf Arduino and similar technologies, are in use by modellers from all over the world, and are supported by numerous third party hardware and apps like JMRI, Engine Driver, WiThrottle, Rocrail, and more.</p> <p>We now have a broad \"EX\"-osystem of products to enhance your entire layout including an integrated fast clock, integrated turntable controller, and I/O expansion.</p>"},{"location":"#getting-help-or-support","title":"Getting Help or Support","text":"<p>To get help or support with our products, we highly recommend joining our Discord server where you can chat directly with the team and other users.</p> <p>For alternative methods to get help or support, check out our Help and Support information.</p>"},{"location":"contributing/0-contributing/","title":"How Can I Contribute?","text":"<p>The DCC-EX Team has several projects and sub teams where you can help donate your epertise. See the sections below for the project or projects you are interested in.</p>"},{"location":"contributing/0-contributing/#documentation","title":"Documentation","text":"<p>This documentation is written in MkDocs so a knowlege of HTML, CSS or Javascript is not necessary.</p>"},{"location":"contributing/0-contributing/#development","title":"Development","text":"<p>We use C++, Python, HTML/CSS/Javascript, Android, and even make up our own languages. If you like dealing with code, there's something for all. See here for how to contribute code.</p>"},{"location":"contributing/0-contributing/#web-support","title":"Web Support","text":"<p>We do our support mostly via Discord, although some users prefer Facebook.</p>"},{"location":"contributing/0-contributing/#organisationcoordination","title":"Organisation/Coordination","text":"<p>If you are good at herding cats in several countries and time zones then we could always do with some help.</p>"},{"location":"contributing/0-contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be Nice</p>"},{"location":"contributing/0-contributing/#enforcement","title":"Enforcement","text":"<p>Contributors who do not follow the be nice rule in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"contributing/1-contribute-docs/","title":"Contributing to Documentation","text":"<p>This page outlines what you need in order to contribute to the documentation, along with the various markdown attributes and so forth you can use.</p> <p>The documentation is hosted using GitHub Pages and is written in Markdown format, using MkDocs to publish the content. We use the MkDocs Material theme to give us the framework for the look and feel of the website, along with a number of other useful plugins and extensions to enhance the content.</p> <p>Important! Once up and running with the information on this page, please ensure you are familiar with general markdown syntax.</p> <p>Refer to the Markdown Guide.</p>"},{"location":"contributing/1-contribute-docs/#how-to-contribute","title":"How to Contribute","text":"<p>For contributions from the general public, we recommend forking the GitHub repository and submitting pull requests for the DCC-EX Documenter team to review and merge.</p> <p>If you wish to contribute more fully and become a part of the DCC-EX Documenter team, reach out to us via Discord. To gain access to the GitHub repository, one of the DCC-EX team administrators will need to add you to the \"Web\" team in GitHub.</p>"},{"location":"contributing/1-contribute-docs/#mkdocs-links","title":"MkDocs Links","text":"<p>Here are some handy links with more info:</p> <ul> <li>MkDocs website - The official MkDocs documentation.</li> <li>MkDocs Material theme - The MkDocs Material theme documentation.</li> <li>MkDocs Awesome Nav plugin - MkDocs Awesome Nav plugin is what we use for dynamic page structure.</li> <li>MkDocs RSS plugin - The MkDocs RSS Plugin publishes our DCC-EX News feed.</li> <li>MkDocs Open in New Tab plugin - The Open in New Tab plugin ensures all links to external websites open in a new tab to ensure the users' browsing experience in our documentation is consistent.</li> </ul>"},{"location":"contributing/1-contribute-docs/#what-you-need-to-install","title":"What You Need to Install","text":"<p>This is the list of software you need to successfully contribute to the documentation, including being able to preview it locally:</p> <ul> <li>Visual Studio Code (VSCode)</li> <li>Python - Version 3.13 is recommended, minimum required is 3.10</li> </ul> <p>There are two VSCode plugins that are highly recommended also:</p> <ul> <li>Markdown Preview Mermaid Support by Matt Bierner - enables previewing Mermaid diagrams in VSCode</li> <li>markdownlint by David Anson - helps keep consistent, good formatting in Markdown files (like flake8 for Python)</li> </ul>"},{"location":"contributing/1-contribute-docs/#getting-started","title":"Getting Started","text":"<p>Once you have installed VSCode and Python, you need to clone the GitHub repository, set up a virtual environment, and install the MkDocs requirements.</p> <p>We recommend using the built-in Git functionality of VSCode to clone the repository, or you can use GitHub Desktop or command line Git, whichever you prefer. There is plenty of information generally available on that so we won't cover it here, and instead will focus on the specifics required to ready to contribute to MkDocs content.</p> <p>Follow the appropriate section below to setup MkDocs in Python for your operating system:</p>"},{"location":"contributing/1-contribute-docs/#setup-on-macos","title":"Setup on macOS","text":"<pre><code>cd mkdocs-test\npython 3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/1-contribute-docs/#setup-on-linux","title":"Setup on Linux","text":"<pre><code>cd mkdocs-test\npython3 -m venv venv\n. ./venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/1-contribute-docs/#setup-on-windows","title":"Setup on Windows","text":"<pre><code>cd mkdocs-test\nvirtualenv venv\nvenv\\scripts\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/1-contribute-docs/#previewing-and-building-mkdocs","title":"Previewing and building MkDocs","text":"<p>Previewing locally is very simple:</p> <pre><code>mkdocs serve\n</code></pre> <p>Navigate to the local preview in a browser.</p> <p>When finished with the local preview, stop the local server with either Ctrl+C (Windows/Linux) or Cmd+C (macOS).</p> <p>Building locally is equally as simple:</p> <pre><code>mkdocs build\n</code></pre> <p>MkDocs also has a feature to deploy to GitHub pages without using a workflow:</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"contributing/10-mermaid-diagrams/","title":"Mermaid Diagrams","text":"<p>Mermaid diagrams are a great way of codifying diagrams and charts within Markdown documents, and we have enabled a plugin to support these within MkDocs.</p> <p>The full capability of Mermaid is outlined on the Mermaid website.</p>"},{"location":"contributing/10-mermaid-diagrams/#flowchart","title":"Flowchart","text":"<pre><code>```mermaid\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n```\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"contributing/10-mermaid-diagrams/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>``` mermaid\nsequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!\n```\n</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"contributing/10-mermaid-diagrams/#state-diagram","title":"State Diagram","text":"<pre><code>``` mermaid\nstateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]\n```\n</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"contributing/2-standards/","title":"Documentation Standards","text":"<p>This guide outlines the mandatory standards to adhere to for page naming, directory structure, and other related items.</p> <p>We try to keep as few mandatory standards as possible, but these items must be adhered to in order for our documentation to be maintainable.</p>"},{"location":"contributing/2-standards/#general-content","title":"General Content","text":"<p>When creating content, remember to keep the target user in mind at all times, with a strong preference to Conductor level users. A significant (and growing) proportion of our user base do not understand software, nor a lot of electronics or embedded systems. Use terminology they are likely understand.</p> <p>Most importantly, keep pages concise, to the point, and avoid excess words or waffle. Not only does this make the key messages hard to read, but maintaining lengthy pages that are a wall of text becomes onerous, daunting, and reduces the likelihood of keeping our documentation current.</p> <p>So:</p> <ul> <li>Brevity is good, keep topics to the concise point (eg. Conductors don't care about DCC waveforms, they care about running a train).</li> <li>Avoid jargon where possible.</li> <li>If something does need elaboration, link to a relevant reference.</li> <li>Don't document things generally available on the Internet, eg. we don't document MkDocs or the Material theme as there is good documentation available, we only document the context of our use cases.</li> </ul>"},{"location":"contributing/2-standards/#directory-naming-page-naming-and-titles","title":"Directory Naming, Page Naming, and Titles","text":"<ul> <li>All directory and page names must be in lower case and use \"-\" instead of spaces.</li> <li>If specific page ordering is required, simply preface with the appropriate page number eg. \"1-standards-formatting.md\".</li> <li>The page title is determined by the top level heading, see Headings.</li> </ul>"},{"location":"contributing/2-standards/#directory-structure","title":"Directory Structure","text":"<p>Note firstly that we use the MkDocs Awesome Nav plugin to control the menu structure, which uses a \".nav.yml\" file in any directory where the default needs to be overridden.</p> <p>The top level directories under the \"docs\" directory determine the tabs or horizontal menu items on the header bar, with the subsequent directories and files in each of these determining the menu on the left pane.</p> <p>Do not adjust the top level directories without consulting the DCC-EX Documenter team, as these fundamentally adjust the user experience.</p> <p>If a new top level directory is to be added, it needs to be added to the \"/docs/.nav.yml\" file in the appropriate order. Files and directories created within existing top level directories will automatically be added to the menus (see Page Naming and Titles for page ordering).</p>"},{"location":"contributing/2-standards/#suggested-directory-structure","title":"Suggested Directory Structure","text":"<ul> <li>Home<ul> <li>index.md - Contains intro information and user journey start points</li> <li>downloads.md - Maybe downloads here?</li> </ul> </li> <li>News<ul> <li>index.md - DCC-EX News articles</li> </ul> </li> <li>Getting Started<ul> <li>Choose your level</li> <li>RTR</li> <li>DIY</li> <li>EX-Installer</li> </ul> </li> <li>Products<ul> <li>EX-CommandStation<ul> <li>EXRAIL<ul> <li>Cookbooks</li> </ul> </li> <li>TrackManager</li> </ul> </li> <li>EX-CommandStation Booster 1 (EX-CSB1)</li> <li>EX-Motorshield8874</li> <li>EX-WifiShield-8266</li> <li>EX-FastClock</li> <li>EX-IOExpander</li> <li>EX-Turntable</li> </ul> </li> <li>Support<ul> <li>Troubleshooting</li> <li>Getting Help</li> <li>Videos</li> <li>Case Studies<ul> <li>The Big Picture</li> </ul> </li> </ul> </li> <li>Reference<ul> <li>Throttle commands</li> <li>EXRAIL commands</li> </ul> </li> <li>About<ul> <li>The Team</li> <li>Contributing</li> </ul> </li> </ul>"},{"location":"contributing/3-formatting-guide/","title":"Formatting Guide","text":"<p>This page provides guidelines on how to use the various markdown attributes and other MkDocs Material extensions we have enabled to enhance the documentation.</p>"},{"location":"contributing/3-formatting-guide/#page-and-section-links","title":"Page and Section Links","text":"<p>There are three types of links you can use:</p> <ul> <li>Section links - link to another section heading on the same page</li> <li>Document links - link to another document, or a section heading on another document</li> <li>External links - link to an external website</li> </ul> <p>All internal links to other pages and sections should be relative to the docs directory. We have enabled a setting to ensure links are correctly copnverted to the correct html href, and enable permalinks for headings to support this.</p>"},{"location":"contributing/3-formatting-guide/#section-links","title":"Section Links","text":"<p>Links to sections on the same page should just use the permalink section heading name:</p> <pre><code>[Link to this section](#page-and-section-links)\n</code></pre> <p>Results in: Link to this section</p>"},{"location":"contributing/3-formatting-guide/#document-links","title":"Document Links","text":"<pre><code>[Link to Contributing to Documentation Page](/contributing/1-contribute-docs.md)\n</code></pre> <p>Results in: Link to Contributing to Documentation Page</p> <pre><code>[Link to How to Contribute Section](/contributing/1-contribute-docs.md#how-to-contribute)\n</code></pre> <p>Results in: Link to How to Contribute Section</p> <p>Note: when typing a link in VSCode, the intellisense dropdown will help you complete the link by following the path from the project directory. This creates links that start with \"/docs\" (for example \"/docs/contributing/1-contribute-docs.md\" ). These links will not work unless you manually detele the /docs prefix.  Its a pain but we have raised a PR for VScode and mkDocs on this.</p>"},{"location":"contributing/3-formatting-guide/#external-links","title":"External Links","text":"<pre><code>[Link to Google Search](https://www.google.com)\n</code></pre> <p>Results in: Link to Google Search</p>"},{"location":"contributing/3-formatting-guide/#search-links","title":"Search Links","text":"<p>We have added a link feature to directly invoke the mkDocs powerful search dialog. This is particularly useful when you wish to refer to imformation that may be spread over several places and possibly not yet written.</p> <pre><code> [Find out about PCA9685 servo controllers](?PCA9685)\n</code></pre> <p>Find out about PCA9685 servo controllers</p> <p>Multi word searches are also accepted</p> <pre><code> [hidden turnouts](?hidden turnout)\n</code></pre> <p>hidden turnouts</p>"},{"location":"contributing/3-formatting-guide/#headings","title":"Headings","text":"<p>Headings are simply defined by one or more leading <code>#</code>, noting you can only have one top level heading on a page, which is the page title.</p> <p>The top level heading defines how the page appears in menus, so for this page this is the top level heading:</p> <pre><code># Standards and Formatting Guide\n</code></pre> <p>Further, this general section on \"Headings\" is a second level heading:</p> <pre><code>## Headings\n</code></pre> <p>Following are how to define the lower level headings with a demo of each.</p>"},{"location":"contributing/3-formatting-guide/#heading-level-3","title":"Heading Level 3","text":"<pre><code>### Heading Level 3\n</code></pre>"},{"location":"contributing/3-formatting-guide/#heading-level-4","title":"Heading Level 4","text":"<pre><code>#### Heading Level 4\n</code></pre>"},{"location":"contributing/3-formatting-guide/#heading-level-5","title":"Heading Level 5","text":"<pre><code>##### Heading Level 5\n</code></pre>"},{"location":"contributing/3-formatting-guide/#glossary-terms-and-linking","title":"Glossary Terms and Linking","text":"<p>Glossary plugins seem to be either very complicated to implement, or don't yield the results we're looking for. Instead, we have opted for a simple DIY glossary to define the terms, and provide a search link to enable users to find where they have been used in the documentation.</p> <p>To add a term to the glossary, use the search URL syntax and a second level heading:</p> <pre><code>## [Term](?term)\n\nThis is a new term being added to the glossary.\n</code></pre>"},{"location":"contributing/3-formatting-guide/#code-blocks","title":"Code blocks","text":"<p>When including code blocks, be sure to include an appropriate language for syntax highlighting, and use triple backtick \"`\" characters to surround the code for highlighting.</p> <p>For example:</p> <pre><code>```cpp\nTURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n```\n</code></pre> <p>Will render as:</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>For EXRAIL and general configuration file code blocks (eg. config.h, myAutomation.h), \"cpp\" is as good as any, and for any others use an appropriate language specifier.</p> <p>If appropriate, line numbers can also be displayed by appending <code>linenums=\"X\"</code> to the language, where \"X\" is the starting line number:</p> <pre><code>```cpp linenums=\"20\"\nTURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n```\n</code></pre> <p>Will render as:</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>This is a nonsense C++ code block generated by Gemini to demonstrate the full syntax highlighting:</p> <pre><code>#include &lt;iostream&gt;  // Standard I/O library\n#include &lt;vector&gt;    // For dynamic arrays\n#include &lt;string&gt;    // For string manipulation\n#include &lt;map&gt;       // For key-value pairs\n\n// A simple namespace to organize code\nnamespace MyLibrary {\n\nconst double PI_VALUE = 3.1415926535; // A global constant\n\n/**\n * @brief Represents a generic item with properties.\n * This is a multi-line comment to test comment colors.\n */\nclass GenericItem {\nprivate:\n    std::string itemName;\n    int itemId;\n    double itemPrice;\n    bool isAvailable;\n\npublic:\n    // Constructor with default values\n    GenericItem(const std::string&amp; name = \"Default Item\", int id = 0, double price = 0.0, bool available = true)\n        : itemName(name), itemId(id), itemPrice(price), isAvailable(available) {}\n\n    // Member function to display item details\n    void displayDetails() const {\n        std::cout &lt;&lt; \"Item Name: \" &lt;&lt; itemName &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Item ID: \" &lt;&lt; itemId &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Price: $\" &lt;&lt; itemPrice &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Available: \" &lt;&lt; (isAvailable ? \"Yes\" : \"No\") &lt;&lt; std::endl;\n    }\n\n    // Getter for itemPrice\n    double getPrice() const {\n        return itemPrice;\n    }\n\n    // Setter for itemPrice (with a simple check)\n    void setPrice(double newPrice) {\n        if (newPrice &gt;= 0.0) {\n            this-&gt;itemPrice = newPrice;\n        } else {\n            std::cerr &lt;&lt; \"Warning: Price cannot be negative.\" &lt;&lt; std::endl;\n        }\n    }\n}; // Don't forget the semicolon after class definition!\n\n// Template function to find the maximum of two values\ntemplate &lt;typename T&gt;\nT findMax(T a, T b) {\n    return (a &gt; b) ? a : b; // Ternary operator test\n}\n\n} // end namespace MyLibrary\n\n// Main function - entry point of the program\nint main() {\n    using namespace MyLibrary; // Use MyLibrary namespace\n\n    // Create instances of GenericItem\n    GenericItem item1(\"Laptop\", 101, 1200.50, true);\n    GenericItem* item2 = new GenericItem(\"Mouse\", 202, 25.99, false); // Using 'new'\n\n    // Display details using a loop\n    std::vector&lt;GenericItem&gt; inventory;\n    inventory.push_back(item1);\n    inventory.push_back(*item2);\n\n    std::cout &lt;&lt; \"--- Inventory Details ---\" &lt;&lt; std::endl;\n    for (const auto&amp; item : inventory) { // Range-based for loop\n        item.displayDetails();\n        std::cout &lt;&lt; \"-------------------------\" &lt;&lt; std::endl;\n    }\n\n    // Test the template function\n    int maxInt = findMax(10, 20);\n    double maxDouble = findMax(PI_VALUE, item2-&gt;getPrice()); // Accessing member via pointer\n\n    std::cout &lt;&lt; \"Maximum integer: \" &lt;&lt; maxInt &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Maximum double: \" &lt;&lt; maxDouble &lt;&lt; std::endl;\n\n    // Exception handling test\n    try {\n        if (item1.getPrice() &lt; 1.0) {\n            throw \"Price too low!\"; // Throwing a string literal\n        }\n        item1.setPrice(1500.00); // Change price\n    } catch (const char* msg) { // Catching a C-style string\n        std::cerr &lt;&lt; \"Error: \" &lt;&lt; msg &lt;&lt; std::endl;\n    }\n\n    // Clean up dynamic memory\n    delete item2; // Using 'delete'\n    item2 = nullptr; // Best practice to nullify pointer after delete\n\n    // Return 0 for successful execution (integer literal)\n    return 0;\n}\n</code></pre>"},{"location":"contributing/4-understanding-links/","title":"Understanding Links","text":""},{"location":"contributing/4-understanding-links/#what-the-html-browser-sees-is-this","title":"What the html browser sees is this","text":"<p>An ABOSLUTE link in html starts with <code>/</code>  which makes the browser prepend the web server address so <code>href=\"/blah/blah.html\"</code>  for example would link to <code>\"http:://dcc-ex.com/blah/blah.html\"</code> which would be BAD because  we actually wanted  <code>http:://dcc-ex.com/mkdocs-test/blah/blah.html</code> but there was no way of doing that if you didn't know the sub-directory mkdocs-test in advance and code it on all your links.</p> <p>To resolve this, you have to use RELATIVE hrefs, in which the link is relative to the current page.  So if you are on page   <code>blah1/blah2/blah3.html</code> and you want a link or image in  <code>_static/images/stuff.jpg</code>  you have to use <code>href=\"../../_static/images/stuff.jpg\"</code></p> <p>So.. RELATIVE HTML links are the only reliable way to work, otherwise your website is borked if you install it in for example <code>http:://dcc-ex.com/newsite/</code></p>"},{"location":"contributing/4-understanding-links/#what-the-mkdocs-author-sees","title":"What the mkdocs author sees","text":"<p>In mkdocs,  the markdown to html generator  passes through RELATIVE links unchanged, this means that you can easily refer to images in the same directory as the current page by just giving the name, or get to any other directory with the appropriate number of ../ to go up the tree.  That's great until you move the current page to another directory so the relative link is no longer going to find the image or page you want.</p> <p>MkDocs has a solution. When you code what appears to be an absolute link like <code>/_static/images/spaff.png</code> then the HTM generated will look like <code>href=\"../../_static/images/spaff.png\"</code>  with the appropriate number of <code>../</code> to walk back up the tree from the current file to the docs directory. So basically you code what looks like an ABSOLUTE link, but the html is generated with a relative link. Hooray!</p> <p>BUT there is one annoying little quirk...</p> <p>The intellisense when typing the start of a link like <code>[look here](/</code>   gives you a dropdown starting at docs  so you get <code>/docs/_static/images/spaff.jpg</code>   which wont get converted so it gives <code>href=\"/docs/_static/images/spaff.jpg\"</code>  which isn't found because the <code>/docs/</code> directory level isnt copied to the website.</p> <p>Pending a VSCode or mkDocs fix (both applied for) the only solution is to manually remove the <code>/docs</code> prefix from the link created by intellisense.</p>"},{"location":"contributing/4-understanding-links/#the-search-link","title":"The search link","text":"<p>The search link like <code>?turnout</code> is passed through unchanged by mkDocs but is intercepted in the browser by our own  JavaSCript code</p>"},{"location":"contributing/9-contributing-code/","title":"Contributing to the public domain code","text":"<p>Thanks for considering contributing to our project. Here is a guide for how to get started and and a list of our conventions. We will also walk you through the Github command line and Desktop commands necessary to download the code, make changes, and get it included in a next version of the sofware.</p> <p>Before contributing to this repository, please first discuss the change you wish to make via issue, or any other method with the owners of this repository before making a change.</p> <p>Find us on our website, on our Discord, or on Trainboard.</p> <p>If you reach out on discord, we have areas reserved for developers to discuss technicalities to avoid confusing users.</p>"},{"location":"contributing/9-contributing-code/#development-environment","title":"Development Environment","text":"<p>We recommend using PlatformIO IDE for VSCode. If you haven't yet used it, it is an easy to learn and easy to use IDE that really shines for embedded development and the Arduino based hardware we use. For more information go to the PlatformIO website.</p> <ul> <li>Download and install the latest version of the Arduino IDE</li> <li>Download and install the latest version of Visual Studio Code from Microsoft</li> <li>Run VSCode and click on the \"extensions\" icon on the left. Install \"PlatformIO IDE for VSCode\" and the \"Arduino Framework\" support</li> </ul> <p>If you don't see C/C++ Installed in the list, install that too. We also recomment installing the Gitlens extension to make working with Git and GitHub even easier.</p> <p>You may ask if you can use the Arduino IDE, Visual Studio, or even a text editor and the answer is \"of course\" if you know what you are doing. Since you are just changing text files, you can use whatever you like as long as your commits and pull requests can be merged in GitHub. However, it will be much easier to follow our coding standards if you have an IDE that can automatically format things for you.</p>"},{"location":"contributing/9-contributing-code/#coding-style-guidelines","title":"Coding Style Guidelines","text":"<p>We have adopted the Google style guidlines. In particular please make sure to adhere to these standards:</p> <ol> <li>All header files should have <code>#define</code> guards to prevent multiple inclusion. (EXCEPT .h files containing EXRAIL scripts!)</li> <li>Use Unix style line endings</li> <li>We indent using two spaces (soft tabs)</li> <li>Braces</li> </ol> <p>For more information just check our code or read the style guide.</p>"},{"location":"contributing/9-contributing-code/#using-the-repository","title":"Using the Repository","text":"<ol> <li>Clone the repository on your local machine</li> <li>Create a working branch using the format \"username-featurename\" ex: \"git branch -b frightrisk-turnouts\"</li> <li>Commit offen, ex: \"git add .\" and then \"git commit -m \"description of your changes\"</li> <li>Push your changes to our repository \"git push\"</li> <li>When you are ready, issue a pull request for your changes to be merged into the main branch</li> </ol>"},{"location":"contributing/9-contributing-code/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure any install or build dependencies are removed before the end of the layer when doing a build.</li> </ol>"},{"location":"getting-started/01-getting-started/","title":"Getting Started with DCC-EX","text":"<p>How to get started with DCC-EX goes here.</p>"},{"location":"getting-started/10-downloads/","title":"Download Our Software","text":""},{"location":"getting-started/10-downloads/#ex-installer","title":"EX-Installer","text":"<p>Download the latest EX-Installer</p> <p>If for some reason that link doesn't work for you, download the appropriate version:</p> <p>Windows x64</p> <p>macOS</p> <p>Linux x64</p> <p>Note there is no support for EX-Installer on Windows 7, nor 32 bit operating systems such as Windows x32 or RaspberryPi OS.</p>"},{"location":"news/","title":"DCC-EX News","text":""},{"location":"news/#get-this-in-your-rss-feed","title":"Get this in your RSS feed","text":"<p>Notes on how to get the RSS feed here when figured out.</p>"},{"location":"news/2023/04/final-version-4-release-v415/","title":"Final Version 4 Release (v4.1.5)","text":"<p>We're excited to announce the final version 4 release of |EX-CS| before we move to version 5!</p> <p>This is just a minor bugfix release from the previous version 4.1.2. This release is a Bugfix release to fix the initialisation order to benefit Ethernet boards, to fix GitHub issue #299 related to TurnoutDescription, and to fix command parsing for LCN (the Layout Control Nodes Accessory Network).</p> <p>To get the latest version, see the download  link here section.</p> <p>There is also an updated available for download to help you get up and running with |JMRi| DecoderPro and |DCC-EX|.</p> <p>Look for some major new features soon in version 5.0!</p>"},{"location":"news/2023/12/announcing-the-new-dccexprotocol-arduino-library/","title":"Announcing the new DCCEXProtocol Arduino Library","text":"<p>The DCC-EX team are proud to announce that we've released the very first version of our brand spanking new DCCEXProtocol Arduino Library! This has been written to make life easier for those wishing to write software for throttles or other clients that need to communicate with EX-CommandStation using our native command API.</p> <p>Why release an Arduino library in the first place?</p> <p>We figure for those who want to write throttle software and interact with the EX-CommandStation are probably more interested in making their software work rather than figuring out how to correctly parse our native API commands and respond appropriately to the various command responses and broadcasts that are generated and need to be dealt with.</p> <p>So, in light of this, a library that takes away the heavy lifting of using/interpreting the API commands seemed like a sensible approach.</p> <p>One great big caveat to this announcement is that the library version is 0.0.1, meaning it has had limited testing and is likely going to have bugs associated with it.</p> <p>For documentation on how to implement and use the library, refer to the DCCEXProtocol documentation.</p>"},{"location":"news/2024/03/another-new-ex-installer-release/","title":"Another new EX-Installer release","text":"<p>The |DCC-EX| team is pleased to announce another new release of |EX-I| (version 0.0.18). As always, we encourage all users to download this new version of the installer to take advantage of the bug fixes and new features available.</p> <p>The key updates in this release are support for the new options available in |EX-TT| version 0.7.0, and the ability to save the device logs from the Device Monitor screen directly within |EX-I|. This way, when interacting with the |DCC-EX| team in Discord or via either means, when asked to provide the startup logs or serial monitor logs, you can simply open Device Monitor and click the <code>Save log</code> button to obtain these.</p> <p>This release also includes the below changes:</p> <ul> <li>Update a Python module version to resolve security vulnerabilities</li> <li>Add a link to |DCC-EX| News articles about |EX-I| to the Info menu</li> <li>Ensure the \"Backup config files\" popup is always launched within the app window geometry</li> <li>Fix a bug where copying existing config files for |EX-TT| and |EX-IO| causes an exception</li> </ul>"},{"location":"news/2025/03/announcing-dccexprotocol-library-120/","title":"Announcing DCCEXProtocol Library 1.2.0","text":"<p>We've released the latest version of the |DCC-EXP| library version 1.2.0 today.</p> <p>This release adds the ability to read/write CVs on both the main and programming tracks:</p> <ul> <li> <p>handOffLoco(locoAddress, automationId)</p> <ul> <li>Use this to send a loco to an EXRAIL automation.</li> <li>You must enable retrieving routes, and the automationId must match a valid EXRAIL automation ID to work.</li> </ul> </li> <li> <p>readCV(cv) and validateCV(cv, value)</p> <ul> <li>Read or validate a CV for a loco on the programming track.</li> <li>The associated delegate method to implement is receivedValidateCV(int cv, int value) as both return the same response.</li> </ul> </li> <li> <p>writeLocoAddress(address)</p> <ul> <li>Write the provided address to a loco on the programming track.</li> <li>The associated delegate method to implement is receivedWriteLoco(int address).</li> </ul> </li> <li> <p>validateCVBit(cv, bit, value)</p> <ul> <li>Validate the specified bit of a CV for a loco on the programming track.</li> <li>The associated delegate method to implement is receivedValidateCVBit(int cv, int bit, int value).</li> </ul> </li> <li> <p>writeCV(cv, value)</p> <ul> <li>Write a CV to a loco on the programming track.</li> <li>The associated delegate method to implement is receivedWriteCV(int cv, int value).</li> </ul> </li> <li> <p>writeCVBit(cv, bit, value)</p> <ul> <li>Write the specified value to the specified bit of a CV to a loco on the programming track.</li> <li>There is no delegate method to implement for the response for this due to parser limitations, and we recommend writing full CVs.</li> </ul> </li> <li> <p>writeCVOnMain(address, cv, value)</p> <ul> <li>Write to the specified CV to the specified loco on the main track.</li> </ul> </li> <li> <p>writeCVBitOnMain(address, cv, bit, value)</p> <ul> <li>Write to the specified bit and CV to the specified loco on the main track.</li> </ul> </li> </ul>"},{"location":"news/2025/06/new-documentation/","title":"New Documentation","text":"<p>We have new documentation!</p> <p>We've changed our documentation.</p>"},{"location":"products/","title":"DCC-EX Product Overview","text":"<ul> <li> <p>Our flagship train control and layout automation software.</p> <p>link to ex-commandstation will be invisible</p> </li> <li> <p> </p> <p>A diagnostic tool to inspect DCC packets.</p> <p>link to ex-dccinspector will be invisible</p> </li> <li> <p> </p> <p>An integrated fast clock for your layout.</p> <p>link to ex-fastclock will be invisible</p> </li> <li> <p> </p> <p>Use Arduino devices to expand I/O capability.</p> <p>link to ex-ioexpander will be invisible</p> </li> <li> <p> </p> <p>An Android app full of useful tools.</p> <p>link to ex-toolbox will be invisible</p> </li> <li> <p> </p> <p>An integrated turntable/traverser controller using a stepper motor.</p> <p>link to ex-turntable will be invisible</p> </li> </ul>"},{"location":"products/ex-commandstation/1-overview/","title":"The DCC-EX Command Station","text":"<p>A DCC Command Station powers your track and sends digital signals to the locos and accessories through the track. All commercial command stations do that, but we think we do it a lot better for a lot less money.</p> <ul> <li> <p>If You want to buy a ready built command station, see Purchase a Command Station and come back here to learn about it while you are waiting for the delivery.</p> </li> <li> <p>If you want to build your own command station see Building your own Command station but you are advised to read the basic guidance that follows so you will have a better understanding of what you want to achieve, and what will be possible.</p> </li> <li> <p>If you already have a DCC-EX command station, read on.</p> </li> </ul> <p>To follow the basic setup process, you can use the \"next\" button seen at the bottom right of each page.</p>"},{"location":"products/ex-commandstation/testing/","title":"Testing your commnd station","text":"<p>(LOTS OF TODO in this file)</p> <p>The simplest and most direct testing method is to use a serial monitor to talk directly to the USB connection of you command station. This is a fundamental aspect of the Arduino system and thus avoids issues such as wifi connections. Indeed, this is the only way to see what's going wrong if your problems are wifi related.</p>"},{"location":"products/ex-commandstation/testing/#serial-monitors","title":"Serial Monitors","text":"<p>There are several serial monitors available:</p> <ul> <li>Built in to the EX-Installer     ??? TODO EX INSTALLER showing serial log</li> <li>Built in to VSCode is you are using that as an IDE.</li> <li>Built in to the Arduino IDE (We do not recommend that for development)</li> <li>Built in to the EX-WebThrottle</li> <li>Built in to JMRI or other train control software. (TODO.. above provide links to individual side-pages showing how to get at the serial monitor in each case)</li> </ul> <p>Whichever you use, please ensure the baud rate is set to 115200 so that it matches that used by the command station. (Installer anf WebThrottle do this automatically)</p> <p>Its important to note that only one program on your PC can be connected to the Command Station USB. It is a common cause of error messages if you try and open a serial monitor when one of the other programs is still running.</p> <p>In most cases, connecting a serial monitor causes the Command station to restart.</p>"},{"location":"products/ex-commandstation/testing/#simple-testing-commands-main-track","title":"Simple testing commands (Main track)","text":"<p>Commands are entered as shown, complete with the <code>&lt; &gt;</code> markers. Case is important because <code>&lt;T</code> is a compl;etely different command to <code>&lt;t</code></p>"},{"location":"products/ex-commandstation/testing/#check-communication-and-version","title":"Check communication and version","text":"<pre><code>&lt;s&gt;\n</code></pre> <p>TODO... pic</p>"},{"location":"products/ex-commandstation/testing/#turn-on-track-power","title":"Turn on track power","text":"<p><code>&lt;1&gt;</code> will turn on all 4 leds that lie behind the track output sockets.</p> <p><code>&lt;0&gt;</code> Will turn the tracks off.</p>"},{"location":"products/ex-commandstation/testing/#move-a-loco","title":"Move a loco","text":"<p>You can only drive a loco if you know the loco DCC address. For a brand new loco or decoder this is normally preset to 3. If you don't know the loco address, then you can find out using the simple programming commands</p> <p>Assuming you know the loco address is 3, the following commands may be useful:  </p> <p><code>&lt;!&gt;</code> Emergency stop all locos</p> <p><code>&lt;t 3 50 1&gt;</code>  Move loco 3 speed 50 forward.</p> <p><code>&lt;t 3 20 0&gt;</code>  Move loco 3 speed 20 referse.</p> <p><code>&lt;t 3 0 1&gt;</code>  Stop loco 3 (decoder may stop loco realistically)</p> <p><code>&lt;t 3 -1 1&gt;</code>  Emergency Stop loco 3</p>"},{"location":"products/ex-commandstation/testing/#test-loco-functions","title":"Test loco functions","text":"<p><code>&lt;F 3 0 1&gt;</code>   Turn on loco 3 function 0</p> <p><code>&lt;F 3 0 0&gt;</code>   Turn off loco 3 function 0</p>"},{"location":"products/ex-commandstation/testing/#things-to-remember","title":"Things to remember","text":"<p>The commands <code>&lt;t</code> and <code>&lt;F</code> will normally reply with a <code>&lt;l</code> response when something about a loco is changed. This response is designed for throttles to share information and not generally for human reading.</p> <p>A response of <code>&lt;X&gt;</code> indicates the command was not understood by the command station, so check your typing as <code>&lt;T</code> and <code>&lt;f</code> are not the same as <code>&lt;t</code> and <code>&lt;F</code>.</p> <p>DCC generally has no way of knowing whether the loco exists, is listening or has dirty wheels. If you get no movement the first thing to do is check the track is clean.</p>"},{"location":"products/ex-commandstation/accessories/1-accessories/","title":"Connecting Accessories","text":"<p>Once you go beyond just wanting to run trains, and want to control turnouts, signals, and potentially automate other various parts of your layout, you will need to know how to connect accessories to your Command Station.</p> <p>This includes our other products such as EX-FastClock, EX-IOExpander, and EX-Turntable.</p>"},{"location":"products/ex-commandstation/accessories/1-accessories/#accessory-types","title":"Accessory Types","text":"<p>There are generally three ways accessories can be controlled by your Command Station:</p> <ul> <li>I2C</li> <li>Serial</li> <li>DCC accessories attached to a DCC main track output</li> </ul> <p>Throughout these pages, we will be focusing on accessories connected via I2C only.</p> <p>Most devices connected via Serial are typically throttles or controllers rather than accessories.</p> <p>When purchasing DCC accessories, you will have received a user manual for these, so follow that for instructions on how to connect them.</p>"},{"location":"products/ex-commandstation/accessories/1-accessories/#voltage-differences","title":"Voltage Differences","text":"<p>It is essential to be aware that hardware devices may operate at different voltage levels, meaning simply connecting an accessory to your Command Station may lead to damage or incorrect operation should this situation occur.</p> <p>The most common issue is connecting an accessory designed for 5V operation to a Command Station that operates at 3.3V, such as our EX-CSB1. This will cause damage!</p> <p>This voltage issue applies to both I2C and Serial connections.</p>"},{"location":"products/ex-commandstation/accessories/1-accessories/#what-is-i2c","title":"What is I2C?","text":"<p>If you want the nitty gritty of what I2C is, you can refer to the Wikipedia article, which covers more detail than we will here.</p> <p>To keep it simple and in the context of DCC-EX, I2C is a bus that allows multiple accessories or peripherals to be connected to your Command Station, utilising two signal lines/connections and a common ground connection. While power can be provided by your Command Station, it is recommended to have your accessories powered separately.</p> <p>Each I2C device must have a unique address in order to be detected and configured by the software.</p> <p>You will typically see these addresses in hexadecimal format, for example <code>0x40</code>.</p>"},{"location":"products/ex-commandstation/accessories/20-actuators/","title":"Actuators - to make stuff happen","text":"<p>Actuators are devices that you can add to make things happen under the control of the Command station. For example throwing a turnout, setting a signal or switching lights. There are basically two types of actuator that will commonly be used:</p> <ul> <li>PWM output used for Servo movement of turnouts, semaphore signals, crossing gates, fancy animations and LED fading.</li> <li>Digital output (On/Off) mostly used for LEDs, relays and some turnout types. </li> </ul> <p>Other actuator types include:</p> <ul> <li>NeoPixel output used for advanced lighting, mimic panels, signals etc.</li> <li>Sound players</li> <li>Turntable control systems</li> </ul>"},{"location":"products/ex-commandstation/accessories/20-actuators/#servo-actuators","title":"Servo actuators","text":"<p>Servo actuators generally use a PCA9685 device which can connect up to 16 Servos or LEDs over a single I2C connection. This device also acts to provide servo movement power separately from the movement control signal. </p> <p>EXRAIL is used to</p> <ul> <li>Define the PCA9685 connection and its address so that each output can be given a unique VPIN to control it.</li> <li>For turnouts define a SERVO_TURNOUT for each VPIN so that the rest of DCC-EX can throw or close this turnout without knowledge of the underlying mechanism.</li> <li>For semaphore signals, define a SERVO_SIGNAL to that the rest of DCC-EX can control the signal.</li> <li>Control animation servos directly, such as crossing gates or shed doors.</li> </ul>"},{"location":"products/ex-commandstation/accessories/20-actuators/#digital-actuators","title":"Digital actuators","text":"<p>Digital outputs are generally connected via an MCP23017 device which offers up to 16 output pins on a single I2C connection.</p> <p>EXRAIL is used to</p> <ul> <li>Define the MCP23017 connection and its address so that each output can be given a unique VPIN to control it.</li> <li>Set or reset the pin output when appropriate</li> </ul>"},{"location":"products/ex-commandstation/accessories/30-sensors/","title":"Sensors","text":"<p>Sensors become necessary when you wish to add automated control of accessories or trains, or you wish to add a control panel separate from the functions of your throttle. Each sensor device can trigger actions or be read in EXRAIL or be passed up to a PC controller such as JMRI, RocRail or iTrain.</p> <p>Sensor devices include</p> <ul> <li>Switches and buttons on a control panel</li> <li>InfraRed or ultrasonic detectors when a train crosses a point on the track</li> <li>Video camera using AI to detect train position or children's hands reaching over the layout</li> <li>Block Occupancy (or Train-on-track, TOTI) detectors that detect the current consumed by a loco decoder or resistor-fitted rolling stock when present in an isolated track block.</li> </ul> <p>EXRAIL is used to handle sensors</p> <ul> <li> <p>Describe how the sensor devices are wired to the command station (usually via I2C) and what VPIN is to be assigned to each sensor</p> </li> <li> <p>Control what happens when a sensor VPIN changes state</p> </li> </ul> <p>The most common method of connecting sensor devices to your command station is through an MCP23017 device which offers up to 14 input pins (or 16 output pins, or a mix of both) through a single I2C connection. For more inputs you can add more MCP23017 devices to the I2C chain.</p> <p>The EX-IOExpander can be used to connect multiple sensors over a single I2C connection depending on the microprocessor used to build it.</p> <p>The EX-SensorCam can be used to offer up to 80 sensor points on a single I2C connection.  </p>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/","title":"Connecting a servo turnout","text":"<p>The details below assume you are using an EX-CSB1 command station or a DIY station with an EX8874 motor shield and Wifi connection. Otherwise the steps are the same but the wiring is trickier without the Qwiic sockets and testing requires command input.</p> <p>You will need the following for up to 16 servos.</p> <ul> <li>Your Command Station with power supply and USB connection to your PC.</li> <li>A Qwiic cable</li> <li>A PCA9685 (preferably with Qwiic sockets)</li> <li>Up to 16 SG90 servos.</li> <li>The EX-Installer downloaded and installed on your PC.</li> <li>(Optionally) and Android phone with EX-Toolbox installed</li> <li>A servo power supply 5 or 6V DC not taken from the command station.</li> </ul>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#follow-the-steps-below","title":"Follow the steps below","text":"<ol> <li>Turn off power to your Command station and unplug the USB cable.</li> <li>Connect the Qwiic cable between the CSB1  (or EX8874 on a mega) ) and the PCA9685. </li> <li>Run the EX-Installer on your PC and select the cpu type, then the Serial Monitor. You should see output similar to the following where the Command Station enumerates all the I2C devices it can find.</li> <li>Examine the log to check that your PCA9685 has been detected and note the I2C address it was discovered at. This will typically be 0x40. If this address is 0x40 or 0x41 then the CS has defaulted this to be a PCA9685 and automatically assigned a range of 16 VPINs to represent the 16 servo outputs.</li> <li>Examine the log further down and you should see. TODO CLIP where the VPINs are assigned. The following advice assumes that the address was 0x40 and the first VPIN will be 100.</li> <li>Plug a servo into the first output socket. DO NOT mechanically connect the servo arm to any turnout or animation as the servo may move unexpectedly and cause physical damage.</li> <li>Connect the additional servo power supply to the long-edge turrets on the PCA9685, observing the correct polarity. </li> <li>On the installers serial monitor, enter the command <code>&lt;D SERVO 100 2000&gt;</code> which should move the servo. Experiment with other positions than 2000. The usable range is approximately 100 to 4000 but varies.  </li> <li>(Optionally) Use the EX-Toolbox Andoid app to experiment with servo angles and servo arm lengths until you have the required throw distance and angles to suit your servo mounting preferences.</li> </ol>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#define-your-turnouts","title":"Define your Turnouts","text":"<ol> <li>In EX-Installer, edit myAutomation.h and define each turnout to give an id of your choice, the VPIN of the servo, the closed and open servo values you have discovered by experimentation and a suitable decription to show on your throttle. </li> </ol> <p>For example </p> <pre><code>SERVO_TURNOUT(1,100,350,720,\"Coal yard exit\")\nSERVO_TURNOUT(2,101,400,800,\"Branch line siding\")\n</code></pre> <ol> <li>Reload the command station from the installer.</li> </ol>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#test-your-turnout-definitions","title":"Test your turnout definitions","text":"<ol> <li>Using the serial monitor as before, enter the commands <code>&lt;T 1 T&gt;</code> to throw turnout 1, <code>&lt;T 2 C&gt;</code> to close turnout 2 and so on. </li> <li>With your Wifi throttle (Typically Engine Driver) navigate to the turnouts page where you will see the two turnouts listed. From there you can throw or close them as required.</li> </ol>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#connect-your-servos-to-turnouts","title":"Connect your servos to turnouts","text":"<p>There are many ways of mounting servos both above and below the baseboard using 3D printed mounts or a strip of plastic L shape. You will probably want to use microswitches to switch frog polarity or use more expensive frog juicers or EXRAIL driven relays. </p> <p>We recommend that whatever mechanical connection you make allows for protection of you turnout from excess servo movement.</p>"},{"location":"products/ex-commandstation/accessories/90-buying-i2c-devices/","title":"Buying I2C devices","text":"<p>There are many I2C devices available and the price/availability can vary widely depending on your location and delivery options. Where devices are very cheap, you may find quality issues and so expect a few duds. </p> <p>Some devices come with Qwiic connectors which makes them easier to plug-and-play with the Qwiic connector on your EX-CSB! or EX8874 motor shield. </p> <p>In general the Adafruit devices below are high quality and well documented but that is usually reflected in the price.</p> <ul> <li> <p>MCP23017 provides 16 pins for mixed input or output. (see details) This is good for</p> <ul> <li>Up to 14 inputs from push-buttons, switches, sensors.</li> <li>Up to 16 outputs to LEDs and signals (which require current limiting resistors) and relays.</li> </ul> </li> <li> <p>PCA9685 provides up to 16 outputs for servos and LEDs (PWM pins used for V+ include resistors) (See details)</p> </li> <li> <p>LTC4311 resolves electronic issues when the total of I2C wiring is greater than approximately 2m or 6ft. (See details)</p> </li> <li> <p>Qwiic wires make it easy to plug these devices together. (See details)</p> </li> </ul> <p>TODO</p> <ul> <li>mux</li> <li>neopixel</li> </ul>"},{"location":"products/ex-commandstation/exrail/1-exrail/","title":"What is EXRAIL?","text":"<p>EXRAIL is an \u201cEXtended Railroad Automation Instruction Language\u201d used to:</p> <ul> <li>Describe your turnouts, signals etc.</li> <li>Configure your Command Station to understand the hardware and accessories you have attached.</li> <li>Handle what to do when things happen (e.g. a button is pressed)</li> <li>Create automated route settings through your layout</li> <li>Move things, make sounds, flash lights</li> <li>Drive trains under automatic control</li> <li>Implement mimic panels and control panels</li> <li>Display status information or platform announcements on OLED screens.</li> </ul>"},{"location":"products/ex-commandstation/exrail/1-exrail/#you-dont-need","title":"You DON\u2019T need","text":"<ul> <li>JMRI, or any additional utilities</li> <li>Engine Driver, wiThrottle, or any other WiThrottle app</li> <li>A separate computer living under your layout</li> <li>Knowledge of C++ or Python/Jython programming</li> </ul> <p>Although EXRAIL has more than 100 individual commands available, it is generally easier to work from the how-to cookbook examples rather than attempt to understand every feature. It's important to understand a few principles first.</p>"},{"location":"products/ex-commandstation/exrail/1-exrail/#important-background-information","title":"Important Background Information","text":"<ul> <li>EXRAIL scripts are written into a file called myAutomation.h which you can edit with any suitable text editor. You don't need any extra tools installed on your PC that you don't already have in VSCode or the EX-Installer.</li> <li>When you upload the command station with the DCC-EX code, myAutomation.h is used by the compiler to configure the software and embed any sequences so that the command station can run without further assistance from your PC. If you change myAutomation.h then you must upload again.</li> <li>EXRAIL can run multiple sequences simultaneously so it's great for annoying Arduino programmers who find that extremly complex to do in C++.</li> </ul>"},{"location":"products/ex-commandstation/exrail/1-exrail/#basic-building-blocks","title":"Basic building blocks","text":"<p>There are a few basic building blocks that will appear in the examples:</p> <ul> <li><code>SEQUENCE</code> - Simply a list of things to be done in order. These things might be to actually drive a train around, or merely to set some turnouts or flash some scene or panel lights. Actions can be made to wait for conditions to be met, like a sensor detecting a train, a button being pushed, or a period of time elapsing. e.g.</li> </ul> <pre><code>  SEQUENCE(27) // Close crossing gates\n    BLINK(100,500,500) // start flasher\n    DELAY(4000)\n    SERVO(200,30,Slow) // move barrier\n    DONE   // sequence completed\n</code></pre> <ul> <li><code>ROUTE</code> - A special type of SEQUENCE that is made visible to a throttle with a readable name so the user can press a button to get the sequence executed. This might be best used to set a series of turnouts and signals to create a route through the layout. For example</li> </ul> <pre><code>  ROUTE(1,\"Platform A to mainline\")\n    THROW(27) // set turnouts\n    CLOSE(6)\n    GREEN(101) // change departure signal\n    DONE \n</code></pre> <ul> <li><code>AUTOMATION</code> - A special type of SEQUENCE that is made visible to a throttle so that a user can hand over a loco and let EXRAIL drive the train away, following each step listed in the sequence. For example, a user could manually drive a train into a station and press a handoff button in the throttle to run an AUTOMATION to take it on a journey around the layout.</li> </ul> <pre><code>  AUTOMATION(17,\"Depart to Byeckaslike\")\n    FWD(20) // start slowly\n    AT(107) // when we reach sensor 107\n    SPEED(55)\n    AT(108) // approaching station\n    SPEED(10) // slow down\n    AT(109) // at the terminus\n    ESTOP // stop dead\n    DONE\n</code></pre> <ul> <li>ON-handler - a sequence that is automatically started when some event happens. For example when a button is pressed (ONBUTTON) or a turnout is changed (ONTHROW / ONCLOSE) so you can intercept turnout/point changes to automatically adjust signals or other turnouts.</li> </ul> <pre><code>ONBUTTON(127)\n  RED(108)\n  THROW(6)\n  GREEN(112)\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/1-exrail/#a-users-story","title":"A users story","text":"<p>I have used C++ on Arduino\u2019s and Python/Jython on JMRI software to build Automation sequences. I now use EXRAIL instead because:</p> <ul> <li> <p>It\u2019s significantly easier and more flexible than the other two options.</p> </li> <li> <p>I reduce the number of Uno and Nano accessory boards needed to do the same tasks on the layout by using the DCC-EX Command Station and embedded EXRAIL instead.</p> </li> <li> <p>I can create Automations, Routes, &amp; Sequence scripts With EXRAIL on the Command Station and still access them from JMRI PanelPro and DecoderPro GUI buttons with a simple sendDCCmessage.py script pointer that passes them to the EXRAIL scripts on the Command Station, so I don\u2019t have to rewrite the script in Jython/Python.</p> </li> <li> <p>EXRAIL is ten times easier to learn and use and is more flexible then the other methods.</p> </li> </ul>"},{"location":"products/ex-commandstation/exrail/2-autostart/","title":"Things that happen at startup","text":"<p>When the command station starts:</p> <ul> <li>Definitions of HAL drivers, Turnouts, signals and HAL drivers will take place first regardless of where they are found in the myAutomation.h file.</li> <li>EXRAIL will run through all its sequences to detect any VPIN that has been used for input, perhaps by an AT, AFTER, ONBUTTON, ONSENSOR and so on. These pins are then set to the Arduino INPUT_PULLUP mode. This is necessary so that EXRAIL can actually read the input pins.</li> </ul> <p>Where VPINS are mapped to external expanders (such as an MCP23017), the HAL driver will pass on the relevant commands to the expander.</p> <ul> <li>EXRAIL will then automatically start tasks at any point in the myAutomation.h file where and AUTOSTART command is found. There may be several and they will all run simultaneously and in no particular priority.</li> </ul> <p>To create commands that will automatically run at startup:</p> <pre><code>AUTOSTART\n  POWERON\n  THROW(1)\n  CLOSE(2)\n  PRINT(\"Ready to Rumble\")\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/analog-sensors/","title":"Analog sensors","text":"<p>Sensors that read analog values are comparatively rare for model railway use but are sometimes used to detect a binary state depending on the current detected by a sensor.</p> <p>ADS1113 and ADS1114 are restricted to 1 input.  ADS1115 has 4 way multiplexer which allows any of four input pins to be read by its ADC.</p> <p>The ADS111x is set up so that the maximum input voltage of 5V (when Vss=5V) gives a reading of 32767*(5.0/6.144) = 26666.</p> <p>A device like the above is defined in EXRAIL by</p> <pre><code>HAL(ADS1113,300, 1, 0x48);  // single-input ADS1113 on vpin 300\n// or\nHAL(ADS1115,300, 4, 0x48);  // four-input ADS1115 on pins 300..303\n</code></pre> <p>To monitor a vpin like this for a binary decision</p> <pre><code>AUTOSTART SEQUENCE(99)\nATGTE(300,1000) // wait intil vpin 300 reaches 1000 or greater\n... do something\nATGTE(300,950) // wait until it drops back below 950\n.. do something else\nFOLLOW(99) // continue monitoring\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/animation-sensors/","title":"Buttons and Switches","text":"<p>Buttons and switches are connected to an input vpin, usually on an expander such as an MCP23017 which provides a number of input or output pins.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/animation-sensors/#detecting-a-button-press","title":"Detecting a button press","text":"<p>The ONBUTTON(x) sequence is started when the vpin x is made HIGH by a button press or other sensor being triggered.</p> <pre><code>ONBUTTON(102)\n  PRINT(\"Moooving on\")\n  SERVO(135,417) // move cow out of the way\n  DELAY(4000)  // wait \n  THROW(3) // throw turnout 3 \n  GREEN(130) // set a signal\n  DONE\n</code></pre> <p>Repeated pressing of the button will be ignored until the DONE has completed.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/animation-sensors/#detecting-a-switch-change","title":"Detecting a switch change","text":"<p>The ONSENSOR(x) sequence is started when an input vpin changes state between HIGH and LOW. You will probabaly need to check the state inside the sequence using an IF(x) command.</p> <pre><code>ONSENSOR(106)\n  IF(106) \n    PRINT(\"Sensor 106 gone HIGH\")\n    GREEN(110) // set signal\n  ELSE\n    PRINT(\"Sensor 106 gone LOW\")\n    RED(110)  // set signal\n  ENDIF\n  DONE\n</code></pre> <p>Note: Switches are not suitable for controlling turnouts because the command station cant reach out a finger and change the switch position when the turnout is changed from a throttle or some other EXRAIL script. (Unless of course, you are into animating a servo to do just that!)</p> <p>You can toggle a turnout with a single button</p> <pre><code>ONBUTTON(122) TOGGLE_TURNOUT(7) DONE\n</code></pre> <p>Or have 2 buttons</p> <pre><code>ONBUTTON(122) THROW(7) DONE\nONBUTTON(123) CLOSE(7) DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/dc-tracks/","title":"Set a track to DC","text":"<p>The command</p> <ul> <li><code>SET_TRACK(t,mode)</code> is used to change the way a track is used.</li> </ul> <p>Using a ROUTE or other sequence, you can set a track to the correct DC polarity and specify the loco address that the throttle will use to drive the loco on that track.</p> <p>(The throttle doesn't need to know that you are using DC.)</p> <pre><code> ROUTE(77,\"Set track A to DC for loco 123\")\n   SETLOCO(123)\n   SET_TRACK(A,DC)\n   DONE\n</code></pre> <p>Modes DC or DCX are only different in that the polarity is reversed. This will be important if you have, for example, a double track mainline which is normally wired in opposite polarity so that 'forward' is clockwise on one track and anticlockwise on the other. To drive over a junction between the two, the 'to' track must be switched in polarity to match the 'from' track.</p> <p>For example:</p> <pre><code>ROUTE(78,\"Cross from outer to inner\")\n  SETLOCO(123)\n  SET_TRACK(A,DC)\n  SET_TRACK(B,DCX)\n  THROW(6) // throw the crossover turnout(s)\n  DONE\n</code></pre> <p>See also the facing turnouts cookbook.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/estop-button/","title":"Emergency stop button","text":"<p>ONBUTTON(123) will start a sequence at this point when a button on vpin 123 is pressed. The ESTOPALL command will stop all locos and inform all throttles. The DONE command completes/terminates the process started by ONBUTTON.</p> <pre><code>ONBUTTON(123) ESTOPALL DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/flashing-signals/","title":"Signals with flashing","text":"<p>Flashing is achieved with the command</p> <pre><code>BLINK(vpin, onMs, offMs)\n</code></pre> <p>which will start a vpin blinking until such time as it is SET, RESET or set by a signal operation such as RED, AMBER, GREEN.</p> <p>BLINK returns immediately, the blinking is autonomous.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flashing-signals/#always-blink-amber","title":"Always blink AMBER","text":"<p>A signal that always blinks amber could be done like this:</p> <pre><code>SIGNALH(130,131,132)\nONAMBER(130) BLINK(131,500,500) \nDONE\n</code></pre> <p>The RED or GREEN calls will turn off the amber pin and that will stop the blink automatically.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flashing-signals/#amber-and-flashing-amber","title":"Amber and Flashing Amber","text":"<p>A signal that has normal AMBER and flashing AMBER could be done by creating a new macro to implement a FLAMBER(signalid) command</p> <pre><code>// create a new command\n#define FLAMBER(signal) \\\n        AMBER(signal) \\\n        BLINK(signal+1,500,500)\n\nSIGNAL(130,131,132) \n\n// then where necessary you can \nAMBER(130)   // set signal to AMBER\n// or \nFLAMBER(130) // set signal to flashing amber\n</code></pre> <p>(Caution: this assumes that the amber pin is redpin+1 in the SIGNAL or SIGNALH definition)</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/roster-similar-locos/","title":"Roster for Similar Sound Locos","text":"<p>The ROSTER command in EXRAIL can be tedious if you have several sound locos with the same function settings. Using a preprocessor definition saves typing.</p> <pre><code>ROSTER(1201,\"Red class 99\",\"light/*horn/flash/bang/wallop/squeal/honk\") \nROSTER(1202,\"Green class 99\",\"light/*horn/flash/bang/wallop/squeal/honk\") \n</code></pre> <p>Can be simplified by pre-defining the functions:</p> <pre><code>#define CLASS99F \"light/*horn/flash/bang/wallop/squeal/honk\" \nROSTER(1201,\"Red class 99\",CLASS99F) \nROSTER(1202,\"Green class 99\",CLASS99F) \n</code></pre> <p>This technique is particularly useful for rostering DC tracks where the function keys are related to PWM frequency:</p> <pre><code>#define DCFuncs\"/////////////////////////////FQ490 Hz/FQ3400 Hz/FQ62500 Hz\"\nROSTER(1225,\"DC TRACK B 1225\",DCFuncs)\nROSTER(1226,\"DC TRACK C 1226\",DCFuncs)\n</code></pre> <p>It is also possible to utilise the compiler rule that \"Hello\" \"Sailor\" is treated as \"HelloSailor\". This means that common functions can be used with loco specific additions.</p> <pre><code>#define CommonFuncs \"light/*horn\" \nROSTER(1201,\"Noisy class 99\",CommonFuncs \"/flash/bang/wallop/squeal/honk\") \nROSTER(1202,\"Quieter class 99\",CommonFuncs) \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/","title":"Route button control","text":"<p>Route buttons appear on the throttle and can be controlled from EXRAIL to hide, disable or recaption the button. Everything here applies equally to AUTOMATIONs.</p> <p>If a route button can be in one of 4 states:</p> <ul> <li>Inactive (waiting to be pressed)</li> <li>Active (highlighted as if selected)</li> <li>Disabled (you can't press this)</li> <li>Hidden (the entire route is not visible on the throttle)</li> </ul> <p>This allows EXRAIL to prevent multiple conflicting routes to be set, or to replace the default \"Set\" button with open/close, start/stop, yes/no, on/off or whatever makes most sense in context.</p> <p>Here are examples of solving the same problem but with different user experiences. In this case we want a way of setting a light on or off.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/#simple-light-switch-route","title":"Simple light switch route","text":"<p>This example just has the logic to switch a light on/off with the \"Set\" button.  It uses a Bitmap flag to remember whether the light is on or off. Note that the light and flag will default to off.</p> <p>A flag or range of flags in created like this:</p> <pre><code>HAL(Bitmap,800,16)\n</code></pre> <p>That creates flags 800..815, we only need one here but if you need more, its better to crete a bank of flags in one go rather than lots of individual flags.</p> <pre><code>ROUTE(600,\"Shed lights\")\n  IF(800)  // is the light on? \n     RESET(120)  // lights off\n     RESET(800)\n  ELSE  // light is off \n     SET(120)  // lights on\n     SET(800)\n  ENDIF\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/#changing-button-captions","title":"Changing button captions","text":"<p>The same logic includes changing the button caption from \"Set\" to \"Turn On\" or \"Turn Off\".</p> <pre><code>ROUTE(600,\"Shed lights\")\n  IF(800)  // is the light on? \n     RESET(120)  // lights off\n     RESET(800)\n     ROUTE_CAPTION(600,\"Turn on\") // change button caption\n  ELSE  // light is off \n     SET(120)  // lights on\n     SET(800)\n     ROUTE_CAPTION(600,\"Turn off\") // change button caption\n  ENDIF\n  DONE\n\nAUTOSTART\n  ROUTE_CAPTION(600,\"Turn On\") // start with lights off (pin and flag will default off)\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/#changed-button-activeinactive-appearance","title":"Changed button active/inactive appearance","text":"<p>This example make the \"set\" button appear active (highlighted) or inactive</p> <pre><code>ROUTE(600,\"Shed lights\")\n  IF(800)  // is the light on? \n     RESET(120)  // lights off\n     RESET(800)\n     ROUTE_INACTIVE(600) // change button state to inactive\n  ELSE  // light is off \n     SET(120)  // lights on\n     SET(800)\n     ROUTE_ACTIVE(600) // button appears highlighted as active\n  ENDIF\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/#two-separate-routes-example","title":"Two separate routes example","text":"<p>This example has two \"routes\" to control lights, but only one of them will be visible at a time so we dont need a flag. Each route will have the default \"Set\" button.</p> <pre><code>ROUTE(600,\"Shed lights on\")\n  SET(120)\n  ROUTE_HIDDEN(600) // hide self\n  ROUTE_INACTIVE(601) // reveal off \n  DONE\n\nROUTE(601,\"Shed lights off\")\n  RESET(120)\n  ROUTE_HIDDEN(601)\n  ROUTE_INACTIVE(600)\n  DONE\n\nAUTOSTART\n    ROUTE_HIDDEN(601)  // shed lights are off already\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/startup-poweron/","title":"Startup power","text":"<p>By default the Command station will start with the track power OFF.</p> <p>This can be inconvenient if you are using the free version of the WiThrottle app from the Apple store which does not have a power button.</p> <p>You can configure EXRAIL to power on at startup by using</p> <pre><code>AUTOSTART POWERON DONE\n</code></pre> <p>Alternatively, you can power tracks individually</p> <pre><code>AUTOSTART\n  SET_POWER(A,ON)\n  SET_POWER(D,ON)\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/tca8418-keyboard/","title":"TCA8418 keyboard scanner","text":"<p>The TCA8418 IC from Texas Instruments is a low cost and very capable GPIO and keyboard scanner. Used as a keyboard scanner, it has 8 rows of 10 columns of IO pins which allow encoding of up to 80 buttons. The IC is available on an Adafruit board with Qwiic I2C interconnect called the Adafruit TCA8418 Keypad Matrix and GPIO Expander Breakout.</p> <p>The great advantage of this IC is that the keyboard scanning is done continuously, and it has a 10-element event queue, so even if you don't get to the interrupt immediately, keypress and release events will be held for you. Since it's I2C its very easy to use with any DCC-EX command station.</p> <p>The TCA8418 driver presently configures the IC in the full 8x10 keyboard scanning mode, and then maps each key down/key up event to the state of a single vpin for extremely easy use from within EX-RAIL and JMRI as each key looks like an individual sensor.</p> <p>This is ideal for mimic panels where you may need a lot of buttons, but with this board you can use just 18 wires to handle as many as 80 buttons.</p> <p>By adding a simple HAL statement to myAutomation.h it creates between 1 and 80 buttons it will report back.</p> <pre><code>HAL(TCA8418, firstVpin, numPins, I2CAddress, interruptPin)\n</code></pre> <p>For example:</p> <pre><code>HAL(TCA8418, 300, 80, 0x34)\n</code></pre> <p>Creates VPINs 300-379 which you can monitor with EX-RAIL, JMRI sensors etc.</p> <p>With an 8x10 key event matrix, the events are numbered using the Rn row pins and Cn column pins as such:</p> <pre><code>     C0  C1  C2  C3  C4  C5  C6  C7  C8  C9\n    ========================================\n R0|  0   1   2   3   4   5   6   7   8   9\n R1| 10  11  12  13  14  15  16  17  18  19\n R2| 20  21  22  23  24  25  26  27  28  29\n R3| 30  31  32  33  34  35  36  37  38  39\n R4| 40  41  42  43  44  45  46  47  48  49\n R5| 50  51  52  53  54  55  56  57  58  59\n R6| 60  61  62  63  64  65  66  67  68  69\n R7| 70  71  72  73  74  75  76  77  78  79\n</code></pre> <p>So if you start with the first pin definition being VPIN 300, R0/C0 will be 300 + 0, and R7/C9 will be 300+79 or 379.</p> <p>And if needing an Interrupt pin to speed up operations:</p> <pre><code>HAL(TCA8418, 300, 80, 0x34, 21)\n</code></pre> <p>This is not for CSB1 which has no spare pins for interrupts.</p> <p>Note that using an interrupt pin speeds up button press acquisition considerably (less than a millisecond vs 10-100), but even with interrupts enabled the code presently checks every 100ms in case the interrupt pin becomes disconnected. Use any available Arduino pin for interrupt monitoring.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/timecontrol/","title":"Time Control","text":"<p>The Command Station has additional commands added to exrail allow events to be controlled by a EX-FastClock.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/timecontrol/#time-command","title":"Time Command","text":"<p>The basic form of the clock command is:</p> <pre><code>ONCLOCKTIME( hour, mins)\n</code></pre> <p>This is an event based command and will activate a sequence of commands until a DONE command is reached.  An example of how this might be used is as follows:</p> <pre><code>ONCLOCKTIME(06,15) \n  SETLOCO(7309) \n  ....\n  .... Do some stuff\n  ....\n  DONE\n</code></pre> <p>Sequences built this way can only be run via a clock command.  If it was required to have a sequence that could be run for Engine Driver for example, then this could be operated by a clock command as below:</p> <pre><code>ONCLOCKTIME(06,15) SENDLOCO(7309,10) DONE\n\nSEQUENCE(10)\n    PRINT(\"Go Somewhere\")\n    FON(1)\n    DELAY(500)\n    FWD(50)\n    DELAY(20000)\n    FWD(0)\n    DELAY(2000)\n    FON(4)\n    DELAY(3000)\n    FOFF(4)\n    PRINT(\"You have arrived\")\n    FOFF(1)\nDONE\n</code></pre> <p>This event could either be run by the clock or could be selected at will from Engine Driver.  To stop the Command Station from running timed commands to switch to manual running, simply pause the clock.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/timecontrol/#repeating-time-events","title":"Repeating Time events","text":"<p>Some users may wish to repeat an event at the same time every hour - e.g. to play a recording of a clock chime.  It is possible to achieve this as follows:</p> <pre><code>ONCLOCKMINS( mins )\n</code></pre> <p>This is an event based command that will activate at the same time each hour as in the example below:</p> <pre><code>ONCLOCKMINS(15) \n  SET(1000)             // Start playing first MP3 file\n  AT(-1000)             // Wait for playing to finish\n  RESET(1000)           // Stop player \n  ....\n  .... Do some other stuff\n  ....\nDONE\n</code></pre> <p>The sequence above will repeat at 15 munites past the hour per FastClock time.  It would also be possible to make these routines be selectable from Engine Driver by configuring them as follows:</p> <pre><code>ONCLOCKMINS(15) FOLLOW(10) DONE\n\nSEQUENCE(10)\n  SET(1000)             // Start playing first MP3 file\n  AT(-1000)             // Wait for playing to finish\n\n  RESET(1000)           // Stop player \n  ....\n  .... Do some other stuff\n  ....\nDONE\n</code></pre> <p>In that way the Sequence 10 can either be run by the clock, or if the clock is not running may be selected manually from Engine Driver.</p> <p>NB:  See the following page for details on running sound files.</p> <p>( add a refernce )</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/timecontrol/#testing-timed-sequences","title":"Testing Timed Sequences","text":"<p>If one is testing out a sequence using a timed command it can be done quickly without using the clock.  The following command can be entered from the System Monitor:</p> <pre><code>&lt;JC mmmm ss&gt; \n</code></pre> <p>where mmmm is the time in minutes since midnight.  This is (hours * 60) + mins and is how the time is held within  Command Station.  So for the time in the example above (6:15) the following:</p> <pre><code>&lt;JC 375 4&gt;\n</code></pre> <p>would execute the command immediately (4 being the perceived speed factor i.e. 1 minutes every 15 seconds).  The  Command Station would respond with:</p> <pre><code>&lt;jC 375&gt;\n</code></pre> <p>And would then display any messages generated by the SEQUENCE 10.</p> <p>The final command available is:</p> <pre><code>  &lt;JC&gt;\n</code></pre> <p>which requests the latest time from  Command Station which responds with:</p> <pre><code>  &lt;jC 375&gt;\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/advanced/5-display-locos-on-oled/","title":"Display Loco speeds on OLED (Advanced)","text":"<p>The following example creates a C++ function to display loco details on an OLED screen. By using a generic HAL driver, the function can be invoked repeatedly according to a time delay.</p> <p>BEWARE that code like this is sensitive to many restrictions such as time taken and memory use. It is also subject to version changes in some of the internal dcc-ex routines so is only given here as an example.</p> <p>EXRAIL macros cannot be used inside STEALTH sections. Users using STEALTH and STEALTH_GLOBAL are expected to understand the implications and the C++ language features used and the need to avoid any lengthy process.</p> <p>The STEALTH_GLOBAL macro allows the creation of C++ functions within the command station environment. This function displays the first 8 locos in the DCC speed reminders table on LCD/OLED screen 2.</p> <p>Notice that it will only update one OLED row per call, and will not update the row if the speed byte has not changed. This is because OLED updates are very \"expensive\" in terms of cpu time and I2C traffic volumes and attempting to do too much in one call can cause blocking of other more important functions.</p> <pre><code>STEALTH_GLOBAL(\n  void updateLocoScreen() {\n    const byte loco_slots=8;\n    static byte current_slot=loco_slots-1;\n    static byte shown_speed[loco_slots]; // remember whats already shown\n    static bool first_call=true;\n\n    if (first_call) {\n      first_call=false;\n      for (int i=0; i&lt;loco_slots; i++) shown_speed[i]=127;\n    }\n\n    // switch to next row\n    current_slot= (current_slot + 1) % loco_slots;\n    auto loco=DCC::speedTable[current_slot].loco;\n    if (loco&lt;0) return; // this slot is no longetr used\n    if (loco==0) return; // we are beyond the last loco   \n\n    auto speed = DCC::speedTable[current_slot].speedCode;\n    if (speed== shown_speed[current_slot]) return; // no change in speed\n    shown_speed[current_slot] = speed; // remember speed for next time\n\n    auto direction = (speed &amp; 0x80) ? 'F' : 'R';\n    speed = speed &amp; 0x7f;\n    if (speed &gt; 0) speed = speed - 1; // make it look like JMRI\n    StringFormatter::lcd2(2, current_slot+2, F(\"Loco:%4d %3d %c\"), loco, speed, direction);\n  }\n)\n</code></pre> <p>To ensure the function is called twice per second we use the UserAddin HAL feature. The LCD/OLED number 2 used by the function is connected by I2C. </p> <pre><code>HAL(UserAddin,updateLocoScreen,500) \nHAL(HALDisplay&lt;OLED&gt;, 2, 0x3d, 128, 64)  \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/1-basic/","title":"Basic driving functions","text":"<p>EXRAIL contains a number of basic commands to drive locos and control their functions such as lights and sounds.</p> <p>All driving speeds are in the range 0 to 127 where 0 is a normal stop (where a loco's decoder will usually stop gently as if the driver were applying the brakes) and speed 1 is an emergency stop where the loco will stop immediately without any semblance of momentum. The same speed range applies for DC and when running with 28 speed steps. </p> <ul> <li><code>FWD(speed)</code> will start the loco moving forward at the given speed.</li> <li><code>REV(speed)</code> will start the loco moving in reverse at the given speed.</li> <li><code>SPEED(speed)</code> alters the loc speed without changing the direction.</li> <li><code>STOP</code> is the same as SPEED(0)</li> <li><code>ESTOP</code> is the same as SPEED(1)</li> </ul> <p>Bear in mind that FWD(0) and REV(0) are not quite the same thing as it will affect the loco lights (if the loco has direction changing lights fitted) and may involve sound effects if the loco simulates the driver changing the reversing gear.</p> <p>Its important to understand that EXRAIL has \"tasks\". A task may be driving loco 3 using sequence(555) while another task is driving loco 7 using a the same or a different sequence.</p> <p>The loco associated with a task can be set with a <code>SETLOCO(locoid)</code> executed within the task, or it can be automatically assigned from a throttle using a hand-off to an AUTOMATION.</p> <p>Usually, a sequence being used to drive a loco will include <code>AT(vpin)</code> commands to continue until a given sensor is detected.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/2-automations/","title":"AUTOMATIONS","text":"<p>An AUTOMATION is a sequence of EXRAIL commands used to drive a loco.</p> <p>By creating an AUTOMATION in EXRAIL, your throttle will show the automation on its Routes display. To send a loco along an AUTOMATION, you must first drive the loco to a point where the automation can start and then select the automation from the routes screen.</p> <p>The automation will take over driving the loco but you will still see the throttle moving if the loco changes speed. If you manually alter the speed with the throttle that will take effect normally as the automation spends most of its time in an AT command waiting for the train to reach a sensor, and will not wake up again until the sensor is detected. You may, for example, stop the train manually to fix a derailment, dropped rolling stock or cat sitting on the track. When you restart the loco and drive it to the sensor, the automation will carry on.</p> <p>Imahine we have a track like this with sensors..</p> <pre><code>Dogbath                                                  Catflap\n||============================================================||\n  |          |                                  |            |\n 180        181                                182          183\n</code></pre> <p>Create an automation like this. The automation id needs to be unique amongst all AUTOMATION, ROUTE or SEQUENCE definitions.  </p> <pre><code>AUTOMATION(123,\"Dogbath to Catflap and back\")\n  FWD(20) // Set off\n  AT(181) SPEED(40) // once round bend, increase speed\n  AT(182) SPEED(20) // approaching Catflap\n  AT(183) STOP // at Catflap stopping point\n  DELAYRANDOM(5000,10000) // wait for tea trolley to be refreshed\n  REV(20) // reverse away \n  AT(183) SPEED(50) // out of station\n  AT(181) SPEED(20) // approaching Dogbath\n  AT(180) STOP // stopping point\n  DONE // task is complete \n</code></pre> <p>First drive your loco to Digbath with the forward facing Catflap. Select the automation from your throttle and the train should make the journey.</p> <p>It should be pretty obvious what this does and where the sensors need to be to give a reasonable slow down point. The AT command stops the task until the sensor is activated. EXRAIL commands can be on the same line or separate lines, it makes no difference but sometimes its easier to read if you put things like AT something DO something on one line.</p> <p>If you wished this to shuttle back and forth, just replace the <code>DONE</code> with <code>DELAYRANDOM(5000,10000) FOLLOW(123)</code> and the automation will delay at Catford and loop back to the start.</p> <p>Of particular interest, compared with a PC (JMRI, iTrain, RocRail etc) running the loco, EXRAIL is only interested in the sensor your task us trying to reach. This makes it vastly more efficient than even the fastest PC system.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/3-functions/","title":"Loco Functions","text":"<p>Functions can be set on or off. EXRAIL knows nothing about the meaning of each function because this is internal to the loco decoder.</p> <ul> <li><code>FON(func)</code>  turns on a loco function</li> <li><code>FOFF(func)</code> turns off a function</li> </ul> <p>In more advanced cases, an automation driving a loco may need to manage functions on another address, perhaps carriage lights. This can be done with the commands</p> <ul> <li><code>XFON(locoid, function)</code></li> <li><code>XFOFF(locoid, function)</code></li> </ul> <p>For eaxample:</p> <pre><code>... while driving...\n   AT(189)   // passing tunnel\n   FON(0)    // loco lights on\n   FON(8)    // make like a boy-racer  \n   XFON(3001,0) // carriage lights on\n   AT(190)   // at far end of tunnel\n   FOFF(8)   // pretend we didn't do that\n   FOFF(0)   // loco lights off\n   XFOFF(3001,0) // carriage lights off\n... and so on\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/multi-files/","title":"Multiple Files in EXRAIL","text":"<p>EXRAIL commands are read by the compiler only from the file myAutomation.h, the absence of a file with this name means no EXRAIL code is loaded into the command station. However, it is simple to partition myAutomation.h into separate files for the convenience of editing. For example myTurnouts.h, myRoster.h and so on. By ensuring all the files start with \"my\" it avoids issues with name clashes or Git.</p> <p>To include your additional files, use the c++ preprocessor #include control in myAutomation.h to insert the file contents exactly as if you had typed them into myAutomation.h</p> <pre><code>// Include my roster file\n#include \"myRoster.h\"\n// Include my turnout definitions\n#include \"myTurnouts.h\"\n// Special animation\n#include \"myCowOnElectricFence.h\"\n</code></pre> <p>A note to hardened C++ programmers... do not be tempted to add include guards to your .h files.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/multiple-command-stations/","title":"Maintaining multiple command stations","text":"<p>Maybe you have more than one command station and you wish to have slightly different EXRAIL setups, perhaps because you are testing a new release on a sepaerate CPU or need to compile different scripts for different layouts.</p> <p>The C++ compiler pre-processor is available to select various parts of your myAutomation.h based on definitions created in your config.h or those created by defines.he which automates the detection of the CPU type of your command station.</p> <p>For example:</p> <pre><code>#if defined(ARDUINO_ARCH_AVR)\n  // on my Mega, I have signal1 on pins (30,31,32)\n  ALIAS(mysignal1,30)\n#else \n  // on my CSB1 or similar, I use pins 800,801,802 on an expander\n  ALIAS(mysignal1,800)\n#endif\n  SIGNALH(mysignal1,mysignal1+1,mysignal1+2)\n  ONTHROW(1) RED(mysignal1) DONE\n  ONCLOSE(1) GREEN(mysignal1) DONE\n</code></pre> <p>In addition, each EXRAIL command is actually a preprocessor definition so it is possible to use an #ifdef to include a section that uses a new feature but only if the code version has that feature available.</p> <pre><code>#ifdef NEOPIXEL\n   NEOPIXEL(2013,255,255,0)\n#endif   \n</code></pre> <p>Note #ifdef xxx and #if defined(xxx) do the same thing.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/naming-a-sequence/","title":"Naming sequences for easy commands","text":"<p>The DCC-EX command</p> <pre><code>&lt;/START id&gt;\n</code></pre> <p>can be used to start a sequence when the sequence id is known.</p> <p>However its is sometimes more convenient to code a sequence so that it can be started by name.</p> <p>This is made possible by using upper case quoted sequence names with the _hk suffix.</p> <pre><code>SEQUENCE(\"BEER\"_hk)  \n  PRINT(\"BEER sequence started\")\n  ... and so on\n</code></pre> <p>The name must be specified in upper case but it can be started by the command in any mixed case.</p> <pre><code> &lt;/start beer&gt;\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/using-call-return/","title":"Using CALL and RETURN","text":"<p>Where you want to use the same sequence of commands from several places in other sequences you can avoid copying the repeated stuff by using CALL and RETURN</p> <pre><code>ROUTE(1,\"Platform A to mainline\")\n  CALL(911)\n  THROW(1)\n  CLOSE(2)\n  DONE\n\nROUTE(2,\"Platform B to mainline\")\n  CALL(911)\n  CLOSE(1)\n  CLOSE(2)\n  DONE\n\nSEQUENCE(911)\n  SERVO(123,100,Slow)  // move the cow out of the way\n  PLAYSOUND(500,3) // Make it Moo\n  DELAYRANDOM(5000,10000) // make the route wait 5 to 10 seconds\n  RETURN      // return to the calling sequence\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/using-call-return/#notes","title":"Notes","text":"<ul> <li>You can nest CALLs 4 deep.</li> <li>If the called sequence executes a <code>DONE</code> statement, the task is terminated and there is no return.</li> </ul>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/using-macros/","title":"Using C++ Macros","text":"<p>The EXRAIL language is compiled by C++ and this means you can use MACROS of your own design according to the C++ compiler pre-processor specification.</p> <p>A MACRO is essentially a tiny program that types stuff for you while substituting parameters.</p> <p>For example: This macro can be used to start two leds flashing alternately at half second intervals:</p> <pre><code>#define FLIPFLOP(led) \\\n   BLINK(led,500,500) \\\n   DELAY(500) \\\n   BLINK(led+1,500,500)\n</code></pre> <p>Notice that a C++ macro must be only one logical line long! So we must use the <code>\\</code> character on the end of the line to indicate that this line is continued on the following.</p> <p>In the above example, the FLIPFLOP macro takes a LED VPIN and starts flashing it, then half a second later it starts flashing the next pin in line. Since the delay and the on/off period are the same, the LEDs will flash alternately.</p> <p>So you might use it in a sequence like this:</p> <pre><code>ONBUTTON(30)\n   FLIPFLOP(32)  // start flashing leds 32 and 33\n   DELAY(4000)   // wait 4 seconds\n   SERVO(123,1033,Slow) // close crossing gates\n   DELAY(3000) // give red-light jumpers a chance to consider their life choices\n   GREEN(34) // change approach signal to green\n   DONE\n</code></pre> <p>and</p> <pre><code>ONBUTTON(31)\n   RED(34) // change approach signal to red\n   SERVO(123,3200,Slow) // Open crossing gates\n   RESET(32,2) // turn off the blinking on pins 32,33\n   DONE\n</code></pre> <p>The servo positions above are of course dependent on your servos and how they are mounted. You must experiment first see Servos.</p> <p>Macros like these are, obviously, more useful if you use the macro in more than one place.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/1-vpins/","title":"Virtual Bitmap device pins (VPINs)","text":"<p>A VPIN is an Arduino pin number that has been extended to include pins on external devices or expanders.</p> <p>By giving external device pins unique VPIN numbers, the vast majority of the pin manipulation required by the user is controlled the same way regardless of whether the pin is an actual Arduino pin on the main CPU, an expander pin over i2c perhaps behind a multiplexer, a virtual pin or even a software-only pin simulation.</p> <p>The vast majority of VPINs are either output (e.g. LEDs and servos) or input (e.g. buttons and sensors) but rarely both.  </p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/1-vpins/#creating-virtual-pins","title":"Creating virtual pins","text":"<p>Virtual pins are normally defined by specifying the Hardware Driver that is used to connect to an external device. There is no way for the command station to know for sure what devices are connected so it must be told. This is done by including HAL commands in myAutomation.h</p> <p>For Example</p> <pre><code>    HAL(PCA9685,100,16,0x20) \n    HAL(MCP23017,200,16,0x40) \n</code></pre> <p>This would create VPINs 100 to 115 to represent the 16 servo outputs of a PCA9685 servo control board at I2C address 0x20 and VPINS 200 to 215 in an MCP23017 i/o expander. Refer to wiring details and fuller list of supported I2C devices elsewhere.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/1-vpins/#using-output-vpins","title":"Using OUTPUT VPINS","text":"<p>Pin values can be changed with basic digital pin commands common to all VPINs.  In EXRAIL</p> <p><code>SET(113)</code> <code>RESET(113)</code>  sets value HIGH or LOW.</p> <p><code>SET(100,5)</code> or <code>RESET(100,5)</code>  sets/resets a range of pins (100..104 in this case).</p> <p><code>BLINK(201,250,750)</code> sets pin 201 blinking for 250mS on and 750mS off. Blinking is stopped by a SET or RESET of the pin.</p> <p>Serial commands can set HIGH/LOW values to VPINs using   as for any digital output."},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/1-vpins/#using-input-vpins","title":"Using INPUT VPINs","text":"<p><code>IF(200)</code> tests if pin value is HIGH.</p> <p><code>ONBUTTON(200)</code> triggers when a pin goes HIGH. This is most useful for push buttons connected between the pin and ground. This causes a new EXRAIL task to start and switch bounce will be ignored until the task completes.</p> <p>For example:</p> <pre><code>ONBUTTON(202) \n   RED(11) \n   THROW(2)\n   CLOSE(1)\n   GREEN(12)\n   DONE\n</code></pre> <p><code>ONSENSOR(200)</code> triggers when a sensor changes state. This is less useful.</p> <p>Other more advanced commands are available, see cookbooks.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/","title":"Flags, Counters and Bitmaps","text":"<p>These are implemented by a software-only driver that mimics a set of VPINs that can be used for both digital and analogue values. Unlike sensors and leds, these VPINs are both INPUT and OUTPUT  These can be used in many ways:</p> <ul> <li>As a simple digital flag to assist in inter-thread communication.</li> <li>A flag or value that can be set from commands and tested in EXRAIL.(e.g. to stop a sequence)</li> <li>As a counter for looping or occupancy counts such as trains passing over a multi track road crossing.</li> <li>As a collection of 16 digital bits that can be set, reset, toggled, masked and tested.</li> </ul> <p>Existing &lt;&gt; and exrail commands for vpins work on these pins.  </p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#creating-virtual-pins","title":"Creating virtual pins","text":"<pre><code>  HAL(Bitmap,firstpin,npins) \n</code></pre> <p>creates 1 or more virtual pins in software.</p> <p>e.g. <code>HAL(Bitmap,1000,20)</code>  creates pins 1000..1019</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#use-as-flags","title":"Use as flags","text":"<p>When used as a digital flag, these pins can be changed or tested with the basic digital pin commands common to all VPINs.  SET, RESET, BLINK, IF, ONBUTTON, ONSENSOR and so forth. Serial commands operate in the same way.  </p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#use-as-counters","title":"Use as counters","text":"<p>For loop counting, counters can be incremented by <code>BITMAP_INC(1013)</code> and decremented by <code>BITMAP_DEC(1013)</code> and tested with IF/IFNOT/IFGTE etc.</p> <p>Counters be used to automate a multi track crossing where each train entering increments the counter and decrements it on clearing the crossing. Crossing gate automation can be started when the value changes from 0, and be stopped when the counter returns to 0.</p> <p>Detecting the first increment from 0 to 1 can be done with <code>ONBUTTON(1013)</code> and the automation can use <code>IF(1013)</code> or <code>IFNOT(1013)</code> to detect when it needs to reopen the road gates.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#use-as-analogue-values-advanced","title":"Use as analogue values (advanced)","text":"<p>Analog values may be set into the virtual pins and tested using the existing analog value commands and exrail macros. <code>&lt;z vpin value&gt;</code> <code>&lt;D ANIN vpin&gt;</code> etc. and in EXRAIL <code>ANOUT(vpin,value,0,0)</code></p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#use-as-binary-flag-groups-advanced","title":"Use as binary flag groups (advanced)","text":"<p>Virtual pins (and others that respond to an analog read in order to provide bit mapped digital data, such as SensorCam) can be set and tested with new special EXRAIL commands</p> <p><code>IFBITMAP_ALL(vpin,mask)</code>   Bitwise ANDs the  the vpin value with the mask value and is true if ALL the 1 bits in the mask are also 1 bits in the value.     e.g.    <code>IFBITMAP_ALL(1013,0x0f)</code>  would be true if ALL the last 4 bits of the value are 1s.</p> <p><code>IFBITMAP_ANY(1013,0x0f)</code> would be true if ANY of the last 4 bits are 1s.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#modifying-bitmap-values","title":"Modifying bitmap values","text":"<p><code>BITMAP_AND(vpin,mask)</code> performs a bitwise AND operation. <code>BITMAP_OR(vpin,mask)</code>  performs a bitwise OR operation <code>BITMAP_XOR(vpin,mask)</code> performs a bitwise EXCLUSIVE OR (which is basically a toggle).</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/latches/","title":"Latches","text":"<p>Latches were first introduced into EXRAIL as a way of latching a sensor value or pushbutton on, so that once detected it could be checked later and not suffer from bouncing. This use is comparatively rare and has generally been superseded by the more recent ONBUTTON event handler.</p> <p>Latches were also used as a way of setting a flag that could be read later, for example to remember whether a light had been switched on by a ROUTE so that the next call to the same route could switch it off again.</p> <p>Unfortunately, the LATCH implementation was designed in a limited way to support tiny processors like the UNO or NANO so the latch numbers were limited and could only apply to on-board pins and not extended VPINs. It became common to use latch numbers above the real pin numbers but below the artificial software limit (63 on a UNO, 255 on bigger CPUs) for various flags in routes and automations.</p> <p>Because of these limitations, it is recommended that you use the much simpler flags feature which provides virtual VPINs that can be set, reset and tested without the limitations of LATCH.</p> <p>For example:</p> <pre><code>HAL(Bitmap,800,16) // create flags 800..815 \nROUTE(600,\"Shed lights\")\n  IF(800)  // is the light on? \n     RESET(120)  // lights off\n     RESET(800)\n  ELSE  // light is off \n     SET(120)  // lights on\n     SET(800)\n  ENDIF\n  DONE\n</code></pre> <p>Note that the code cannot use <code>IF(120)</code> to test if the light is on because pin 120 is an OUTPUT pin on a physical device.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/neopixels/","title":"NeoPixel support","text":"<p>The IO_NeoPixel.h driver supports the adafruit neopixel seesaw board. It turns each pixel into an individual VPIN which can be given a colour and turned on or off using the the NEOPIXEL Exrail macro. Exrail SIGNALS can also drive a single pixel signal or multiple separate pixels.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/neopixels/#defining-the-hardware-driver","title":"Defining the hardware driver","text":"<p>Add a driver definition in myAutomation.h for each adafruit I2C driver.</p> <pre><code>    HAL(neoPixel, firstVpin, numberOfPixels [, mode [, i2caddress])\n</code></pre> <p>Where mode is selected from the various pixel string types which have varying colour order or refresh frequency. For MOST strings this mode will be NEO_GRB but for others refer to the comments in IO_NeoPixel.h</p> <p>If omitted the node and i2caddress default to NEO_GRB, 0x60.</p> <p>For example:</p> <pre><code>    HAL(NeoPixel,1000,20)\n</code></pre> <p>This is a NeoPixel driver defaulting to I2C aqddress 0x60 for a GRB pixel string. Pixels are given vpin numbers from 1000 to 1019.</p> <pre><code>    HAL(NeoPixel,1020,20,NEO_GRB,0x61)\n</code></pre> <p>This is a NeoPixel driver on i2c address 0x61.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/neopixels/neopixels/","title":"Setting neopixels","text":"<p>The NEOPIXEL macro provides the ability to set neopixels on or off change the colour. either individually or over a range of pixels.</p> <pre><code>NEOPIXEL([-]vpin, red, green, blue [,count])\n</code></pre> <p>vpin = pin number of the individual pixel in the range defined by the HAL(NeoPixel...) command. red = 0..255 intensity of the red channel green = 0..255 intensity of the green channel blue = 0..255 intensity of the blue channel count = numver of pixels to set, starting at vpin. Default =1.</p> <p>Setting pixels on or off (without colour change) can be done with SET/RESET.</p> <p>Because the pixels obey SET/RESET, the BLINK command can also be used to control blinking a pixel.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/neopixels/signals/","title":"Neopixel signals","text":"<p>There are two types possible:</p> <ul> <li>a mast with separate fixed colour pixels for each aspect</li> <li>a mast with one multiple colour pixel for all aspects.</li> </ul> <p>Bear in mind that a single multicolour neopixel used above might be physically a multi-colour LED (as in a searchlight signal), or 3 individual LEDS wired to a single neopixel chip (as in a 2 or 3 lamp signal).  </p> <p>For separate pixels, the colours should be established at startup and a normal SIGNALH macro used.</p> <pre><code>AUTOSTART \n  SIGNALH(1010,1011,1012)\n  NEOPIXEL(1010,255,0,0)       \n  NEOPIXEL(1011,128,128,0)\n  NEOPIXEL(1012,0,255,0)\n  RED(1010)  // force signal state otherwise all 3 lights will be on\n  DONE\n</code></pre> <p>For signals with 1 neopixel, the NEOPIXEL_SIGNAL macro will create a signal on one vpin with three separate colours</p> <pre><code>NEOPIXEL_SIGNAL(vpin,redfx,amberfx,greenfx)\n</code></pre> <p>redfx,amberfx,greenfx = colour values</p> <p>The fx values above can be created by the NeoRGB macro so a bright red would be <code>NeoRGB(255,0,0)</code>  bright green <code>NeoRGB(0,255,0)</code> and amber something like <code>NeoRGB(255,100,0)</code>. NeoRGB creates a single int32_t value so it can be used in several ways as convenient (but can't be used in an ALIAS command).</p> <pre><code>// create 1-lamp signal with NeoRGB colours\nNEOPIXEL_SIGNAL(1000,NeoRGB(255,0,0),NeoRGB(255,100,0),NeoRGB(0,255,0))\n\n// Create 1-lamp signal with named colours.\n// This is better if you have multiple signals.\n// (Note: ALIAS is not suitable due to word length defaults) \n#define REDLAMP NeoRGB(255,0,0)\n#define AMBERLAMP NeoRGB(255,100,0)\n#define GREENLAMP NeoRGB(0,255,0)\nNEOPIXEL_SIGNAL(1001,REDLAMP,AMBERLAMP,GREENLAMP)\n\n// Create 1-lamp signal with web type RGB colours \nNEOPIXEL_SIGNAL(1002,0xFF0000,0xFF6400,0x00FF00)\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/02-defining-dcc-turnouts/","title":"Defining DCC turnouts","text":"<p>DCC Turnouts (or points) operate by listening to DCC messages sent along the track by the command station. Each turnout has a DCC address which may be specified as a pair of values (address,subaddress) or a single value linear address. Its generally easier to think in terms of the linear address but it makes no difference whatever to the kind of DCC message sent, other than the conversion from (address,subaddress) to linear is badly thought out and inconsistent between DCC implementations due to historically/histerically ambiguous standards.</p> <p>Define DCC based turnouts using EXRAIL.</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>address- the DCC address that the turnout decoder is listening to   or shortAddress,subAddress - the alternative form of the same address.</p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes <code>\"\"</code>. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>For example:</p> <pre><code>TURNOUTL(123,55,\"Up the junction\")\nTURNOUT(124,12,3,\"Down the mine\")\nTURNOUTL(125,56,HIDDEN) // not visible to throttles\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/03-defining-pin-turnouts/","title":"Defining PIN turnouts","text":"<p>PIN Turnouts operate by detecting the state of an output pin.</p> <p>Define pin based turnouts using EXRAIL.</p> <pre><code>PIN_TURNOUT(id, vpin, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>vpin- the pin to be set HIGH for thrown and LOW for closed  </p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes \u201c\u201d. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>For example:</p> <pre><code>PIN_TURNOUT(6,201,\"Round the bend\")\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/04-defining-servo-turnouts/","title":"Defining Servo turnouts","text":"<p>(This does not include servos driven from track connected DCC decoders. See DCC Decoders)</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/04-defining-servo-turnouts/#important-considerations-for-servo-operation","title":"Important considerations for servo operation","text":"<p>Servo turnouts are driven through a PCA9685 servo control board on an EX-IOExpander.</p> <p>Test, test, test your servo parameters prior to connecting to an actual turnout/point. If you have defined angles that exceed the physical limits of your turnout, you will likely damage it and/or the servo mechanism.</p> <p>Treat each servo and turnout as an individual as not all servos (or turnouts/points for that matter) are created equal. An angle that works with one servo and associated turnout will not necessarily provide the exact same result with another. Differences in servo brands, mounting methods, and even normal manufacturing tolerances will need to be factored in to the servo angles in use.</p> <p>The EX-Toolbox Android application provides a servo movement testing tool to help you discover the necessary values for the angles below.</p> <p>Use flexible wire to connect your servo arm to the turnout/point. Using a flexible connection between the turnout and the servo mechanism means if anything does go wrong such as the turnout getting jammed or an incorrect servo angle being sent, it reduces the chance of damaging the turnout or servo.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/04-defining-servo-turnouts/#defining-servo-based-turnout-objects","title":"Defining servo based turnout objects","text":"<p>Define servo based turnouts using EXRAIL.</p> <pre><code>SERVO_TURNOUT(id, vpin, active_angle, inactive_angle, profile, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>pin = The ID of the pin the servo is connected to, which would typically be the VPin ID of the PCA9685 controller board.</p> <p>active_angle = The angle to which the servo will move when the turnout is thrown (This is a value passed to the servo drtiver, it is not in degrees).</p> <p>inactive_angle = The angle to which the servo will move when the turnout is closed.</p> <p>profile = The speed at which a turnout will move: Instant, Fast, Medium, Slow.</p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes \u201c\u201d. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>An example definition for a servo connected to the second control pins of the first PCA9685 connected to the CommandStation, using the slow profile for prototypical operation:</p> <pre><code>SERVO_TURNOUT(200, 101, 450, 110, Slow, \"Coal yard exit\")\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/11-facing-turnouts/","title":"Facing turnouts","text":"<p>When you have turnouts that face each other, its awkward for the throttle user to have to manually switch both to match each other. By treating the crossover as a single turnout, control is simplified and incorrect combinations are prevented.</p> <p>To do this, we need to hide one of the turnouts from the user, and make sure that throwing/closing the visible turnout automatically throws/closes the other turnout.</p> <p>All turnout definitions in EXRAIL allow for a text description to be shown to the user throttle. The HIDDEN keyword, used instead of a turnout description prevents it being visible to the throttle or JMRI/iTrain etc.</p> <pre><code>TURNOUTL(1,101,\"Cross inner to outer\")\nTURNOUTL(2,102,HIDDEN)\n\nONTHROW(1) THROW(2) DONE\nONCLOSE(1) CLOSE(2) DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/12-animated-turnouts/","title":"Animated turnouts","text":"<p>Switching turnouts is easy, but sometimes you want to make it more realistic by introducing signals, delays and other automations.</p> <p>The combination of hidden and virtual turnouts makes this easy.</p> <p>Lets suppose you have a turnout id 100 and to make it look realistic you need to set some signal to stop, wait for the signalman to walk accross the lever frame, throw the turnout, wait again and set another signal to green.</p> <p>First we need to hide the real turnout from the throttles. This is done by changing the description to the keyword HIDDEN and giving it a different id so we can refer to it later.</p> <pre><code>  TURNOUTL(100,1,\"Coal yard exit\")  // for example\n</code></pre> <p>is changed to</p> <pre><code>  TURNOUTL(1001,1,HIDDEN) \n</code></pre> <p>Now we can create a virtual turnout that will be seen by the throttles and specify what we want to happen when it is thrown or closed.</p> <pre><code>   VIRTUAL_TURNOUT(100,\"Coal yard exit\")\n\n   ONCLOSE(100)\n     RED(501)  // set approach signal\n     RED(505)  // set approach signal\n     DELAY(4000) // wait for signalman to move\n     CLOSE(1001) // close the real turnout \n     DELAY(5000)\n     GREEN(501) // set approach signal\n     DONE\n\n   ONTHROW(100)\n     RED(501)  // set approach signal\n     RED(505)  // set approach signal\n     DELAY(4000) // wait for signalman to move\n     THROW(1001) // throw the real turnout \n     DELAY(5000)\n     GREEN(505) // set approach signal\n     DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/13-toggle-with-button/","title":"Toggle turnouts with button or sensor","text":"<p>A turnout of any type can be toggled by a button or sensor of any type.</p> <pre><code>ONBUTTON(123) TOGGLE_TURNOUT(6) DONE\n</code></pre>"},{"location":"products/ex-commandstation/trackmanager/trackmanager/","title":"TrackManager","text":"<p>TrackManager is what lets you dynamically configure the outputs of your Command Station as either:</p> <ul> <li>Main DCC track output</li> <li>Programming DCC track output</li> <li>DC mode</li> </ul> <p>NOTE that DC output is only available with specific hardware requirements.</p>"},{"location":"products/ex-csb1/1-ex-csb1/","title":"EX-CSB1 CommandStation Booster","text":"<p>This is the EX-CSB1 Getting Started Guide.</p>"},{"location":"products/ex-csb1/1-ex-csb1/#features","title":"Features","text":"<p>The DCC-EX EX-CSB1 Command Station/Booster comes ready to use out of the box and has the following features:</p> <ul> <li>Dual DCC/PWM DC outputs with up to 5A capacity \u2013 easily expandable to 4 outputs</li> <li>WiFi built-in \u2013 fast 802.11n capable, with Access Point and Station modes including support for connecting as many as 10 WiFi throttles (you can also connect to JMRI via WiFi, but a USB cable is often better)</li> <li>Single power supply for track and onboard electronics \u2013 12-25V DC with polarity protection</li> <li>USB-C connector \u2013 for software upload, diagnostic monitoring, DCC-EX WebThrottle and JMRI connectivity</li> <li>Railsync DCC input \u2013 enables Booster or Sniffer modes, which with an EXRAIL script can be automatically engaged on receipt of a signal</li> <li>OLED screen \u2013 for diagnostics, status and information display</li> </ul> <p></p>"},{"location":"products/ex-csb1/1-ex-csb1/#connecting","title":"Connecting","text":"<p>The DCC-EX EX-CSB1 Command Station/Booster needs the minimum following connections to be able to run trains:</p> <ul> <li>Power input on the 2.1mm black barrel connector \u2013  accepts 10-25V DC fully regulated, preferably a modern switch-mode power brick, double-insulated with good power overload protection. Minimum current capability of 4A, suggested 12-16V for Z, N or HO/OO scales, with DCC+Sound locos generally wanting 14-16V even in N scale.</li> <li>One track connection - on either the Track Out A (topmost) or Track Out B (beside the power) connector. Note that by default, A is configured for DCC MAIN operation, and B is configured for PROG or programming track. We recommend connecting your track to the A MAIN output initially to test running of trains.</li> </ul> <p>When correctly supplied with track power, both green Power LEDs will light. If the right-most LED alone is lit, it indicates power is being supplied from the USB-C connector so software upload can proceed, but trains cannot be run.</p> <p>The WiFi LED will light once a WiFi network is created (Access Point mode), or once connected to an existing WiFi network (Station mode.)</p> <p>Other Connectors:</p> <ul> <li>Qwiic I2C connector - allows a broad range of 3.3V I2C peripherals to be easily with simple cables.</li> <li>Railsync connector - allows connection to Railsync or a DCC track signal for Booster and Sniffer modes when enabled with suitable software configuration.</li> </ul>"},{"location":"products/ex-fastclock/01-overview/","title":"EX-FastClock","text":"<p>Welcome to the home of EX-FastClock, a fully integrated Fast Clock for EX-CommandStation.</p> <p>EX-FastClock is a standalone adjustable speed clock built using an additional Arduino Uno microcontroller and a plug-in shield type TFT touch screen.  The commands built into the DCC_EX Command Station make it possible to also integrate an existing microcontroller based fast clock.</p>"},{"location":"products/ex-fastclock/01-overview/#background","title":"Background","text":"<p>This project is based on a project originally written by Jim Gifford (Hallet Cove Southern) in June 2017.  This project used a 32 x 8 LED matrix to display the time and was controlled by a number of pushbuttons.</p> <p>See Jim's Original Project here.</p> <p>I felt that this project was ripe for an update and decided to convert Jim's code to operate using a cheap TFT/LCD touch screen to run on my own layout. This project is the result.  Much of the code has been rewritten into smaller functions with additional features added, but the time clock calculations are the originals.</p> <p>This project has now been extended to add the capability of integrating the clock to the DCC-EX Command Station and more specifically the EXRAIL automation feature which now allows time based control. This feature is optional and can be controlled by the config.h file.</p>"},{"location":"products/ex-fastclock/01-overview/#what-is-ex-fastclock","title":"What is EX-FastClock?","text":"<p>EX-FastClock is a standalone microprocessor based fast adjustable speed clock, using an additional Arduino Uno in conjunction with a shield based TFT touchscreen. Features have been added to EX-CommandStation to allow the clock to integrate to the EX-CommandStation and control EXRAIL based on time events.</p> <p></p> <p>Each time the time changes the EX-CommandStation looks for a time change event and if it finds a match it executes the commands recorded for that event as defined in the EXRAIL myAutomation.h file.  Additionally the EX-CommandStation will issue a time broadcast so that other devices such as clock repeaters can capture the time.  Also where WiThrottle devices are connected a WiThrottle broadcast is made which means that connected devices such as Engine Driver can display the time.</p> <p>EX-FastClock allows the FastClock device to connect to the EX-CommandStation via either Serial Communications or I2C.  Even though EX-FastClock provides the code for an Uno based Clock it should be possible for tinkerer level users to add the relevant code if they already have a working clock that they wish to integrate to EX-CommandStation.</p> <p>To make full use of EX-FastClock**, you will need a basic understanding of EX-RAIL automation, but we'll share the details and some examples to help with this.</p> <p>NOTE: EX-FastClock is in public Beta testing, and as such, we encourage regular feedback on the success or otherwise of both the software and documentation. Please reach out via any of our support methods and help us get EX-FastClock as easy to use and reliable as possible.</p> <p>The EX-FastClock integration includes:</p> <ul> <li>A ready made Arduino program for an Arduino Uno based Fast Clock</li> <li>Support for Serial connection</li> <li>|I2C| device driver</li> <li>EX-RAIL automation support</li> <li>Time Broadcast for time display on WiThrottle controllers such as |Engine Driver|</li> <li>Debug output to Serial Monitor</li> </ul>"},{"location":"products/ex-fastclock/01-overview/#credit-where-credit-is-due","title":"Credit where credit is due","text":"<p>*The EX-FastClock is based on a project originally written by Jim Gifford (Hallet Cove Southern) in June 2017. That project used a 32 x 8 LED matrix to display the time and was controlled by a number of pushbuttons. You can see Jim's Original Project here.</p> <ul> <li>MCUFRIEND.kbv credit: This library was written by David Prentice and has become the De-Facto standard for the shield based TFT screens used in this project. This library inherits from the Adafruit GFX library.</li> <li>Adafruit for the Adafruit GFX Library.</li> </ul>"},{"location":"products/ex-fastclock/01-overview/#next-steps","title":"Next Steps","text":"<p>Now that you have a general overview of EX-FastClock's features and capabilities, click the \"next\" button see what is needed to create an EX-FastClock.</p>"},{"location":"products/ex-fastclock/02-hardware/","title":"Hardware","text":""},{"location":"products/ex-fastclock/02-hardware/#what-you-need-for-ex-fastclock","title":"What you need for EX-FastClock","text":"<ul> <li>An EX-CommandStattion running version 5.0.0 or later</li> <li>An Arduino Uno microcontroller</li> <li>An MCUFRIEND type plug in shield TFT touchscreen</li> <li>A suitable power supply</li> <li>Dupont type wires to connect the components, male to female or female to female as required</li> <li>A USB cable to connect the Arduino to a PC to load the software</li> </ul> <p>The software for the  EX-FastClock can be found in the  EX-FastClock repository in the DCC-EX GitHub.  The code can be configured to run a clock which will communicate to the Command Station by either Serial or I2C.  The options are chosen from the file config.h.  Instructions are contained in the README.md file.  Which option you choose will depend upon weather you have serial throttles connected to the serial ports in which case I2C might be the better option.  Alternatively if you already have lots of I2C devices then it might be better to run the Serial option.</p> <p>Given that the MCUFREIND style shield is a shield and uses the A4 pin as LCD_RST it is necessary to make a modification to enable the I2C communication.  This involces cutting the A4 pin and soldering a jumper from LCD_RST on the back of the TFT board to the pin that aligns with the UNO RST pin.  However if one is intending to configure the clock as a serial device then this modification is not required.</p> <p></p> <p>This modification allow the A4 &amp; A5 to operate correctly as I2C and was suggested by David Prentice who wrote the MCUFRIEND.kbv library that this project uses.  A discussion on this modification can be found on the Arduino forum here.</p> <p>If using Serial communication no modification is required. Pins 0 &amp; 1 (TX/RX) are unused on the LCD PCB therefore wires may be soldered to the Arduino PCB to run to Serial connections on the CS.</p> <p>Now that you know what you need, click the \"next\" button see how you use  EX-FastClock.</p>"},{"location":"products/ex-fastclock/04-calibration/","title":"Calibration","text":"<p>The MCUFRIEND style shield used in this project is usually a cheap(ish) import from China.  These come with a variety of processor chips and various tolerances on the touch screen.  As such before use it is necessary to carry out a calibration routine.  The MCUFRIEND library contains a routine for this and a number ot test programs to test out the functionality of the TFT/Touch screen.</p> <p>To carry out the calibration please carry out the following steps:</p> <p>In either VSCODE/PlatformIO or Arduino IDE locate and load the sketch TouchScreen_Calibr_Native.ino  This should be found in the MCUFRIEND_kbv/examples folder in the libraries.  By default this test is setup to run using the screen in Portrait mode which is the correct orientation.</p> <p>Load a System Monitor - this will display any output from the test program.</p> <p>Compile and upload this sketch to the Arduino UNO - this should generate the screen shown below.</p> <p></p> <p>Touching the screen will then display the calibration screen shown in Fig 2 below:</p> <p></p> <p>As requested - using a stylus press the crosses displayed in the squares in turn.  When this process is complete the configuration data will be displayed on the screen.  The same data should be displayed on the System Monitor.  The output should look like that shown in Fig 3 below:</p> <p></p> <p>Cut/Copy the two lines indicated in Fig 3. and paste them into the appropriate space in the config.h file from the EX-Fast_Clock code.</p>"},{"location":"products/ex-fastclock/05-installation/","title":"Installation","text":"<p>The EX-FastClock Software will be found in the appropriate repository in the DCC-EX repository on Github</p> <p>This repositry currently contains two branches:</p> <ol> <li>Main.  This branch contains a copy of the code and ancilliary files on PlatformIO configuration.</li> <li>Arduino IDE.  This branch contains the files in the necessary structure for use with the Ardiuino IDE</li> </ol>"},{"location":"products/ex-fastclock/05-installation/#libraries","title":"Libraries","text":"<p>The project requires three libraries -</p> <ul> <li>Adafruit_GFX</li> <li>Adafruit_Touchscreen</li> <li>MCUFRIEND_kbv.  </li> </ul> <p>All three can be installed from the Arduino IDE library manager or Platformio Library system as required however for compatability where possible use the copies supplied in the repositiory folder.</p>"},{"location":"products/ex-fastclock/05-installation/#platformio","title":"Platformio","text":"<p>Select the Main branch from the repository and click on the CODE button.  Select Download ZIP file option.  Extract the files from the download and place the files in a folder within your Projects directory.</p>"},{"location":"products/ex-fastclock/05-installation/#arduino-ide","title":"Arduino IDE","text":"<p>Select the Arduino IDE branch from the repository and click on the CODE button.  Select Download ZIP file option.  Create a folder within your Arduino sketch folder called EX-Fast_Clock.  Copy the files EX-Fast_Clock.ino, EX-FastClock.h and config.h to this folder.  Copy the directories from the libraries folder into the Arduino libraries folder.</p>"},{"location":"products/ex-fastclock/05-installation/#both-environments","title":"Both Environments","text":"<p>I have  generated two special fonts for the project which can be found in the Fonts folder in the Adafruit GFX Library in this repository.  These should be copied into the fonts folder in the Adafruit_GFX library once installed. The file Arial9pt7b.h congtains a fullset of the Arial Font as used in Windows.  The file Arial48pt7b.h contains a large 48pt Arial font containing only charachters 0-9 and :.  This is used to display the time clock on the screen.  The full font was too large to fit into the Uno memory.</p>"},{"location":"products/ex-fastclock/06-configuration/","title":"Configuration","text":"<p>The FastClock can either operate in one of three modes:</p> <ul> <li>Standalone</li> <li>Serial Communication with the CS</li> <li>I2C Communication with the CS.</li> </ul> <p>To indicate which mode is in use it is necessary to edit the config.h file.</p>"},{"location":"products/ex-fastclock/06-configuration/#standalone-use","title":"Standalone use","text":"<p>The config.h file comes pre-configured to use the clock in standalone mode.  No changes are necessary.</p>"},{"location":"products/ex-fastclock/06-configuration/#serial-mode","title":"Serial Mode","text":"<p>To communicatein Serial mode it is necessary to edit the config.h file and uncomment the following line:</p> <pre><code>//#define SEND_VIA_SERIAL true\n</code></pre> <p>This will load the appropriate code including the Wire library.</p>"},{"location":"products/ex-fastclock/06-configuration/#i2c-mode","title":"I2C mode","text":"<p>To operate in I2C mode edit the config.h file and uncomment the following lines:</p> <pre><code>//#define I2CAddress 0x55 // default I2C address\n//#define SEND_VIA_I2C true\n</code></pre> <p>In this mode the CS will poll the FastClock to obtain the time.  It is necessary to set the same I2C address here as used in the myHal.cpp file within the CS.  This is set to a default of 0x55 (decimal 85) but can be set to some other value if this conflicts with othere I2C devices on your setup.</p>"},{"location":"products/ex-fastclock/06-configuration/#screen-header","title":"Screen Header","text":"<p>By default the top of the clock screen displays the name of my own layout.  To inset your layout name then change the following line.</p> <pre><code>char header[HDDR_SIZE] = {\"Nantyderry Junction\"};\n</code></pre>"},{"location":"products/ex-fastclock/06-configuration/#touchscreen-configuration","title":"Touchscreen Configuration","text":"<p>Finally insert the output of the touchscreen configuration program into the file in place of the following two lines.</p> <pre><code>const byte XP = 7, XM = A1, YP = A2, YM = 6;\nconst int TS_LEFT=899,TS_RT=122,TS_TOP=100,TS_BOT=898;\n</code></pre>"},{"location":"products/ex-fastclock/06-configuration/#configure-existing-clock","title":"Configure existing clock","text":"<p>If you already have a FastCLock there are a number of couple of configuration options which allow you to connect your own clock to a  Command Station.</p> <p>The various configuration options are outlined below</p>"},{"location":"products/ex-fastclock/06-configuration/#connecting-your-own-fastclock","title":"Connecting your own FastClock","text":""},{"location":"products/ex-fastclock/06-configuration/#connecting-via-serial","title":"Connecting via Serial","text":"<p>Connecting via Serial is the simplest option if available.  </p> <ul> <li>Run a dupont cable from the TX pin on the arduino to a RX pin on the EX-CommandStation.  It is not usually necessary to run a cable from RX to the TX on the EX-CommandStation as  the FastClock is not receiving data back.</li> <li>Find the Serial defines in the config.h file (or copy config.example.h to config.h if you dont have one), locate the following lines:</li> </ul> <pre><code>//#define SERIAL1_COMMANDS\n//#define SERIAL2_COMMANDS\n//#define SERIAL3_COMMANDS\n</code></pre> <p>and uncomment the appropriate one for the serial port you are using.</p> <ul> <li>Add the following code to your Setup() function:</li> </ul> <pre><code>Serial.begin(115200);\nwhile (!Serial) {\n; // wait for serial port to connect. Needed for native USB port only\n}\n</code></pre> <ul> <li>Include the following routine within your code:</li> </ul> <pre><code>void SendTime(byte hour, byte mins, byte speed) {\n\n  int itime = (hour * 60) + mins;\n  char buffer[20];\n  sprintf(buffer, \"&lt;JC %d %d&gt;\", itime, speed);\n  Serial.println(buffer);\n}\n</code></pre> <ul> <li>Each time the time changes call the SendTime routine as follows:</li> </ul> <pre><code>SendTime(HH, MM, clockSpeed);\n</code></pre> <p>where HH = the hour, MM = minutes and clockSpeed = the fast speed (e.g. at spped 4, 15 seconds represents a minute).</p>"},{"location":"products/ex-fastclock/06-configuration/#connecting-via-i2c","title":"Connecting via I2C","text":"<p>Connecting via I2C involves a HAL driver file to the Command Station as well as adding some code to the existing FastClock code.  Follow the following steps:</p> <ul> <li>In the  Command Station code copy the file myHal.cpp_example.txt to myHal.cpp.</li> <li>Edit the file myHal.cpp and uncomment the following line near the beginning of the file</li> </ul> <pre><code>//  #include \"IO_EXFastClock.h\"  // FastClock driver\n</code></pre> <ul> <li>Uncomment the following line near the end of the file</li> </ul> <pre><code>//  EXFastClock::create(0x55);\n</code></pre> <p>0x55 (decimal 85) is the default address but needs to match that in the FastClock code (see below).</p> <ul> <li> <p>Using Dupont connectors connect SDA/SCL/Gnd on the clock to SDA/SCL/Gnd on the  Command Station</p> </li> <li> <p>Include the following code in your FastClock code:</p> </li> </ul> <p>Near the top of the sketch:</p> <pre><code>#include &lt;Wire.h&gt;\n</code></pre> <p>Within your Setup():</p> <pre><code>Wire.begin(I2CAddress);\nWire.onRequest(TransmitTime);\n</code></pre> <p>Add the following function within the sketch</p> <pre><code>void TransmitTime() {\n    // send the data over I2C\n    // send the time as &lt;mmmm&gt; as two bytes followed by clockspeed\n    int timetosend = (HH * 60) + MM;\n    byte TimeArray[2];\n\n    TimeArray[0] = (timetosend &gt;&gt; 8);\n    TimeArray[1] = timetosend &amp; 0xFF;\n    Wire.write(TimeArray, 2);\n    Wire.write(clockSpeed);      \n}\n</code></pre> <p>In the function above  HH is the time as hours (24hr. clock) and MM is the minutes.</p> <ul> <li>The CommandStation-EX will now poll the FastClock to request the time.  The frequency at which it does so is influenced by the clock speed (i.e. on a slow clock speed it polls less often).</li> </ul> <p>Now that you know how to connect your existing FastCLock, click the \"next\" button see how you use EX-FastClock.  </p>"},{"location":"products/ex-fastclock/10-operation/","title":"Operation","text":"<p>At startup the clock will calculate a start time based on either a) a coded start time (currently 6:00 a.m.) or b) a run time stored in the EEPROM (see item 2) below.</p> <p>The clock will start in a paused state and will display the speed rate factor (default = x 4).  Once any adjustemts have been made the clock can be started.  The usage of the six buttons are as below:</p> <ol> <li>Start - Pressing this button will start the clock and the button text will change to Pause.  </li> <li>Save - Pressing this button will pause the clock and save the current time and Speed Factor to the EEPROM.  These figures will be used to initialise the clock on nextstartup.</li> <li>Reset - Pressing this button will pause the clock and set the time to 06:00 with a speed factor of 4.</li> <li>T+ - Pressing this key will pause the clock and add 15 minutes to the time.</li> <li>T- - Pressing this key will pause the clock and deduct 15 minutes from the time.</li> <li>Rate - Pressing this key will increase the speed factor to the next level.  The speed factor will cycle around the seven speed settings of 1, 2, 4, 6,, 8, 12 &amp; 30.</li> </ol> <p>In Serial Mode, at startup the initial clock time will be sent to the Command Station but when in a paused state no further time commands are sent until the START button is pressed.</p> <p>In I2C mode the Command Station polls the FastClock at intervals.</p>"},{"location":"products/ex-fastclock/15-timecontrol/","title":"Time Control","text":""},{"location":"products/ex-fastclock/15-timecontrol/#exrail-commands","title":"EXRAIL Commands","text":"<p>Commands have been included in EXRAIL allow events to be controlled by the clock.  The new commands are:</p> <pre><code>ONCLOCKTIME( hour, mins)\n</code></pre> <p>and</p> <pre><code>ONCLOCKMINS( mins )\n</code></pre> <p>For details of how to use these commands see the Clock Control Cookbook.</p>"},{"location":"products/ex-fastclock/15-timecontrol/#testing-timed-sequences","title":"Testing Timed Sequences","text":"<p>If one is testing out a sequence using a timed command it can be done quickly without using the clock by entering commands from the System Monitor.  The form of the command is:</p> <pre><code>&lt;JC mmmm ss&gt; \n</code></pre> <p>Details are again on the Clock Control Cookbook.</p>"},{"location":"products/ex-ioexpander/ex-ioexpander/","title":"EX-IOExpander","text":"<p>Doco goes here.</p>"},{"location":"products/ex-turntable/ex-turntable/","title":"EX-Turntable","text":"<p>Doco goes here.</p>"},{"location":"reference/01-serial-command-basics/","title":"Serial Command Basics","text":"<ul> <li>Serial commands are accepted as input from the USB serial connection or a TCP/IP connection.</li> <li>Commands have a single case dependent character opcode and optionaly parameters.</li> <li>Keyword parameters are shown in upper case but may be entered in mixed case.</li> <li>Value parameters are decimal numeric (unless otherwise noted)</li> <li>Not all commands have a response, and broadcasts mean that not all responses come from the last commands that you have issued.</li> <li>Commands entered like <code>&lt;JA&gt;</code> are actually read as <code>&lt;J A&gt;</code>, so <code>&lt;Ja&gt;</code> is also acceptible.</li> <li>Commands that produce diagnostic information (which is intended for human reading rather than code) only write to the USB Serial output.</li> <li>Commands that cause state changes (such as loco speeds, turnout position) cause broadcasts to all serial connections and, where appropriate, WiThrottle protocol connections.</li> </ul>"},{"location":"reference/04-track-manager/","title":"Track Manager","text":"<p>If you are only interested in a standard setup using just a DCC track and PROG track, then you DO NOT need to read the rest of this document.</p> <p>What follows is for advanced users interested in managing power districts and/or running DC locomotives through DCC-EX.</p>"},{"location":"reference/04-track-manager/#what-is-the-track-manager","title":"What is the Track Manager","text":"<p>Track Manger (TM from now on) is an integral part of the command statoon software that is responsible for:</p> <ul> <li>Managing track power state.</li> <li>Monitoring track overloads and shorts.</li> <li>Routing the DCC main or prog track waveforms to the correct Motor Driver and thus track.</li> <li>Managing the JOIN feature.</li> <li>Intercepting throttle commands to locos running on DC tracks.</li> <li>Handling user or EXRAIL commands to switch track status.</li> </ul> <p>In the default scenario of a single DCC track and a PROG track, the TM behaves as for the previous versions of DCC-EX so if thats what you want, you dont need to mess with it.</p> <p>The TM is able to handle up to 8 separate track domains. Each domain requires a hardware driver to supply track voltage. A typical motor driver shield supplies two tracks, which is what we have used in the past as main and prog.</p> <p>Unlike the older version of DCC-EX, where the shield channel A was always the DCC main and channel B was always the DCC prog track, TM allows:</p> <ul> <li>None, any or all the tracks can be DCC Main.</li> <li>None or ONE track may be DCC prog at any given time.</li> <li>Any track may be powered on or off independently of the others.</li> <li>Any track may be disconnected from the DCC signal and used as a DC track with a given loco address. (See DC discussion later)</li> </ul> <p>With such flexibility comes responsibility... the potential for making mistakes means taking extra care with your configuration!</p> <p>NOTE TM does NOT use \"zero stretching\" to control your DC motor. Instead, it uses true Pulse Width Modulation (PWM) to efficiently run your loco using the same method a decoder uses to control a DCC loco's motor. DC locos can even run better on TM than they can on a normal analog throttle, especially at low speed, since it is always applying the full track voltage, albeit in pulses of varying duration.</p>"},{"location":"reference/04-track-manager/#using-the-track-manager-dcc","title":"Using the Track Manager (DCC)","text":"<p>TM names the tracks A to H. In a default setup, you will normally have tracks A and B where A will default to be the DCC main signal and B will be the DCC prog.</p> <p>There is a new user command <code>&lt;=&gt;</code> which is used to control the TM but the <code>&lt;0&gt;</code> and <code>&lt;1&gt;</code> commands operate as before.</p> <ul> <li><code>&lt;=&gt;</code>  lists the current track settings.</li> </ul> <p>In a default setup this will normally return</p> <pre><code>&lt;=A DCC&gt;\n&lt;=B PROG&gt;\n</code></pre> <ul> <li><code>&lt;=t DCC&gt;</code>  sets track t (A..H) to use the DCC main track.   For example <code>&lt;=C DCC&gt;</code> sets track C. All tracks that are set to DCC will receive the same DCC signal waveform.</li> <li><code>&lt;=t PROG&gt;</code> Sets track t (A..H) to be the one and only PROG track. Any previous PROG track is turned off.</li> <li><code>&lt;=t OFF&gt;</code> turns off the track t. It will not power on with <code>&lt;1&gt;</code> because it will not know what signal to send.</li> </ul> <p>In an all-DCC environment it is unlikely that you will need to do anything other than setting any additional tracks (C...H) as DCC in your <code>mySetup.h</code> file.</p> <p>Bear in mind that a track may actually be only connected to DCC accessories such as signals and turnouts... your layout, your choice.</p> <p>Note that when setting a track to PROG or OFF, its power is switched off automatically. (The PROG track manages power on an as-needed basis under normal circumstances. When setting a track to MAIN (or DC, DCX see later) the power is applied according to the most recent <code>&lt;1&gt;</code> or <code>&lt;0&gt;</code> command as being the most compatible with previous versions.</p>"},{"location":"reference/04-track-manager/#using-the-track-manager-dc","title":"using the Track Manager (DC)","text":"<p>TM allows any or all of your tracks to be individually selected as a DC track which responds to throttle commands on any given loco address. So for example if track A is set to DC address 55, then any throttle commands to loco 55 will be transmitted as DC onto track A and thus a DC loco can be driven along that track. almost exactly as if it was DCC. Your throttle (JMRI, EX-Webthrottle, Withrottle, Engine Driver etc etc) do not know or care that this is a DC loco so nothing needs to change.</p> <p>For a simple Command Station setup to run just two DC tracks instead of DCC, you only need to assign DC addresses to tracks A and B. If you want DCC on track A and DC on track B, you just need to set track B to a suitable DC address.</p> <p>The command to set a track to a DC address is as follows</p> <ul> <li><code>&lt;=t DC a&gt;</code> Sets track t (A..H) to use loco address a. e.g. &lt;=A DC 3&gt;</li> </ul> <p>A simple 2 separate loop DC track, wired the traditional way in opposite directions, may be set like this to use loco addresses 1 and 2.  </p> <pre><code>&lt;=A DC 1&gt;\n&lt;=A DC 2&gt;\n</code></pre>"},{"location":"reference/04-track-manager/#crossing-between-dc-tracks","title":"Crossing between DC tracks","text":"<p>There are some slightly mind-bending issues to be addressed, especially if you want to be able to cross between two separate DC tracks or use your layout in DCC or DC mode. This is because the control of DC loco direction is relative to the TRACK and not the LOCO. (you turn a DC loco round on the track and it continues in the same geographical direction. You turn a DCC loco around and it continues to go forwards or backwards in the opposite geographical direction.)</p> <p>Generally DC tracks are wired so that two mainline tracks are in opposite direction which makes operation easy BUT crossovers between tracks will cause shorts unless you have very complex switching arrangements. This is generally incompatible with DCC wiring which expects to be able to cross between tracks with impunity because they are all wired with the same polarity.</p> <p>To get over this issue TM allows the polarity of a DC track to be swapped so that tracks wired for DCC may be switched to DC with a polarity chosen at run time according to your operations. So, for example, you may have two loops with a crossing between them. Normally you need them in opposite directions, but when you need to drive over the crossing, you need to switch one or other track so that they are at the same polarity. (This is a good case for using EXRAIL to help)</p> <p>The command <code>&lt;=t DCX a&gt;</code> will set track t (A..H) to be DC but with reversed polarity compared with a track set to DC.</p> <p>Its perfectly OK to cross between DC tracks by setting them to the same loco address and making sure you get the polarity right!</p>"},{"location":"reference/04-track-manager/#connecting-hardware","title":"Connecting Hardware","text":"<p>Each track requires hardware to control it</p> <ul> <li>Power on/off</li> <li>Polarity (direction, signal etc)</li> <li>Brake (shorts tracks together)</li> <li>Current (analog reading)</li> </ul> <p>The standard motor shields provide this for two separate tracks and are predictable and easy to use. However STACKING shields is not a viable way of adding more tracks because it prevents the software from gaining access to the individual track pins. Similarly, wiring all the signal pins together for example, will give you a shared DCC signal but it will eliminate any possibility of switching the track purpose at run time. So, you are going to have to understand enough to wire track drivers to various pins if you wish to extend beyond 2 tracks and take advantage of TM.</p> <p>You will also need to consider the implications of differing electronic implementations that would cause unexpected issues when a loco moves between tracks. We know this works fine for a typical shield because we use <code>&lt;1 JOIN&gt;</code> quite happily but this may be different if you mix hardware types..... (NOT MY PROBLEM !)</p> <p>The easiest way to consider the wiring is to treat each track individually (either as a separate driver or as half of a shield).</p> <p>You will require,for each track, on the Arduino:</p> <ul> <li>A GPIO pin (or a HAL vpin perhaps on an I2C extender, code TBA!!!) to switch power.</li> <li>A GPIO pin to switch the signal direction</li> <li>A GPIO pin with PWM capability to switch the Brake (you may omit this if you dont want any DC capability)</li> <li>Optionally An Analog pin to read the current (unless your hardware cant do that, perhaps its just feeding a booster)</li> <li>Optionally a GPIO fault pin if thats how your hardware works. (NOT recommended as you're going to run out of pins)</li> </ul> <p>IF you have no more than 3 tracks and you can arrange for the signal pins to be one of 11,12,13 on a Mega, THEN there is a slight advantage internally and the waveform will be super-sharp.</p> <p>Hardware that has two signal pins still needs some code though!!!!!!!!</p>"},{"location":"reference/04-track-manager/#configuring-the-software","title":"Configuring the Software","text":"<p>Configuring the software to provide more tracks is a simple extension of the existing method of customising the #define of MOTOR_SHIELD_TYPE in config.h Since there can be no standard setup of your wiring and hardware choices, it will be necessary to create your custom built MOTOR_SHIELD_TYPE in the manner described in MotorDrivers.h and simply continue to add more <code>new MotorDriver(</code> definitions to the list, providing all the pin numbers and electronic limits for each track. (or even shorten the list to 1)</p>"},{"location":"reference/04-track-manager/#using-exrail-to-control-track-manager","title":"Using EXRAIL to control Track Manager","text":"<p>EXRAIL has a single additional command that can be used to automate TM.</p> <ul> <li> <p><code>SET_TRACK(t,mode)</code>, where t is the track letter A..H and mode is one of:</p> <ul> <li><code>OFF</code>: track is switched off</li> <li><code>DCC</code>: track gets DCC signal</li> <li><code>PROG</code>: track gets DCC prog signal</li> <li><code>DC</code>: track is set to DC mode with the cab address of the currently executing EXRAIL sequence.</li> <li><code>DCX</code>: as DC but with reversed polarity.</li> </ul> </li> </ul> <p>DC/DCX are designed so that you can be automating a DCC loco, drive it onto a separate track and switch to DC without having to know the cab address. (e.g AUTOMATION) If however you are just running a ROUTE you can always do something like this:</p> <pre><code> ROUTE(77,\"Set track G to DC 123\")\n   SETLOCO(123)\n   SET_TRACK(G,DC)\n   DONE\n</code></pre>"},{"location":"reference/04-track-manager/#where-and-how-for-the-code","title":"Where and How for the Code","text":"<p>The TM code is primarily in TrackManager.cpp which is responsible for coordinating the track settings and commands.</p> <p>Each individual track is handled by an instance of MotorDriver created from the <code>MOTOR_SHIELD_TYPE</code> definition in config.h</p> <p>Many functions formerly in the DCCWaveform code have been moved to TrackManager or MotorDriver, notably the power control and checking. This makes the code easier to follow.</p>"},{"location":"reference/07-command-station-arch/","title":"Command station internal architecture","text":"<p>This diagram is old but basically ok. Needs editing to</p> <ul> <li>do better at css dark/light</li> <li>TPL renamed to EXRAIL</li> <li>have hotlinks on boxes to the relevant adres of the doc and/or the actual code modules in git.</li> <li>maybe convert to mermaid.</li> </ul>"},{"location":"reference/08-throttle-writers-guide/","title":"Throttle Writers Guide (doc incomplete)","text":"<p>The commonly used speed, function, loco programming and diagnostic commands are discussed elsewhere with users in mind. However there are a large number of commands designed only to be used by other programs such as JMRI, Engine Driver or other throttles specifically aimed at the DCC-EX protocol. (ie not WiThrottle)</p> <p>many commands that have been implemented to assist throttle authors to obtain information from the Command Station in order to implement turnout, route/automation and roster features. Some of these commands are deliberately milti-stage requests to avoid timing and blocking issues caused by massive transmissions (e.g. a full list of turnouts with descriptions) that can cause Command Sation issues.</p> <p>Broadcast replies are also designed so that a throttle can maintain loco speed and function states, turnout poisitions and route states.</p>"},{"location":"reference/08-throttle-writers-guide/#turnouts","title":"Turnouts","text":"<p>The conventional turnout definition commands and the <code>&lt;H&gt;</code> responses do not contain information about the turnout description which may have been provided in an EXRAIL script. A turnout description is much more user friendly than T123 and having a list helps the throttle UI build a suitable set of buttons.</p> <p><code>&lt;JT&gt;</code> command returns a list of turnout ids. The throttle should be uninterested in the turnout technology used but needs to know the ids it can throw/close and monitor the current state. e.g.  response <code>&lt;jT 1 17 22 19&gt;</code></p> <p><code>&lt;JT 17&gt;</code> requests info on turnout 17. e.g. response <code>&lt;jT 17 T \"Coal yard exit\"&gt;</code> or <code>&lt;jT 17 C \"Coal yard exit\"&gt;</code> (T=thrown, C=closed) or <code>&lt;jT 17 C \"\"&gt;</code> indicating turnout description not given. or <code>&lt;jT 17 X&gt;</code> indicating turnout unknown (or possibly hidden.)</p> <p>Note: It is still the throttles responsibility to monitor the status broadcasts. There is no intention of providing a command that indicates the turnout list has been updated since the throttle started. Also note that turnouts marked in EXRAIL with the HIDDEN keyword instead of a \"description\" will NOT show up in these commands.</p>"},{"location":"reference/08-throttle-writers-guide/#automationsroutes","title":"Automations/Routes","text":"<p>A throttle need to know which EXRAIL Automations and Routes it can show the user.</p> <p><code>&lt;JA&gt;</code> Returns a list of Automations/Routes  e.g. <code>&lt;jA 13 16 23&gt;</code>  Indicates route/automation ids.  Information on each id needs to be obtained by  <code>&lt;JA 13&gt;</code>  returns e.g. <code>&lt;jA 13 R \"description\"&gt;</code> for a route  or  <code>&lt;jA 13 A \"description\"&gt;</code> for an automation.  or <code>&lt;jA 13 X&gt;</code> for id not found</p> <p>Whats the difference:</p> <p>A Route is just a call to an EXRAIL ROUTE, traditionally to set some turnouts or signals but can be used to perform any kind of EXRAIL function... but its not expecting to know the loco.    Thus a route can be triggered by sending in for example <code>&lt;/START 13&gt;</code>.</p> <p>An Automation is a handoff of the last accessed loco id to an EXRAIL AUTOMATION which would typically drive the loco away.    Thus an Automation expects a start command with a cab id    e.g. <code>&lt;/START 13 3&gt;</code></p> <p>Routes and Automations can also have their current status and caption altered dynamically by EXRAIL (docs TODO)</p>"},{"location":"reference/08-throttle-writers-guide/#roster-information","title":"Roster Information","text":"<p>The <code>&lt;JR&gt;</code> command requests a list of cab ids from the roster. e.g. responding <code>&lt;jR 3 200 6336&gt;</code> or  for none. <p>Each Roster entry had a name and function map obtained by: <code>&lt;JR 200&gt;</code>  reply like <code>&lt;jR 200 \"Thomas\" \"whistle/*bell/squeal/panic\"&gt;</code></p> <p>Refer to EXRAIL ROSTER command for function map format.</p> <p>Obtaining throttle status.</p> <p><code>&lt;t cabid&gt;</code>  Requests a deliberate update on the cab speed/functions in the same format as the cab broadcast.     <code>&lt;l cabid slot speedbyte functionMap&gt;</code>     Note that a slot of -1 indicates that the cab is not in the reminders table and this comand will not reserve a slot until such time as the cab is throttled.</p>"},{"location":"reference/08-throttle-writers-guide/#commands-to-avoid","title":"COMMANDS TO AVOID","text":"<p><code>&lt;f cab func1 func2&gt;</code>     Use <code>&lt;F cab function 1/0&gt;</code></p> <p><code>&lt;t  slot cab speed dir&gt;</code> Just drop the slot number</p> <p><code>&lt;T commands&gt;</code> other than <code>&lt;T id 0/1&gt;</code></p> <p><code>&lt;s&gt;</code></p> <p><code>&lt;c&gt;</code></p>"},{"location":"reference/08-throttle-writers-guide/#doc-todo","title":"doc TODO","text":"<ul> <li>Route status</li> <li>Momentum</li> <li>Gauges</li> </ul>"},{"location":"reference/serial-commands/","title":"Serial Commands","text":"<p><code>&lt;#&gt;</code></p> <p>Request number of simultaneously supported locos</p> <p><code>&lt;!&gt;</code></p> <p>Emergency stop all locos</p> <p><code>&lt;t loco&gt;</code></p> <p>Request loco status</p> <p><code>&lt;t loco tspeed direction&gt;</code></p> <p>Set throttle speed(0..127) and direction (0=reverse, 1=fwd)</p> <p><code>&lt;t ignore loco tspeed direction&gt;</code></p> <p>(Deprecated) Set throttle speed and direction</p> <p><code>&lt;f loco byte1&gt;</code></p> <p>(Deprecated use F) Set loco function group</p> <p><code>&lt;f loco group byte2&gt;</code></p> <p>(Deprecated use F) Set loco function group</p> <p><code>&lt;T&gt;</code></p> <p>List all turnouts</p> <p><code>&lt;T id&gt;</code></p> <p>Delete turnout</p> <p><code>&lt;T id X&gt;</code></p> <p>List turnout details</p> <p><code>&lt;T id T&gt;</code></p> <p>Throw Turnout</p> <p><code>&lt;T id C&gt;</code></p> <p>Close turnout#</p> <p><code>&lt;T id value&gt;</code></p> <p>Close (value=0) ot Throw turnout</p> <p><code>&lt;T id SERVO vpin closedValue thrownValue&gt;</code></p> <p>Create Servo turnout  </p> <p><code>&lt;T id VPIN vpin&gt;</code></p> <p>Create pin turnout</p> <p><code>&lt;T id DCC addr subadd&gt;</code></p> <p>Create DCC turnout</p> <p><code>&lt;T id DCC linearAddr&gt;</code></p> <p>Create DCC turnout</p> <p><code>&lt;T id addr subadd&gt;</code></p> <p>Create DCC turnout</p> <p><code>&lt;T id vpin closedValue thrownValue&gt;</code></p> <p>Create SERVO turnout</p> <p><code>&lt;S id vpin pullup&gt;</code></p> <p>Create Sensor</p> <p><code>&lt;S id&gt;</code></p> <p>Delete sensor</p> <p><code>&lt;S&gt;</code></p> <p>List sensors</p> <p><code>&lt;J M&gt;</code></p> <p>List stash values</p> <p><code>&lt;J M stash_id&gt;</code></p> <p>get stash value</p> <p><code>&lt;J M CLEAR ALL&gt;</code></p> <p>Clear all stash values</p> <p><code>&lt;J M CLEAR stash_id&gt;</code></p> <p>Clear given stash</p> <p><code>&lt;J M stashId locoId&gt;</code></p> <p>Set stash value</p> <p><code>&lt;J M CLEAR ANY locoId&gt;</code></p> <p>Clear all stash entries that contain locoId</p> <p><code>&lt;J C&gt;</code></p> <p>get fastclock time</p> <p><code>&lt;J C mmmm nn&gt;</code></p> <p>Set fastclock time</p> <p><code>&lt;J G&gt;</code></p> <p>FReport gauge limits </p> <p><code>&lt;J I&gt;</code></p> <p>Report currents </p> <p><code>&lt;J A&gt;</code></p> <p>List Routes</p> <p><code>&lt;J R&gt;</code></p> <p>List Roster</p> <p><code>&lt;J R id&gt;</code></p> <p>Get roster for loco</p> <p><code>&lt;J T&gt;</code></p> <p>Get turnout list </p> <p><code>&lt;J T id&gt;</code></p> <p>Get turnout state and description</p> <p><code>&lt;z vpin&gt;</code></p> <p>Set pin. HIGH iv vpin positive, LOW if vpin negative  </p> <p><code>&lt;z vpin analog profile duration&gt;</code></p> <p>Change analog value over duration (Fade or servo move)</p> <p><code>&lt;z vpin analog profile&gt;</code></p> <p>Write analog device using profile number (Fade or servo movement)</p> <p><code>&lt;z vpin analog&gt;</code></p> <p>Write analog device value</p> <p><code>&lt;I&gt;</code></p> <p>List all turntables</p> <p><code>&lt;I id&gt;</code></p> <p>Broadcast turntable type and current position    </p> <p><code>&lt;I id position&gt;</code></p> <p>Rotate a DCC turntable</p> <p><code>&lt;I id DCC home&gt;</code></p> <p>Create DCC turntable</p> <p><code>&lt;I id position activity&gt;</code></p> <p>Rotate an EXTT turntable</p> <p><code>&lt;I id EXTT vpin home&gt;</code></p> <p>Create an EXTT turntable</p> <p><code>&lt;I id ADD position value angle&gt;</code></p> <p>Add turntable position</p> <p><code>&lt;Q&gt;</code></p> <p>List all sensors </p> <p><code>&lt;s&gt;</code></p> <p>Command station status</p> <p><code>&lt;E&gt;</code></p> <p>STORE EPROM</p> <p><code>&lt;e&gt;</code></p> <p>CLEAR EPROM</p> <p><code>&lt;Z&gt;</code></p> <p>List Output definitions </p> <p><code>&lt;Z id pin iflag&gt;</code></p> <p>Create Output</p> <p><code>&lt;Z id active&gt;</code></p> <p>Set output </p> <p><code>&lt;Z id&gt;</code></p> <p>Delete output</p> <p><code>&lt;D ACK ON&gt;</code></p> <p>Enable PROG track diagnostics</p> <p><code>&lt;D ACK OFF&gt;</code></p> <p>Disable PROG track diagnostics</p> <p><code>&lt;D CABS&gt;</code></p> <p>Diagnostic display loco state table</p> <p><code>&lt;D RAM&gt;</code></p> <p>Diagnostic display free RAM</p> <p><code>&lt;D CMD ON&gt;</code></p> <p>Enable command input diagnostics</p> <p><code>&lt;D CMD OFF&gt;</code></p> <p>Disable command input diagnostics</p> <p><code>&lt;D RAILCOM ON&gt;</code></p> <p>Enable Railcom diagnostics</p> <p><code>&lt;D RAILCOM OFF&gt;</code></p> <p>DIsable Railcom diagnostics</p> <p><code>&lt;D WIFI ON&gt;</code></p> <p>Enable Wifi diagnostics</p> <p><code>&lt;D WIFI OFF&gt;</code></p> <p>Disable Wifi diagnostics</p> <p><code>&lt;D ETHERNET ON&gt;</code></p> <p>Enable Ethernet diagnostics</p> <p><code>&lt;D ETHERNET OFF&gt;</code></p> <p>Disabel Ethernet diagnostics </p> <p><code>&lt;D WIT ON&gt;</code></p> <p>Enable Withrottle diagnostics</p> <p><code>&lt;D WIT OFF&gt;</code></p> <p>Disable Withrottle diagnostics </p> <p><code>&lt;D LCN ON&gt;</code></p> <p>Enable LCN Diagnostics</p> <p><code>&lt;D LCN OFF&gt;</code></p> <p>Disabel LCN diagnostics</p> <p><code>&lt;D WEBSOCKET ON&gt;</code></p> <p>Enable Websocket diagnostics </p> <p><code>&lt;D WEBSOCKET OFF&gt;</code></p> <p>Disable wensocket diagnostics </p> <p><code>&lt;D EEPROM numentries&gt;</code></p> <p>Dump EEPROM contents</p> <p><code>&lt;D ANOUT vpin position&gt;</code></p> <p>see  <p><code>&lt;D ANOUT vpin position profile&gt;</code></p> <p>see  <p><code>&lt;D SERVO vpin position&gt;</code></p> <p>Test servo</p> <p><code>&lt;D SERVO vpin position profile&gt;</code></p> <p>Test servo</p> <p><code>&lt;D ANIN vpin&gt;</code></p> <p>Display analogue input value</p> <p><code>&lt;D HAL SHOW&gt;</code></p> <p>Show HAL devices table</p> <p><code>&lt;D HAL RESET&gt;</code></p> <p>Reset all HAL devices</p> <p><code>&lt;D TT vpin steps&gt;</code></p> <p>Test turntable</p> <p><code>&lt;D TT vpin steps activity&gt;</code></p> <p>Test turntable</p> <p><code>&lt;C PROGBOOST&gt;</code></p> <p>Configute PROG track boost</p> <p><code>&lt;C RESET&gt;</code></p> <p>Reset and restart command station</p> <p><code>&lt;C SPEED28&gt;</code></p> <p>Set all DCC speed commands as 28 step to old decoders</p> <p><code>&lt;C SPEED128&gt;</code></p> <p>Set all DCC speed commands to 128 step (default)</p> <p><code>&lt;C RAILCOM ON&gt;</code></p> <p>Enable Railcom cutout </p> <p><code>&lt;C RAILCOM OFF&gt;</code></p> <p>Disable Railcom cutout</p> <p><code>&lt;C RAILCOM DEBUG&gt;</code></p> <p>Enable Railcom cutout for easy scope reading test</p> <p><code>&lt;D ACK LIMIT value&gt;</code></p> <p>Set ACK detection limit mA</p> <p><code>&lt;D ACK MIN value MS&gt;</code></p> <p>Set ACK minimum duration mS</p> <p><code>&lt;D ACK MIN value&gt;</code></p> <p>Set ACK minimum duration uS</p> <p><code>&lt;D ACK MAX value MS&gt;</code></p> <p>Set ACK maximum duration mS</p> <p><code>&lt;D ACK MAX value&gt;</code></p> <p>Set ACK maximum duration uS</p> <p><code>&lt;D ACK RETRY value&gt;</code></p> <p>Set ACK retry count</p> <p><code>&lt;C WIFI \"ssid\" \"password\"&gt;</code></p> <p>reconfigure stored wifi credentials </p> <p><code>&lt;o vpin&gt;</code></p> <p>Set neopixel on(vpin&gt;0) or off(vpin&lt;0)</p> <p><code>&lt;o vpin count&gt;</code></p> <p>Set multiple neopixels on(vpin&gt;0) or off(vpin&lt;0)</p> <p><code>&lt;o vpin r g b&gt;</code></p> <p>Set neopixel colour</p> <p><code>&lt;o vpin r g b count&gt;</code></p> <p>Set multiple neopixels colour </p> <p><code>&lt;1&gt;</code></p> <p>Power ON all tracks</p> <p><code>&lt;1 MAIN&gt;</code></p> <p>Power on MAIN track</p> <p><code>&lt;1 PROG&gt;</code></p> <p>Power on PROG track</p> <p><code>&lt;1 JOIN&gt;</code></p> <p>JOIN prog track to MAIN and power</p> <p><code>&lt;1 track&gt;</code></p> <p>Power on given track</p> <p><code>&lt;0&gt;</code></p> <p>Power off all tracks</p> <p><code>&lt;0 MAIN&gt;</code></p> <p>Power off MAIN track</p> <p><code>&lt;0 PROG&gt;</code></p> <p>Power off PROG track</p> <p><code>&lt;0 track&gt;</code></p> <p>Power off given track</p> <p><code>&lt;c&gt;</code></p> <p>Report main track currect (Deprecated)</p> <p><code>&lt;a address subaddress activate&gt;</code></p> <p>Send DCC accessory command</p> <p><code>&lt;a address subaddress activate onoff&gt;</code></p> <p>Send DCC accessory command with onoff control (TODO.. numbers) </p> <p><code>&lt;a linearaddress activate&gt;</code></p> <p>send dcc accessory command      </p> <p><code>&lt;A address value&gt;</code></p> <p>Send DCC extended accessory (Aspect) command</p> <p><code>&lt;w loco cv value&gt;</code></p> <p>POM write cv on main track</p> <p><code>&lt;r loco cv&gt;</code></p> <p>POM read cv on main track</p> <p><code>&lt;b loco cv bit bitvalue&gt;</code></p> <p>POM write cv bit on main track</p> <p><code>&lt;m LINEAR&gt;</code></p> <p>Set Momentum algorithm to linear acceleration</p> <p><code>&lt;m POWER&gt;</code></p> <p>Set momentum algortithm to very based on difference between current speed and throttle seting</p> <p><code>&lt;m loco momentum&gt;</code></p> <p>set momentum for loco (accel and braking)</p> <p><code>&lt;m loco accelerating braking&gt;</code></p> <p>set momentum for loco</p> <p><code>&lt;W cv value ignore1 ignore2&gt;</code></p> <p>(Deprecated) Write cv value on PROG track</p> <p><code>&lt;W loco&gt;</code></p> <p>Write loco address on PROG track</p> <p><code>&lt;W CONSIST loco REVERSE&gt;</code></p> <p>Write consist address and reverse flag on PROG track </p> <p><code>&lt;W CONSIST loco&gt;</code></p> <p>write consist address on PROG track       </p> <p><code>&lt;W cv value&gt;</code></p> <p>Write cv value on PROG track</p> <p><code>&lt;W cv bitvalue bit&gt;</code></p> <p>Write cv bit on prog track</p> <p><code>&lt;V cv value&gt;</code></p> <p>Fast read cv with expected value</p> <p><code>&lt;V cv bit bitvalue&gt;</code></p> <p>Fast read bit with expected value</p> <p><code>&lt;B cv bit bitvalue&gt;</code></p> <p>Write cv bit</p> <p><code>&lt;R cv ignore1 ignore2&gt;</code></p> <p>(Deprecated) read cv value on PROG track</p> <p><code>&lt;R cv&gt;</code></p> <p>Read cv</p> <p><code>&lt;R&gt;</code></p> <p>Read driveable loco id (may be long, short or consist)</p> <p><code>&lt;-&gt;</code></p> <p>Clear loco state and reminder table</p> <p><code>&lt;- loco&gt;</code></p> <p>remove loco state amnd reminders</p> <p><code>&lt;F loco DCCFREQ freqvalue&gt;</code></p> <p>Set DC frequencey for loco   </p> <p><code>&lt;F loco function onoff&gt;</code></p> <p>Set loco function ON/OFF</p> <p><code>&lt;M ignore d0 d1 d2 d3 d4 d5&gt;</code></p> <p>Send up to 5 byte DCC packet on MAIN track (all d values in hex)</p> <p><code>&lt;P ignore d0 d1 d2 d3 d4 d5&gt;</code></p> <p>Send up to 5 byte DCC packet on PROG track (all d values in hex)</p> <p><code>&lt;J O&gt;</code></p> <p>List turntable IDs</p> <p><code>&lt;J O id&gt;</code></p> <p>List turntable state</p> <p><code>&lt;J P id&gt;</code></p> <p>list turntable positions</p> <p><code>&lt;=&gt;</code></p> <p>list track manager states</p> <p><code>&lt;= track MAIN&gt;</code></p> <p>Set track to MAIN</p> <p><code>&lt;= track MAIN_INV&gt;</code></p> <p>Set track to MAIN inverted polatity</p> <p><code>&lt;= track MAIN_AUTO&gt;</code></p> <p>Set track to MAIN with auto reversing</p> <p><code>&lt;= track PROG&gt;</code></p> <p>Set track to PROG</p> <p><code>&lt;= track OFF&gt;</code></p> <p>Set track power OFF</p> <p><code>&lt;= track NONE&gt;</code></p> <p>Set track no output</p> <p><code>&lt;= track EXT&gt;</code></p> <p>Set track to use external sync</p> <p><code>&lt;= track AUTO&gt;</code></p> <p>Update track to auto reverse</p> <p><code>&lt;= track INV&gt;</code></p> <p>Update track to inverse polarity</p> <p><code>&lt;= track DC loco&gt;</code></p> <p>Set track to DC</p> <p><code>&lt;= track DC_INV loco&gt;</code></p> <p>Set track to DC with inverted polarity</p> <p><code>&lt;= track DCX loco&gt;</code></p> <p>Set track to DC with inverted polarity</p>"},{"location":"support/","title":"Help and Support","text":"<p>At some point you will likely need to get some help or support for our products, and the available methods are outlined on this page.</p> <p>NOTE For users of hardware products purchased from resellers, in the event of a hardware issue please contact the reseller in the first instance. Each reseller is responsible for supporting the hardware they sell.</p> <p>Please note that the DCC-EX team are all volunteers and are distributed globally, so while we endeavour to help as much and as quickly as we can, all support is provided on a best-effort basis only, and there will be times where no team members are available.</p> <p>This is why we strongly recommend Discord as the best source of support, because there is a global community of over 4,000 users, some of whom may be able to help before a DCC-EX team member is online.</p>"},{"location":"support/#discord-recommended","title":"Discord Recommended","text":"<p>Discord</p>"},{"location":"support/#github-second-best","title":"GitHub second best","text":"<p>GitHub product links here</p>"},{"location":"support/#email-support-not-recommended","title":"Email support not recommended","text":"<p>Limited who can respond, please don't!</p>"},{"location":"support/discord/","title":"Join the DCC-EX Discord Server","text":"<p>The DCC-EX team has a strong preference for providing support via the DCC-EX Discord server.</p> <p>It is free to join, and provides these benefits over our other support methods:</p> <ul> <li>The DCC-EX team actively participate in Discord, so you can talk to the people who create the products</li> <li>There is a global community of over 4,000 DCC-EX users in Discord</li> <li>When people are online at the same time, you can have a live, interactive chat</li> <li>There is the opportunity for DCC-EX users to help other users, which happens frequently</li> </ul> <p>In short, Discord gives you the best access to the broadest set of people who can help with DCC-EX; an entire, global community of users.</p> <p>Please ensure when you first join, you review the Server Guide which will help you get started with our Discord server.</p>"},{"location":"support/discord/#discord-channels","title":"Discord Channels","text":"<p>We have organised the Discord server into various channels which help keep similar topics grouped together.</p> <p>Here are some examples of commonly used channels, and there are plenty more:</p> <ul> <li><code>#support-and-issues__ex-commandstation</code> - Use this channel for general EX-CommandStation conversations and help</li> <li><code>#exrail</code> - Use this channel for general EXRAIL conversations and help</li> <li><code>#tack-manager</code> - Use this channel for general TrackManager conversations and help</li> <li><code>#accessories</code> - Use this channel for topics such as PCA9685 servo controllers and servos, MCP23017 I/O expansion boards, and other accessories</li> <li><code>#sensors</code></li> <li><code>signals</code></li> </ul> <p>Our other products typically have their own channel also:</p> <ul> <li><code>#ex-ioexpander</code> - EX-IOExpander, not to be confused with other I/O expansion modules such as PCA9685 or MCP23017 devices, see <code>#accessories</code></li> <li><code>#ex-dccinspector</code></li> <li><code>#ex-turntable</code></li> <li><code>#ex-fastclock</code></li> </ul>"},{"location":"support/discord/#opening-a-support-ticket","title":"Opening a Support Ticket","text":"<p>If you need help with a specific issue and the conversation in the general support channels haven't resolved the issue, you are welcome to open a support ticket in Discord to get help for your specific issue.</p> <p>From the Server Guide, you can select the <code>Open a Support Ticket</code> option that will take you to the support channel, and clicking the <code>Create Ticket</code> icon will open a support ticket.</p> <p>When doing this, only the DCC-EX support team members and yourself will have access to the ticket, but other users can be invited if necessary.</p> <p>In order to help the DCC-EX team give you the help you need, you will need to provide as much information as possible, as we cannot read minds, see your setup, access your hardware or configuration files, nor look over your shoulder to see what is going on.</p> <p>Please provide this information at the time you open the support ticket:</p> <ul> <li> The product and version</li> <li> The exact hardware in use</li> <li> Upload serial/console logs</li> <li> Upload all configuration files for the software in use</li> <li> Detail any troubleshooting steps you have already performed</li> </ul>"},{"location":"news/category/general-dcc-ex-news/","title":"General DCC-EX News","text":""},{"location":"news/category/dccexprotocol/","title":"DCCEXProtocol","text":""},{"location":"news/category/ex-installer/","title":"EX-Installer","text":""},{"location":"news/category/ex-commandstation/","title":"EX-CommandStation","text":""}]}