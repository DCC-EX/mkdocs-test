{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DCC-EX Documentation","text":"<p>Testing MkDocs for DCC-EX documentation</p>"},{"location":"contributing/1-contribute-docs/","title":"Contributing to Documentation","text":"<p>This page outlines what you need in order to contribute to the documentation, along with the various markdown attributes and so forth you can use.</p> <p>The documentation is hosted using GitHub Pages and is written in Markdown format, using MkDocs to publish the content. We use the MkDocs Material theme to give us the framework for the look and feel of the website, along with a number of other useful plugins and extensions to enhance the content.</p> <p>**Important! Once up and running with the information on this page, please ensure you are familiar with **</p>"},{"location":"contributing/1-contribute-docs/#how-to-contribute","title":"How to Contribute","text":"<p>For contributions from the general public, we recommend forking the GitHub repository and submitting pull requests for the DCC-EX Documenter team to review and merge.</p> <p>If you wish to contribute more fully and become a part of the DCC-EX Documenter team, reach out to us via Discord. To gain access to the GitHub repository, one of the DCC-EX team administrators will need to add you to the \"Web\" team in GitHub.</p>"},{"location":"contributing/1-contribute-docs/#mkdocs-links","title":"MkDocs Links","text":"<p>Here are some handy links with more info on MkDocs, the MkDocs Material theme, and the MkDocs Awesome Nav plugin we use to create the menu structure dynamically:</p> <ul> <li>MkDocs website</li> <li>MkDocs Material theme</li> <li>MkDocs Awesome Nav plugin</li> </ul>"},{"location":"contributing/1-contribute-docs/#what-you-need-to-install","title":"What You Need to Install","text":"<p>This is the list of software you need to successfully contribute to the documentation, including being able to preview it locally:</p> <ul> <li>Visual Studio Code (VSCode)</li> <li>Python - Version 3.13 is recommended, minimum required is 3.10</li> </ul> <p>There are two VSCode plugins that are highly recommended also:</p> <ul> <li>Markdown Preview Mermaid Support by Matt Bierner - enables previewing Mermaid diagrams in VSCode</li> <li>markdownlint by David Anson - helps keep consistent, good formatting in Markdown files (like flake8 for Python)</li> </ul>"},{"location":"contributing/1-contribute-docs/#getting-started","title":"Getting Started","text":"<p>Once you have installed VSCode and Python, you need to clone the GitHub repository, set up a virtual environment, and install the MkDocs requirements.</p> <p>We recommend using the built-in Git functionality of VSCode to clone the repository, or you can use GitHub Desktop or command line Git, whichever you prefer. There is plenty of information generally available on that so we won't cover it here, and instead will focus on the specifics required to ready to contribute to MkDocs content.</p> <p>Follow the appropriate section below to setup MkDocs in Python for your operating system:</p>"},{"location":"contributing/1-contribute-docs/#setup-on-macos","title":"Setup on macOS","text":"<pre><code>cd mkdocs-test\npython 3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/1-contribute-docs/#setup-on-linux","title":"Setup on Linux","text":"<pre><code>cd mkdocs-test\npython3 -m venv venv\n. ./venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/1-contribute-docs/#setup-on-windows","title":"Setup on Windows","text":"<pre><code>cd mkdocs-test\nvirtualenv venv\nvenv\\scripts\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/1-contribute-docs/#previewing-and-building-mkdocs","title":"Previewing and building MkDocs","text":"<p>Previewing locally is very simple:</p> <pre><code>mkdocs serve\n</code></pre> <p>Navigate to the local preview in a browser at http://localhost:8000/mkdocs-test/.</p> <p>Building locally is equally as simple:</p> <pre><code>mkdocs build\n</code></pre> <p>MkDocs also has a feature to deploy to GitHub pages without using a workflow:</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"contributing/2-standards-formatting/","title":"Standards and Formatting Guide","text":"<p>This guide outlines the standards to adhere to for page naming, directory structure, and other related items, along with guides on how to use the various markdown attributes and other MkDocs Material extensions we have enabled to enhance the documentation.</p>"},{"location":"contributing/2-standards-formatting/#mandatory-standards","title":"Mandatory Standards","text":"<p>We try to keep as few mandatory standards as possible, but these items must be adhered to in order for our documentation to be maintainable.</p>"},{"location":"contributing/2-standards-formatting/#general-content","title":"General Content","text":"<p>When creating content, remember to keep the target user in mind at all times, with a strong preference to Conductor level users. A significant (and growing) proportion of our user base do not understand software, nor a lot of electronics or embedded systems. Use terminology they are likely understand.</p> <p>Most importantly, keep pages concise, to the point, and avoid excess words or waffle. Not only does this make the key messages hard to read, but maintaining lengthy pages that are a wall of text becomes onerous, daunting, and reduces the likelihood of keeping our documentation current.</p>"},{"location":"contributing/2-standards-formatting/#page-naming-and-titles","title":"Page Naming and Titles","text":"<ul> <li>All page names must be in lower case and use \"-\" instead of spaces where appropriate.</li> <li>If specific page ordering is required, simply preface with the appropriate page number eg. \"1-standards-formatting.md\".</li> <li>The page title is determined by the top level heading, see Headings.</li> </ul>"},{"location":"contributing/2-standards-formatting/#directory-structure","title":"Directory Structure","text":"<p>Note firstly that we use the MkDocs Awesome Nav plugin to control the menu structure, which uses a \".nav.yml\" file in any directory where the default needs to be overridden.</p> <p>The top level directories under the \"docs\" directory determine the tabs or horizontal menu items on the header bar, with the subsequent directories and files in each of these determining the menu on the left pane.</p> <p>Do not adjust the top level directories without consulting the DCC-EX Documenter team, as these fundamentally adjust the user experience.</p> <p>If a new top level directory is to be added, it needs to be added to the \"/docs/.nav.yml\" file in the appropriate order. Files and directories created within existing top level directories will automatically be added to the menus (see Page Naming and Titles for page ordering).</p>"},{"location":"contributing/2-standards-formatting/#page-and-section-links","title":"Page and Section Links","text":"<p>There are three types of links you can use:</p> <ul> <li>Section links - link to another section heading on the same page</li> <li>Document links - link to another document, or a section heading on another document</li> <li>External links - link to an external website</li> </ul> <p>All internal links to other pages and sections should be relative, not absolute. We have enabled a setting to ensure links are relative to the \"docs\" directory, and enable permalinks for headings to support this.</p> <p>External links must be absolute.</p>"},{"location":"contributing/2-standards-formatting/#section-links","title":"Section Links","text":"<p>Links to sections on the same page should just use the permalink section heading name:</p> <pre><code>[Link to this section](#page-and-section-links)\n</code></pre> <p>Results in: Link to this section</p>"},{"location":"contributing/2-standards-formatting/#document-links","title":"Document Links","text":"<pre><code>[Link to Contributing to Documentation Page](/contributing/1-contribute-docs.md)\n</code></pre> <p>Results in: Link to Contributing to Documentation Page</p> <pre><code>[Link to How to Contribute Section](/contributing/1-contribute-docs.md#how-to-contribute)\n</code></pre> <p>Results in: Link to How to Contribute Section</p>"},{"location":"contributing/2-standards-formatting/#external-links","title":"External Links","text":"<pre><code>[Link to Google Search](https://www.google.com)\n</code></pre> <p>Results in: Link to Google Search</p>"},{"location":"contributing/2-standards-formatting/#search-links","title":"Search Links","text":"<p>Chris to insert search link info here.</p>"},{"location":"contributing/2-standards-formatting/#headings","title":"Headings","text":"<p>Headings are simply defined by one or more leading <code>#</code>, noting you can only have one top level heading on a page, which is the page title.</p> <p>The top level heading defines how the page appears in menus, so for this page this is the top level heading:</p> <pre><code># Standards and Formatting Guide\n</code></pre> <p>Further, this general section on \"Headings\" is a second level heading:</p> <pre><code>## Headings\n</code></pre> <p>Following are how to define the lower level headings with a demo of each.</p>"},{"location":"contributing/2-standards-formatting/#heading-level-3","title":"Heading Level 3","text":"<pre><code>### Heading Level 3\n</code></pre>"},{"location":"contributing/2-standards-formatting/#heading-level-4","title":"Heading Level 4","text":"<pre><code>#### Heading Level 4\n</code></pre>"},{"location":"contributing/2-standards-formatting/#heading-level-5","title":"Heading Level 5","text":"<pre><code>##### Heading Level 5\n</code></pre>"},{"location":"contributing/2-standards-formatting/#code-blocks","title":"Code blocks","text":"<p>When including code blocks, be sure to include an appropriate language for syntax highlighting, and use triple backtick \"`\" characters to surround the code for highlighting.</p> <p>For example:</p> <pre><code>```cpp\nTURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n```\n</code></pre> <p>Will render as:</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>For EXRAIL and general configuration file code blocks (eg. config.h, myAutomation.h), \"cpp\" is as good as any, and for any others use an appropriate language specifier.</p> <p>If appropriate, line numbers can also be displayed by appending <code>linenums=\"X\"</code> to the language, where \"X\" is the starting line number:</p> <pre><code>```cpp linenums=\"20\"\nTURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n```\n</code></pre> <p>Will render as:</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>This is a nonsense C++ code block generated by Gemini to demonstrate the full syntax highlighting:</p> <pre><code>#include &lt;iostream&gt;  // Standard I/O library\n#include &lt;vector&gt;    // For dynamic arrays\n#include &lt;string&gt;    // For string manipulation\n#include &lt;map&gt;       // For key-value pairs\n\n// A simple namespace to organize code\nnamespace MyLibrary {\n\nconst double PI_VALUE = 3.1415926535; // A global constant\n\n/**\n * @brief Represents a generic item with properties.\n * This is a multi-line comment to test comment colors.\n */\nclass GenericItem {\nprivate:\n    std::string itemName;\n    int itemId;\n    double itemPrice;\n    bool isAvailable;\n\npublic:\n    // Constructor with default values\n    GenericItem(const std::string&amp; name = \"Default Item\", int id = 0, double price = 0.0, bool available = true)\n        : itemName(name), itemId(id), itemPrice(price), isAvailable(available) {}\n\n    // Member function to display item details\n    void displayDetails() const {\n        std::cout &lt;&lt; \"Item Name: \" &lt;&lt; itemName &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Item ID: \" &lt;&lt; itemId &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Price: $\" &lt;&lt; itemPrice &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Available: \" &lt;&lt; (isAvailable ? \"Yes\" : \"No\") &lt;&lt; std::endl;\n    }\n\n    // Getter for itemPrice\n    double getPrice() const {\n        return itemPrice;\n    }\n\n    // Setter for itemPrice (with a simple check)\n    void setPrice(double newPrice) {\n        if (newPrice &gt;= 0.0) {\n            this-&gt;itemPrice = newPrice;\n        } else {\n            std::cerr &lt;&lt; \"Warning: Price cannot be negative.\" &lt;&lt; std::endl;\n        }\n    }\n}; // Don't forget the semicolon after class definition!\n\n// Template function to find the maximum of two values\ntemplate &lt;typename T&gt;\nT findMax(T a, T b) {\n    return (a &gt; b) ? a : b; // Ternary operator test\n}\n\n} // end namespace MyLibrary\n\n// Main function - entry point of the program\nint main() {\n    using namespace MyLibrary; // Use MyLibrary namespace\n\n    // Create instances of GenericItem\n    GenericItem item1(\"Laptop\", 101, 1200.50, true);\n    GenericItem* item2 = new GenericItem(\"Mouse\", 202, 25.99, false); // Using 'new'\n\n    // Display details using a loop\n    std::vector&lt;GenericItem&gt; inventory;\n    inventory.push_back(item1);\n    inventory.push_back(*item2);\n\n    std::cout &lt;&lt; \"--- Inventory Details ---\" &lt;&lt; std::endl;\n    for (const auto&amp; item : inventory) { // Range-based for loop\n        item.displayDetails();\n        std::cout &lt;&lt; \"-------------------------\" &lt;&lt; std::endl;\n    }\n\n    // Test the template function\n    int maxInt = findMax(10, 20);\n    double maxDouble = findMax(PI_VALUE, item2-&gt;getPrice()); // Accessing member via pointer\n\n    std::cout &lt;&lt; \"Maximum integer: \" &lt;&lt; maxInt &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Maximum double: \" &lt;&lt; maxDouble &lt;&lt; std::endl;\n\n    // Exception handling test\n    try {\n        if (item1.getPrice() &lt; 1.0) {\n            throw \"Price too low!\"; // Throwing a string literal\n        }\n        item1.setPrice(1500.00); // Change price\n    } catch (const char* msg) { // Catching a C-style string\n        std::cerr &lt;&lt; \"Error: \" &lt;&lt; msg &lt;&lt; std::endl;\n    }\n\n    // Clean up dynamic memory\n    delete item2; // Using 'delete'\n    item2 = nullptr; // Best practice to nullify pointer after delete\n\n    // Return 0 for successful execution (integer literal)\n    return 0;\n}\n</code></pre>"},{"location":"experimenting/flowchart/","title":"mermaid flowchart","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"experimenting/search-jump/","title":"Search jump","text":"<p>Example of dodgy URL which is intercepted by  search_helper.js and takes you to the search:</p> <p>Try Search for EXRAIL</p> <p>OK!</p>"},{"location":"experimenting/sequence/","title":"mermaid sequence diagram","text":"<pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"experimenting/statediagram/","title":"mermaid state diagram","text":"<pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"exrail/","title":"What is EXRAIL?","text":"<p>EXRAIL is an \u201cEXtended Railroad Automation Instruction Language\u201d used to:</p> <ul> <li>Describe your turnouts, signals etc.</li> <li>Configure your Command Station to understand the hardware and accessories you have attached.</li> <li>Handle what to do when things happen (e.g. a button is pressed)</li> <li>Create automated route settings through your layout</li> <li>Move things, make sounds, flash lights</li> <li>Drive trains under automatic control</li> <li>Implement mimic panels and control panels</li> <li>Display status information or platform announcements on OLED screens.</li> </ul>"},{"location":"exrail/#you-dont-need","title":"You DON\u2019T need:","text":"<ul> <li>JMRI, or any additional utilities</li> <li>Engine Driver, wiThrottle, or any other WiThrottle app</li> <li>A separate computer living under your layout</li> <li>Knowledge of C++ or Python/Jython programming</li> </ul> <p>Although EXRAIL has more than 100 individual commands available, it is generally easier to work from the how-to cookbook examples rather than attempt to understand every feature. It's important to understand a few principles first.</p>"},{"location":"exrail/#important-background-information","title":"Important Background Information","text":"<ul> <li>EXRAIL scripts are written into a file called myAutomation.h which you can edit with any suitable text editor. You dont need any extra tools installed on your PC that you dont already have in VSCode or the EX-Installer. </li> <li>When you upload the command station with the DCC-EX code, myAutomation.h is used by the compiler to configure the software and embed any sequences so that the command station can run without further assistance from your PC. If you change myAutomation.h then you must upload again.</li> <li>EXRAIL can run multiple sequences simultaneously so it's great for annoying Arduino programmers who find that extremly complex to do in C++.</li> </ul>"},{"location":"exrail/#basic-building-blocks","title":"Basic building blocks","text":"<p>There are a few basic building blocks that will appear in the examples:</p> <ul> <li><code>SEQUENCE</code> - Simply a list of things to be done in order. These things might be to actually drive a train around, or merely to set some turnouts or flash some scene or panel lights. Actions can be made to wait for conditions to be met, like a sensor detecting a train, a button being pushed, or a period of time elapsing.   e.g.</li> </ul> <pre><code>  SEQUENCE(27) // Close crossing gates\n    BLINK(100,500,500) // start flasher\n    DELAY(4000)\n    SERVO(200,30,Slow) // move barrier\n    DONE   // sequence completed\n</code></pre> <ul> <li><code>ROUTE</code> - A special type of SEQUENCE that is made visible to a throttle with a readable name so the user can press a button to get the sequence executed. This might be best used to set a series of turnouts and signals to create a route through the layout. For example</li> </ul> <pre><code>  ROUTE(1,\"Platform A to mainline\")\n    THROW(27) // set turnouts\n    CLOSE(6)\n    GREEN(101) // change departtire signal\n    DONE \n</code></pre> <ul> <li><code>AUTOMATION</code> - A special type of SEQUENCE that is made visible to a throttle so that a user can hand over a loco and let EXRAIL drive the train away, following each step listed in the sequence. For example, a user could manually drive a train into a station and press a handoff button in the throttle to run an AUTOMATION to take it on a journey around the layout.</li> </ul> <pre><code>  AUTOMATION(17,\"Depart to Byeckaslike\")\n    FWD(20) // start slowly\n    AT(107) // when we reach sensor 107\n    SPEED(55)\n    AT(108) // approaching station\n    SPEED(10) // slow down\n    AT(109) // at the terminus\n    ESTOP // stop dead\n    DONE\n</code></pre> <ul> <li>ON-handler - a sequence that is automatically started when some event happens. For example when a button is pressed (ONBUTTON) or a turnout is changed (ONTHROW / ONCLOSE) so you can intercept turnout/point changes to automatically adjust signals or other turnouts.</li> </ul> <pre><code>ONBUTTON(127)\n  RED(108)\n  THROW(6)\n  GREEN(112)\n  DONE\n</code></pre>"},{"location":"exrail/#a-users-story","title":"A users story","text":"<p>I have used C++ on Arduino\u2019s and Python/Jython on JMRI software to build Automation sequences. I now use EXRAIL instead because:</p> <ul> <li> <p>It\u2019s significantly easier and more flexible than the other two options.</p> </li> <li> <p>I reduce the number of Uno and Nano accessory boards needed to do the same tasks on the layout by using the DCC-EX Command Station and embedded EXRAIL instead.</p> </li> <li> <p>I can create Automations, Routes, &amp; Sequence scripts With EXRAIL on the Command Station and still access them from JMRI PanelPro and DecoderPro GUI buttons with a simple sendDCCmessage.py script pointer that passes them to the EXRAIL scripts on the Command Station, so I don\u2019t have to rewrite the script in Jython/Python.</p> </li> <li> <p>EXRAIL is ten times easier to learn and use and is more flexible then the other methods.</p> </li> </ul>"},{"location":"exrail/Autostart/","title":"Things that happen at startup","text":"<p>When the command station starts:</p> <ul> <li>Definitions of HAL drivers, Turnouts, signals and HAL drivers will take place first regardless of where they are found in the myAutomation.h file. </li> <li> <p>EXRAIL will run through all its sequences to detect any VPIN that has been used for input, perhaps by an AT, AFTER, ONBUTTON, ONSENSOR and so on. These pins are then set to the Arduino INPUT_PULLUP mode. This is necessary so that EXRAIL can actually read the input pins.  Where VPINS are mapped to external expanders (such as an MCP23017), the HAL driver will pass on the relevant commands to the expander.</p> </li> <li> <p>EXRAIL will then automatically start tasks at any point in the myAutomation.h file where and AUTOSTART command is found. There may be several and they will all run simultaneously and in no particular priority.</p> </li> </ul> <p>To create commands that will automatically run at startup: <pre><code>AUTOSTART\n  POWERON\n  THROW(1)\n  CLOSE(2)\n  PRINT(\"Ready to Rumble\")\n  DONE\n</code></pre></p>"},{"location":"exrail/Cookbooks/Emergency-Stop-button/","title":"Emergency stop button","text":"<p>ONBUTTON(123) will start a sequence at this point when a button on vpin 123 is pressed. The ESTOPALL command will stop all locos and inform all throttles. The DONE command completes/terminates the process started by ONBUTTON.</p> <pre><code>ONBUTTON(123) ESTOPALL DONE\n</code></pre>"},{"location":"exrail/Cookbooks/Startup-Power-On/","title":"Startup power","text":"<p>By default the Command station will start with the track power OFF.</p> <p>This can be inconvenient if you are using the free version of the WiThrottle app from the Apple store which does not have a power button.</p> <p>You can configure EXRAIL to power on at startup by using</p> <pre><code>AUTOSTART POWERON DONE\n</code></pre> <p>Alternatively, you can power tracks individually</p> <pre><code>AUTOSTART\n  SET_POWER(A,ON)\n  SET_POWER(D,ON)\n  DONE\n</code></pre>"},{"location":"exrail/Cookbooks/roster-similar-locos/","title":"Roster for Similar Sound Locos","text":"<p>The ROSTER command in EXRAIL can be tedious if you have several sound locos with the same function settings. Using a preprocessor definition saves typing.</p> <pre><code>ROSTER(1201,\"Red class 99\",\"light/*horn/flash/bang/wallop/squeal/honk\") \nROSTER(1202,\"Green class 99\",\"light/*horn/flash/bang/wallop/squeal/honk\") \n</code></pre> <p>Can be simplified by pre-defining the functions:</p> <pre><code>#define CLASS99F \"light/*horn/flash/bang/wallop/squeal/honk\" \nROSTER(1201,\"Red class 99\",CLASS99F) \nROSTER(1202,\"Green class 99\",CLASS99F) \n</code></pre> <p>This technique is particularly useful for rostering DC tracks where the function keys are related to PWM frequency:</p> <pre><code>#define DCFuncs\"/////////////////////////////FQ490 Hz/FQ3400 Hz/FQ62500 Hz\"\nROSTER(1225,\"DC TRACK B 1225\",DCFuncs)\nROSTER(1226,\"DC TRACK C 1226\",DCFuncs)\n</code></pre> <p>It is also possible to utilise the compiler rule that \"Hello\" \"Sailor\" is treated as \"HelloSailor\". This means that common functions can be used with loco specific additions.</p> <pre><code>#define CommonFuncs \"light/*horn\" \nROSTER(1201,\"Noisy class 99\",CommonFuncs \"/flash/bang/wallop/squeal/honk\") \nROSTER(1202,\"Quieter class 99\",CommonFuncs) \n</code></pre>"},{"location":"exrail/Cookbooks/Editing%20Tricks/Keeping%20EXRAIL%20commands%20in%20multiple%20files/","title":"Keeping EXRAIL commands in multiple files","text":"<p>EXRAIL commands are read by the compiler only from the file myAutomation.h, the absence of a file with this name means no EXRAIL code is loaded into the command station.</p> <p>However, it is simple to partition myAutomation.h into separate files for the convenience of editing.  For example myTurnouts.h, myRoster.h and so on. By ensuring all the files start with \"my\" it avoids issues with name clashes or Git.</p> <p>To include your additional files, use the c++ preprocessor #include control  in myAutomation.h to insert the file contents exactly as if you had typed them into myAutomation.h</p> <pre><code>// Include my roster file\n#include \"myRoster.h\"\n// Include my turnout definitions\n#include \"myTurnouts.h\"\n// Special animation\n#include \"myCowOnElectricFence.h\"\n</code></pre>"},{"location":"exrail/Cookbooks/Editing%20Tricks/Maintaining%20multiple%20command%20stations/","title":"Maintaining multiple command stations","text":"<p>Maybe you have more than one command station and you wish to have slightly different EXRAIL  setups, perhaps because you are testing a new release on a sepaerate CPU or need to compile different scripts for different layouts.</p> <p>The C++ compiler pre-processor is available to select various parts of your myAutomation.h based on definitions created in your config.h or those created by defines.he which automates the detection of the CPU type of your command station. </p> <p>For example:</p> <pre><code>#if defined(ARDUINO_ARCH_AVR)\n  // on my Mega, I have signal1 on pins (30,31,32)\n  ALIAS(mysignal1,30)\n#else \n  // on my CSB1 or similar, I use pins 800,801,802 on an expander\n  ALIAS(mysignal1,800)\n#endif\n  SIGNALH(mysignal1,mysignal1+1,mysignal1+2)\n  ONTHROW(1) RED(mysignal1) DONE\n  ONCLOSE(1) GREEN(mysignal1) DONE\n</code></pre> <p>In addition, each EXRAIL command is actually a preprocessor definition so it is possible to use an #ifdef to include a section that uses a new feature but only if the code version has that feature available.</p> <pre><code>#ifdef NEOPIXEL\n   NEOPIXEL(2013,255,255,0)\n#endif   \n</code></pre> <p>Note #ifdef xxx and #if defined(xxx) do the same thing.</p>"},{"location":"exrail/Cookbooks/Editing%20Tricks/Naming%20a%20sequence/","title":"Naming sequences for easy commands","text":"<p>The DCC-EX command</p> <pre><code>&lt;/START id&gt;\n</code></pre> <p>can be used to start a sequence when the sequence id is known.</p> <p>However its is sometimes more convenient to code a sequence so that it can be started by name.</p> <p>This is made possible by using upper case quoted sequence names with the _hk suffix.</p> <pre><code>SEQUENCE(\"BEER\"_hk)  \n  PRINT(\"BEER sequence started\")\n  ... and so on\n</code></pre> <p>The name must be specified in upper case but it can be started by the command in any mixed case.</p> <pre><code> &lt;/start beer&gt;\n</code></pre>"},{"location":"exrail/Cookbooks/Editing%20Tricks/Using%20CALL%20and%20RETURN/","title":"Using CALL and RETURN","text":"<p>Where you want to use the same sequence of commands from several places in other sequences you can avoid copying the repeated stuff by using CALL and RETURN</p> <pre><code>ROUTE(1,\"Platform A to mainline\")\n  CALL(911)\n  THROW(1)\n  CLOSE(2)\n  DONE\n\nROUTE(2,\"Platform B to mainline\")\n  CALL(911)\n  CLOSE(1)\n  CLOSE(2)\n  DONE\n\nSEQUENCE(911)\n  SERVO(123,100,Slow)  // move the cow out of the way\n  PLAYSOUND(500,3) // Make it Moo\n  DELAYRANDOM(5000,10000) // make the route wait 5 to 10 seconds\n  RETURN      // return to the calling sequence\n</code></pre> <p>Notes:    You can nest CALLs 4 deep.   If the called sequence executes a <code>DONE</code> statement, the task is terminated and there is no return.</p>"},{"location":"exrail/Cookbooks/Editing%20Tricks/multi-files/","title":"Multiple Files in EXRAIL","text":"<p>EXRAIL commands are read by the compiler only from the file myAutomation.h, the absence of a file with this name means no EXRAIL code is loaded into the command station. However, it is simple to partition myAutomation.h into separate files for the convenience of editing. For example myTurnouts.h, myRoster.h and so on. By ensuring all the files start with \"my\" it avoids issues with name clashes or Git.</p> <p>To include your additional files, use the c++ preprocessor #include control in myAutomation.h to insert the file contents exactly as if you had typed them into myAutomation.h</p> <pre><code>// Include my roster file\n#include \"myRoster.h\"\n// Include my turnout definitions\n#include \"myTurnouts.h\"\n// Special animation\n#include \"myCowOnElectricFence.h\"\n</code></pre> <p>A note to hardened C++ programmers... do not be tempted to add include guards to your .h files.</p>"},{"location":"exrail/Cookbooks/Turnouts/Animated-Turnouts/","title":"Animated turnouts","text":"<p>Switching turnouts is easy, but sometimes you want to make it more realistic by introducing signals, delays and other automations.</p> <p>The combination of hidden and virtual turnouts makes this easy.</p> <p>Lets suppose you have a turnout id 100 and to make it look realistic you need to set some signal to stop, wait for the signalman to walk accross the lever frame, throw the turnout, wait again and set another signal to green. </p> <p>First we need to hide the real turnout from the throttles. This is done by changing the description to the keyword HIDDEN and gining it a different id so we can refer to it later.</p> <pre><code>  TURNOUTL(100,1,\"Coal yard exit\")  // for example\n</code></pre> <p>is changed to</p> <pre><code>  TURNOUTL(1001,1,HIDDEN) \n</code></pre> <p>Now we can create a virtual turnout that will be seen by the throttles and specify what we want to happen when it is thrown or closed.</p> <pre><code>   VIRTUAL_TURNOUT(100,\"Coal yard exit\")\n\n   ONCLOSE(100)\n     RED(501)  // set approach signal\n     RED(505)  // set approach signal\n     DELAY(4000) // wait for signalman to move\n     CLOSE(1001) // close the real turnout \n     DELAY(5000)\n     GREEN(501) // set approach signal\n     DONE\n\n   ONTHROW(100)\n     RED(501)  // set approach signal\n     RED(505)  // set approach signal\n     DELAY(4000) // wait for signalman to move\n     THROW(1001) // throw the real turnout \n     DELAY(5000)\n     GREEN(505) // set approach signal\n     DONE\n</code></pre>"},{"location":"exrail/Cookbooks/Turnouts/Defining-DCC-Turnouts/","title":"Defining DCC turnouts","text":"<p>DCC Turnouts operate by listening to DCC messages sent along the track by the command station. Each turnout has a DCC address which may be specified as a pair of values (address,subaddress) or a single value linear address. Its generally easier to think in terms of the linear address but it makes no difference whatever to the kind of DCC message sent, other than the conversion from (address,subaddress) to linear is badly thought out and inconsistent between DCC implementations due to historically/histerically ambiguous standards. </p>"},{"location":"exrail/Cookbooks/Turnouts/Defining-DCC-Turnouts/#defining-dcc-based-turnout-objects","title":"Defining DCC based turnout objects","text":"<p>Define DCC based turnouts using EXRAIL.</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>address- the DCC address that the turnout decoder is listening to   or shortAddress,subAddress - the alternative form of the same address.</p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes \u201c\u201d. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>For example: <pre><code>TURNOUTL(123,55,\"Up the junction\")\nTURNOUT(124,12,3,\"Down the mine\")\n</code></pre></p>"},{"location":"exrail/Cookbooks/Turnouts/Defining-Servo-Turnouts/","title":"Defining Servo turnouts","text":"<p>Servo turnouts use servos driven through a PCA9685 or EX_IOExtender. (This does not include servos driven from track connected DCC decoders. See DCC Decoders)</p>"},{"location":"exrail/Cookbooks/Turnouts/Defining-Servo-Turnouts/#important-considerations-for-servo-operation","title":"Important considerations for servo operation","text":"<p>Servo turnouts are driven through a PCA9685 servo control board on an EX-IOExpander. Refer to ????????</p> <p>Test, test, test your servo parameters prior to connecting to an actual turnout/point. If you have defined angles that exceed the physical limits of your turnout, you will likely damage it and/or the servo mechanism.</p> <p>Treat each servo and turnout as an individual as not all servos (or turnouts/points for that matter) are created equal. An angle that works with one servo and associated turnout will not necessarily provide the exact same result with another. Differences in servo brands, mounting methods, and even normal manufacturing tolerances will need to be factored in to the servo angles in use.</p> <p>The EX-Toolbox Android application provides a servo movement testing tool to help you discover the necessary values for the angles below.</p> <p>Use flexible wire to connect your servo arm to the turnout/point. Using a flexible connection between the turnout and the servo mechanism means if anything does go wrong such as the turnout getting jammed or an incorrect servo angle being sent, it reduces the chance of damaging the turnout or servo.</p>"},{"location":"exrail/Cookbooks/Turnouts/Defining-Servo-Turnouts/#defining-servo-based-turnout-objects","title":"Defining servo based turnout objects","text":"<p>Define servo based turnouts using EXRAIL.</p> <pre><code>SERVO_TURNOUT(id, vpin, active_angle, inactive_angle, profile, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>pin = The ID of the pin the servo is connected to, which would typically be the VPin ID of the PCA9685 controller board.</p> <p>active_angle = The angle to which the servo will move when the turnout is thrown (This is a value passed to the servo drtiver, it is not in degrees).</p> <p>inactive_angle = The angle to which the servo will move when the turnout is closed.</p> <p>profile = The speed at which a turnout will move: Instant, Fast, Medium, Slow.</p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes \u201c\u201d. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>An example definition for a servo connected to the second control pins of the first PCA9685 connected to the CommandStation, using the slow profile for prototypical operation:</p> <pre><code>SERVO_TURNOUT(200, 101, 450, 110, Slow, \"Coal yard exit\")\n</code></pre>"},{"location":"exrail/Cookbooks/Turnouts/Defining-pin-turnouts/","title":"Defining PIN turnouts","text":"<p>PIN Turnouts operate by detecting the state of an output pin. </p>"},{"location":"exrail/Cookbooks/Turnouts/Defining-pin-turnouts/#defining-pin-based-turnout-objects","title":"Defining PIN based turnout objects","text":"<p>Define pin based turnouts using EXRAIL.</p> <pre><code>PIN_TURNOUT(id, vpin, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>vpin- the pin to be set HIGH for thrown and LOW for closed  </p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes \u201c\u201d. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>For example: <pre><code>PIN_TURNOUT(6,201,\"Round the bend\")\n</code></pre></p>"},{"location":"exrail/Cookbooks/Turnouts/Facing-Turnouts/","title":"Facing turnouts","text":"<p>When you have turnouts that face each other, its awkward for the throttle user to have to manually switch  both to match each other. By treating the crossover as a single turnout, control is simplified and incorrect combinations are prevented.</p> <p>To do this, we need to hide one of the turnouts from the user, and make sure that throwing/closing the visible turnout automatically throws/closes the other turnout.</p> <p>All turnout definitions in EXRAIL allow for a text description to be shown to the user throttle. The HIDDEN keyword, used instead of a turnout description prevents it being visible to the throttle or JMRI/iTrain etc.</p> <pre><code>TURNOUTL(1,101,\"Cross inner to outer\")\nTURNOUTL(2,102,HIDDEN)\n\nONTHROW(1) THROW(2) DONE\nONCLOSE(1) CLOSE(2) DONE\n</code></pre>"},{"location":"exrail/Cookbooks/Turnouts/Toggle-Turnouts-with-button-press/","title":"Toggle turnouts with button or sensor","text":"<p>A turnout of any type can be toggled by a button or sensor of any type. </p> <pre><code>ONBUTTON(123) TOGGLE_TURNOUT(6) DONE\n</code></pre>"},{"location":"exrail/Cookbooks/neopixels/","title":"NeoPixel support","text":"<p>The IO_NeoPixel.h driver supports the adafruit neopixel seesaw board. It turns each pixel into an individual VPIN which can be given a colour and turned on or off using the the NEOPIXEL Exrail macro. Exrail SIGNALS can also drive a single pixel signal or multiple separate pixels.</p>"},{"location":"exrail/Cookbooks/neopixels/#defining-the-hardware-driver","title":"Defining the hardware driver","text":"<p>Add a driver definition in myAutomation.h for each adafruit I2C driver.</p> <pre><code>    HAL(neoPixel, firstVpin, numberOfPixels [, mode [, i2caddress])\n</code></pre> <p>Where mode is selected from the various pixel string types which have varying colour order or refresh frequency. For MOST strings this mode will be NEO_GRB but for others refer to the comments in IO_NeoPixel.h</p> <p>If omitted the node and i2caddress default to NEO_GRB, 0x60.</p> <p>For example:</p> <pre><code>    HAL(NeoPixel,1000,20)\n</code></pre> <p>This is a NeoPixel driver defaulting to I2C aqddress 0x60 for a GRB pixel string. Pixels are given vpin numbers from 1000 to 1019.</p> <pre><code>    HAL(NeoPixel,1020,20,NEO_GRB,0x61)\n</code></pre> <p>This is a NeoPixel driver on i2c address 0x61.</p>"},{"location":"exrail/Cookbooks/neopixels/neopixels/","title":"Setting neopixels","text":"<p>The NEOPIXEL macro provides the ability to set neopixels on or off change the colour. either individually or over a range of pixels.</p> <p><pre><code>NEOPIXEL([-]vpin, red, green, blue [,count])\n</code></pre> vpin = pin number of the individual pixel in the range defined by the HAL(NeoPixel...) command. red = 0..255 intensity of the red channel green = 0..255 intensity of the green channel blue = 0..255 intensity of the blue channel count = numver of pixels to set, starting at vpin. Default =1.</p> <p>Setting pixels on or off (without colour change) can be done with SET/RESET. </p> <p>Because the pixels obey SET/RESET, the BLINK command can also be used to control blinking a pixel.</p>"},{"location":"exrail/Cookbooks/neopixels/signals/","title":"Neopixel signals","text":"<p>There are two types possible      - a mast with separate fixed colour pixels for each aspect     - a mast with one multiple colour pixel for all aspects.</p> <pre><code>Bear in mind that a single multicolour neopixel used above might be physically a mulicolour LED (as in a searchlight signal), or 3 individual LEDS wired to a single neopixel controller (as in a 2 or 3 lamp signal).\n</code></pre> <p>For separate pixels, the colours should be established at startup and a normal SIGNALH macro used.</p> <pre><code>AUTOSTART \n  SIGNALH(1010,1011,1012)\n  NEOPIXEL(1010,255,0,0)       \n  NEOPIXEL(1011,128,128,0)\n  NEOPIXEL(1012,0,255,0)\n  RED(1010)  // force signal state otherwise all 3 lights will be on\n  DONE\n</code></pre> <p>For signals with 1 neopixel, the NEOPIXEL_SIGNAL macro will create a signal on one vpin with three separate colours</p> <p><pre><code>NEOPIXEL_SIGNAL(vpin,redfx,amberfx,greenfx)\n</code></pre> redfx,amberfx,greenfx = colour values   </p> <p>The fx values above can be created by the NeoRGB macro so a bright red would be <code>NeoRGB(255,0,0)</code>  bright green <code>NeoRGB(0,255,0)`` and amber something like</code>NeoRGB(255,100,0)```. NeoRGB creates a single int32_t value so it can be used in several ways as convenient (but can't ve used in an ALIAS command).</p> <pre><code>// create 1-lamp signal with NeoRGB colours\nNEOPIXEL_SIGNAL(1000,NeoRGB(255,0,0),NeoRGB(255,100,0),NeoRGB(0,255,0))\n\n// Create 1-lamp signal with named colours.\n// This is better if you have multiple signals.\n// (Note: ALIAS is not suitable due to word length defaults) \n#define REDLAMP NeoRGB(255,0,0)\n#define AMBERLAMP NeoRGB(255,100,0)\n#define GREENLAMP NeoRGB(0,255,0)\nNEOPIXEL_SIGNAL(1001,REDLAMP,AMBERLAMP,GREENLAMP)\n\n// Create 1-lamp signal with web type RGB colours \nNEOPIXEL_SIGNAL(1002,0xFF0000,0xFF6400,0x00FF00)\n</code></pre>"},{"location":"news/","title":"DCC-EX News","text":""},{"location":"news/#get-this-in-your-rss-feed","title":"Get this in your RSS feed","text":"<p>Notes on how to get the RSS feed here when figured out.</p>"},{"location":"news/2023/04/final-version-4-release-v415/","title":"Final Version 4 Release (v4.1.5)","text":"<p>We're excited to announce the final version 4 release of |EX-CS| before we move to version 5!</p> <p>This is just a minor bugfix release from the previous version 4.1.2. This release is a Bugfix release to fix the initialisation order to benefit Ethernet boards, to fix GitHub issue #299 related to TurnoutDescription, and to fix command parsing for LCN (the Layout Control Nodes Accessory Network).</p> <p>To get the latest version, see the download  link here section.</p> <p>There is also an updated available for download to help you get up and running with |JMRi| DecoderPro and |DCC-EX|.</p> <p>Look for some major new features soon in version 5.0!</p>"},{"location":"news/2023/12/announcing-the-new-dccexprotocol-arduino-library/","title":"Announcing the new DCCEXProtocol Arduino Library!","text":"<p>The |DCC-EX| team are proud to announce that we've released the very first version of our brand spanking new DCCEXProtocol Arduino Library! This has been written to make life easier for those wishing to write software for throttles or other clients that need to communicate with |EX-CS| using our native command API.</p> <p>Why release an Arduino library in the first place?</p> <p>We figure for those who want to write throttle software and interact with the |EX-CS| are probably more interested in making their software work rather than figuring out how to correctly parse our native API commands and respond appropriately to the various command responses and broadcasts that are generated and need to be dealt with.</p> <p>So, in light of this, a library that takes away the heavy lifting of using/interpreting the API commands seemed like a sensible approach.</p> <p>One great big caveat to this announcement is that the library version is 0.0.1, meaning it has had limited testing and is likely going to have bugs associated with it.</p> <p>For documentation on how to implement and use the library, refer to the DCCEXProtocol documentation.</p>"},{"location":"news/2024/03/another-new-ex-installer-release/","title":"Another new EX-Installer release","text":"<p>The |DCC-EX| team is pleased to announce another new release of |EX-I| (version 0.0.18). As always, we encourage all users to download this new version of the installer to take advantage of the bug fixes and new features available.</p> <p>The key updates in this release are support for the new options available in |EX-TT| version 0.7.0, and the ability to save the device logs from the Device Monitor screen directly within |EX-I|. This way, when interacting with the |DCC-EX| team in Discord or via either means, when asked to provide the startup logs or serial monitor logs, you can simply open Device Monitor and click the <code>Save log</code> button to obtain these.</p> <p>This release also includes the below changes:</p> <ul> <li>Update a Python module version to resolve security vulnerabilities</li> <li>Add a link to |DCC-EX| News articles about |EX-I| to the Info menu</li> <li>Ensure the \"Backup config files\" popup is always launched within the app window geometry</li> <li>Fix a bug where copying existing config files for |EX-TT| and |EX-IO| causes an exception</li> </ul>"},{"location":"news/2025/03/announcing-dccexprotocol-library-120/","title":"Announcing DCCEXProtocol Library 1.2.0","text":"<p>We've released the latest version of the |DCC-EXP| library version 1.2.0 today.</p> <p>This release adds the ability to read/write CVs on both the main and programming tracks:</p> <ul> <li> <p>handOffLoco(locoAddress, automationId)</p> </li> <li> <p>Use this to send a loco to an EXRAIL automation.</p> </li> <li> <p>You must enable retrieving routes, and the automationId must match a valid EXRAIL automation ID to work.</p> </li> <li> <p>readCV(cv) and validateCV(cv, value)</p> </li> <li> <p>Read or validate a CV for a loco on the programming track.</p> </li> <li> <p>The associated delegate method to implement is receivedValidateCV(int cv, int value) as both return the same response.</p> </li> <li> <p>writeLocoAddress(address)</p> </li> <li> <p>Write the provided address to a loco on the programming track.</p> </li> <li> <p>The associated delegate method to implement is receivedWriteLoco(int address).</p> </li> <li> <p>validateCVBit(cv, bit, value)</p> </li> <li> <p>Validate the specified bit of a CV for a loco on the programming track.</p> </li> <li> <p>The associated delegate method to implement is receivedValidateCVBit(int cv, int bit, int value).</p> </li> <li> <p>writeCV(cv, value)</p> </li> <li> <p>Write a CV to a loco on the programming track.</p> </li> <li> <p>The associated delegate method to implement is receivedWriteCV(int cv, int value).</p> </li> <li> <p>writeCVBit(cv, bit, value)</p> </li> <li> <p>Write the specified value to the specified bit of a CV to a loco on the programming track.</p> </li> <li> <p>There is no delegate method to implement for the response for this due to parser limitations, and we recommend writing full CVs.</p> </li> <li> <p>writeCVOnMain(address, cv, value)</p> </li> <li> <p>Write to the specified CV to the specified loco on the main track.</p> </li> <li> <p>writeCVBitOnMain(address, cv, bit, value)</p> </li> <li> <p>Write to the specified bit and CV to the specified loco on the main track.</p> </li> </ul>"},{"location":"products/ex-csb1/","title":"EX-CSB1 CommandStation Booster","text":"<p>This is the EX-CSB1 Getting Started Guide.</p>"},{"location":"products/ex-csb1/#features","title":"Features","text":"<p>The DCC-EX EX-CSB1 Command Station/Booster comes ready to use out of the box and has the following features:</p> <ul> <li>Dual DCC/PWM DC outputs with up to 5A capacity \u2013 easily expandable to 4 outputs</li> <li>WiFi built-in \u2013 fast 802.11n capable, with Access Point and Station modes including support for connecting as many as 10 WiFi throttles (you can also connect to JMRI via WiFi, but a USB cable is often better)</li> <li>Single power supply for track and onboard electronics \u2013 12-25V DC with polarity protection</li> <li>USB-C connector \u2013 for software upload, diagnostic monitoring, DCC-EX WebThrottle and JMRI connectivity</li> <li>Railsync DCC input \u2013 enables Booster or Sniffer modes, which with an EXRAIL script can be automatically engaged on receipt of a signal</li> <li>OLED screen \u2013 for diagnostics, status and information display</li> </ul> <p></p>"},{"location":"products/ex-csb1/#connecting","title":"Connecting","text":"<p>The DCC-EX EX-CSB1 Command Station/Booster needs the minimum following connections to be able to run trains:</p> <ul> <li>Power input on the 2.1mm black barrel connector \u2013  accepts 10-25V DC fully regulated, preferably a modern switch-mode power brick, double-insulated with good power overload protection. Minimum current capability of 4A, suggested 12-16V for Z, N or HO/OO scales, with DCC+Sound locos generally wanting 14-16V even in N scale.</li> <li>One track connection - on either the Track Out A (topmost) or Track Out B (beside the power) connector. Note that by default, A is configured for DCC MAIN operation, and B is configured for PROG or programming track. We recommend connecting your track to the A MAIN output initially to test running of trains.</li> </ul> <p>When correctly supplied with track power, both green Power LEDs will light. If the right-most LED alone is lit, it indicates power is being supplied from the USB-C connector so software upload can proceed, but trains cannot be run.</p> <p>The WiFi LED will light once a WiFi network is created (Access Point mode), or once connected to an existing WiFi network (Station mode.)</p> <p>Other Connectors:</p> <ul> <li>Qwiic I2C connector - allows a broad range of 3.3V I2C peripherals to be easily with simple cables.</li> <li>Railsync connector - allows connection to Railsync or a DCC track signal for Booster and Sniffer modes when enabled with suitable software configuration.</li> </ul>"},{"location":"reference/serial_command_basics/","title":"Serial Command Basics","text":"<ul> <li>Serial commands are accepted as input from the USB serial connection or a TCP/IP connection.</li> <li>Commands have a single case dependent character opcode and optionaly parameters.</li> <li>Keyword parameters are shown in upper case but may be entered in mixed case.</li> <li>Value parameters are decimal numeric (unless otherwise noted)</li> <li>Not all commands have a response, and broadcasts mean that not all responses come from the last commands that you have issued.</li> <li>Commands entered like <code>&lt;JA&gt;</code> are actually read as <code>&lt;J A&gt;</code>, so <code>&lt;Ja&gt;</code> is also acceptible. </li> <li>Commands that produce diagnostic information (which is intended for human reading rather than code) only write to the USB Serial output.</li> <li>Commands that cause state changes (such as loco speeds, turnout position) cause broadcasts to all serial connections and, where appropriate, WiThrottle protocol connections. </li> </ul>"},{"location":"reference/serial_commands/","title":"Serial commands","text":"<p><code>&lt;#&gt;</code></p> <p>Request number of simultaneously supported locos</p> <p><code>&lt;!&gt;</code></p> <p>Emergency stop all locos</p> <p><code>&lt;t loco&gt;</code></p> <p>Request loco status</p> <p><code>&lt;t loco tspeed direction&gt;</code></p> <p>Set throttle speed(0..127) and direction (0=reverse, 1=fwd) </p> <p><code>&lt;t ignore loco tspeed direction&gt;</code></p> <p>(Deprecated) Set throttle speed and direction</p> <p><code>&lt;f loco byte1&gt;</code></p> <p>(Deprecated use F) Set loco function group </p> <p><code>&lt;f loco group byte2&gt;</code></p> <p>(Deprecated use F) Set loco function group </p> <p><code>&lt;T&gt;</code></p> <p>List all turnouts</p> <p><code>&lt;T id&gt;</code></p> <p>Delete turnout</p> <p><code>&lt;T id X&gt;</code></p> <p>List turnout details</p> <p><code>&lt;T id T&gt;</code></p> <p>Throw Turnout</p> <p><code>&lt;T id C&gt;</code></p> <p>Close turnout#</p> <p><code>&lt;T id value&gt;</code></p> <p>Close (value=0) ot Throw turnout</p> <p><code>&lt;T id SERVO vpin closedValue thrownValue&gt;</code></p> <p>Create Servo turnout  </p> <p><code>&lt;T id VPIN vpin&gt;</code></p> <p>Create pin turnout</p> <p><code>&lt;T id DCC addr subadd&gt;</code></p> <p>Create DCC turnout </p> <p><code>&lt;T id DCC linearAddr&gt;</code></p> <p>Create DCC turnout</p> <p><code>&lt;T id addr subadd&gt;</code></p> <p>Create DCC turnout</p> <p><code>&lt;T id vpin closedValue thrownValue&gt;</code></p> <p>Create SERVO turnout</p> <p><code>&lt;S id vpin pullup&gt;</code></p> <p>Create Sensor</p> <p><code>&lt;S id&gt;</code></p> <p>Delete sensor</p> <p><code>&lt;S&gt;</code></p> <p>List sensors</p> <p><code>&lt;J M&gt;</code></p> <p>List stash values</p> <p><code>&lt;J M stash_id&gt;</code></p> <p>get stash value</p> <p><code>&lt;J M CLEAR ALL&gt;</code></p> <p>Clear all stash values</p> <p><code>&lt;J M CLEAR stash_id&gt;</code></p> <p>Clear given stash</p> <p><code>&lt;J M stashId locoId&gt;</code></p> <p>Set stash value</p> <p><code>&lt;J M CLEAR ANY locoId&gt;</code></p> <p>Clear all stash entries that contain locoId</p> <p><code>&lt;J C&gt;</code></p> <p>get fastclock time</p> <p><code>&lt;J C mmmm nn&gt;</code></p> <p>Set fastclock time</p> <p><code>&lt;J G&gt;</code></p> <p>FReport gauge limits </p> <p><code>&lt;J I&gt;</code></p> <p>Report currents </p> <p><code>&lt;J A&gt;</code></p> <p>List Routes</p> <p><code>&lt;J R&gt;</code></p> <p>List Roster</p> <p><code>&lt;J R id&gt;</code></p> <p>Get roster for loco</p> <p><code>&lt;J T&gt;</code></p> <p>Get turnout list </p> <p><code>&lt;J T id&gt;</code></p> <p>Get turnout state and description</p> <p><code>&lt;z vpin&gt;</code></p> <p>Set pin. HIGH iv vpin positive, LOW if vpin negative  </p> <p><code>&lt;z vpin analog profile duration&gt;</code></p> <p>Change analog value over duration (Fade or servo move)</p> <p><code>&lt;z vpin analog profile&gt;</code></p> <p>Write analog device using profile number (Fade or servo movement)</p> <p><code>&lt;z vpin analog&gt;</code></p> <p>Write analog device value</p> <p><code>&lt;I&gt;</code></p> <p>List all turntables</p> <p><code>&lt;I id&gt;</code></p> <p>Broadcast turntable type and current position    </p> <p><code>&lt;I id position&gt;</code></p> <p>Rotate a DCC turntable</p> <p><code>&lt;I id DCC home&gt;</code></p> <p>Create DCC turntable</p> <p><code>&lt;I id position activity&gt;</code></p> <p>Rotate an EXTT turntable</p> <p><code>&lt;I id EXTT vpin home&gt;</code></p> <p>Create an EXTT turntable</p> <p><code>&lt;I id ADD position value angle&gt;</code></p> <p>Add turntable position</p> <p><code>&lt;Q&gt;</code></p> <p>List all sensors </p> <p><code>&lt;s&gt;</code></p> <p>Command station status</p> <p><code>&lt;E&gt;</code></p> <p>STORE EPROM</p> <p><code>&lt;e&gt;</code></p> <p>CLEAR EPROM</p> <p><code>&lt;Z&gt;</code></p> <p>List Output definitions </p> <p><code>&lt;Z id pin iflag&gt;</code></p> <p>Create Output</p> <p><code>&lt;Z id active&gt;</code></p> <p>Set output </p> <p><code>&lt;Z id&gt;</code></p> <p>Delete output</p> <p><code>&lt;D ACK ON&gt;</code></p> <p>Enable PROG track diagnostics</p> <p><code>&lt;D ACK OFF&gt;</code></p> <p>Disable PROG track diagnostics</p> <p><code>&lt;D CABS&gt;</code></p> <p>Diagnostic display loco state table</p> <p><code>&lt;D RAM&gt;</code></p> <p>Diagnostic display free RAM</p> <p><code>&lt;D CMD ON&gt;</code></p> <p>Enable command input diagnostics</p> <p><code>&lt;D CMD OFF&gt;</code></p> <p>Disable command input diagnostics</p> <p><code>&lt;D RAILCOM ON&gt;</code></p> <p>Enable Railcom diagnostics</p> <p><code>&lt;D RAILCOM OFF&gt;</code></p> <p>DIsable Railcom diagnostics</p> <p><code>&lt;D WIFI ON&gt;</code></p> <p>Enable Wifi diagnostics</p> <p><code>&lt;D WIFI OFF&gt;</code></p> <p>Disable Wifi diagnostics</p> <p><code>&lt;D ETHERNET ON&gt;</code></p> <p>Enable Ethernet diagnostics</p> <p><code>&lt;D ETHERNET OFF&gt;</code></p> <p>Disabel Ethernet diagnostics </p> <p><code>&lt;D WIT ON&gt;</code></p> <p>Enable Withrottle diagnostics</p> <p><code>&lt;D WIT OFF&gt;</code></p> <p>Disable Withrottle diagnostics </p> <p><code>&lt;D LCN ON&gt;</code></p> <p>Enable LCN Diagnostics</p> <p><code>&lt;D LCN OFF&gt;</code></p> <p>Disabel LCN diagnostics</p> <p><code>&lt;D WEBSOCKET ON&gt;</code></p> <p>Enable Websocket diagnostics </p> <p><code>&lt;D WEBSOCKET OFF&gt;</code></p> <p>Disable wensocket diagnostics </p> <p><code>&lt;D EEPROM numentries&gt;</code></p> <p>Dump EEPROM contents</p> <p><code>&lt;D ANOUT vpin position&gt;</code></p> <p>see  <p><code>&lt;D ANOUT vpin position profile&gt;</code></p> <p>see  <p><code>&lt;D SERVO vpin position&gt;</code></p> <p>Test servo</p> <p><code>&lt;D SERVO vpin position profile&gt;</code></p> <p>Test servo</p> <p><code>&lt;D ANIN vpin&gt;</code></p> <p>Display analogue input value</p> <p><code>&lt;D HAL SHOW&gt;</code></p> <p>Show HAL devices table</p> <p><code>&lt;D HAL RESET&gt;</code></p> <p>Reset all HAL devices</p> <p><code>&lt;D TT vpin steps&gt;</code></p> <p>Test turntable</p> <p><code>&lt;D TT vpin steps activity&gt;</code></p> <p>Test turntable</p> <p><code>&lt;C PROGBOOST&gt;</code></p> <p>Configute PROG track boost</p> <p><code>&lt;C RESET&gt;</code></p> <p>Reset and restart command station</p> <p><code>&lt;C SPEED28&gt;</code></p> <p>Set all DCC speed commands as 28 step to old decoders</p> <p><code>&lt;C SPEED128&gt;</code></p> <p>Set all DCC speed commands to 128 step (default)</p> <p><code>&lt;C RAILCOM ON&gt;</code></p> <p>Enable Railcom cutout </p> <p><code>&lt;C RAILCOM OFF&gt;</code></p> <p>Disable Railcom cutout</p> <p><code>&lt;C RAILCOM DEBUG&gt;</code></p> <p>Enable Railcom cutout for easy scope reading test</p> <p><code>&lt;D ACK LIMIT value&gt;</code></p> <p>Set ACK detection limit mA</p> <p><code>&lt;D ACK MIN value MS&gt;</code></p> <p>Set ACK minimum duration mS</p> <p><code>&lt;D ACK MIN value&gt;</code></p> <p>Set ACK minimum duration uS</p> <p><code>&lt;D ACK MAX value MS&gt;</code></p> <p>Set ACK maximum duration mS</p> <p><code>&lt;D ACK MAX value&gt;</code></p> <p>Set ACK maximum duration uS</p> <p><code>&lt;D ACK RETRY value&gt;</code></p> <p>Set ACK retry count</p> <p><code>&lt;C WIFI \"ssid\" \"password\"&gt;</code></p> <p>reconfigure stored wifi credentials </p> <p><code>&lt;o vpin&gt;</code></p> <p>Set neopixel on(vpin&gt;0) or off(vpin&lt;0)</p> <p><code>&lt;o vpin count&gt;</code></p> <p>Set multiple neopixels on(vpin&gt;0) or off(vpin&lt;0)</p> <p><code>&lt;o vpin r g b&gt;</code></p> <p>Set neopixel colour</p> <p><code>&lt;o vpin r g b count&gt;</code></p> <p>Set multiple neopixels colour </p> <p><code>&lt;1&gt;</code></p> <p>Power ON all tracks</p> <p><code>&lt;1 MAIN&gt;</code></p> <p>Power on MAIN track</p> <p><code>&lt;1 PROG&gt;</code></p> <p>Power on PROG track</p> <p><code>&lt;1 JOIN&gt;</code></p> <p>JOIN prog track to MAIN and power</p> <p><code>&lt;1 track&gt;</code></p> <p>Power on given track</p> <p><code>&lt;0&gt;</code></p> <p>Power off all tracks</p> <p><code>&lt;0 MAIN&gt;</code></p> <p>Power off MAIN track</p> <p><code>&lt;0 PROG&gt;</code></p> <p>Power off PROG track</p> <p><code>&lt;0 track&gt;</code></p> <p>Power off given track</p> <p><code>&lt;c&gt;</code></p> <p>Report main track currect (Deprecated)</p> <p><code>&lt;a address subaddress activate&gt;</code></p> <p>Send DCC accessory command</p> <p><code>&lt;a address subaddress activate onoff&gt;</code></p> <p>Send DCC accessory command with onoff control (TODO.. numbers) </p> <p><code>&lt;a linearaddress activate&gt;</code></p> <p>send dcc accessory command      </p> <p><code>&lt;A address value&gt;</code></p> <p>Send DCC extended accessory (Aspect) command</p> <p><code>&lt;w loco cv value&gt;</code></p> <p>POM write cv on main track</p> <p><code>&lt;r loco cv&gt;</code></p> <p>POM read cv on main track</p> <p><code>&lt;b loco cv bit bitvalue&gt;</code></p> <p>POM write cv bit on main track</p> <p><code>&lt;m LINEAR&gt;</code></p> <p>Set Momentum algorithm to linear acceleration</p> <p><code>&lt;m POWER&gt;</code></p> <p>Set momentum algortithm to very based on difference between current speed and throttle seting</p> <p><code>&lt;m loco momentum&gt;</code></p> <p>set momentum for loco (accel and braking)</p> <p><code>&lt;m loco accelerating braking&gt;</code></p> <p>set momentum for loco</p> <p><code>&lt;W cv value ignore1 ignore2&gt;</code></p> <p>(Deprecated) Write cv value on PROG track</p> <p><code>&lt;W loco&gt;</code></p> <p>Write loco address on PROG track</p> <p><code>&lt;W CONSIST loco REVERSE&gt;</code></p> <p>Write consist address and reverse flag on PROG track </p> <p><code>&lt;W CONSIST loco&gt;</code></p> <p>write consist address on PROG track       </p> <p><code>&lt;W cv value&gt;</code></p> <p>Write cv value on PROG track</p> <p><code>&lt;W cv bitvalue bit&gt;</code></p> <p>Write cv bit on prog track</p> <p><code>&lt;V cv value&gt;</code></p> <p>Fast read cv with expected value</p> <p><code>&lt;V cv bit bitvalue&gt;</code></p> <p>Fast read bit with expected value</p> <p><code>&lt;B cv bit bitvalue&gt;</code></p> <p>Write cv bit</p> <p><code>&lt;R cv ignore1 ignore2&gt;</code></p> <p>(Deprecated) read cv value on PROG track</p> <p><code>&lt;R cv&gt;</code></p> <p>Read cv</p> <p><code>&lt;R&gt;</code></p> <p>Read driveable loco id (may be long, short or consist)</p> <p><code>&lt;-&gt;</code></p> <p>Clear loco state and reminder table</p> <p><code>&lt;- loco&gt;</code></p> <p>remove loco state amnd reminders</p> <p><code>&lt;F loco DCCFREQ freqvalue&gt;</code></p> <p>Set DC frequencey for loco   </p> <p><code>&lt;F loco function onoff&gt;</code></p> <p>Set loco function ON/OFF</p> <p><code>&lt;M ignore d0 d1 d2 d3 d4 d5&gt;</code></p> <p>Send up to 5 byte DCC packet on MAIN track (all d values in hex)</p> <p><code>&lt;P ignore d0 d1 d2 d3 d4 d5&gt;</code></p> <p>Send up to 5 byte DCC packet on PROG track (all d values in hex)</p> <p><code>&lt;J O&gt;</code></p> <p>List turntable IDs</p> <p><code>&lt;J O id&gt;</code></p> <p>List turntable state</p> <p><code>&lt;J P id&gt;</code></p> <p>list turntable positions</p> <p><code>&lt;=&gt;</code></p> <p>list track manager states</p> <p><code>&lt;= track MAIN&gt;</code></p> <p>Set track to MAIN</p> <p><code>&lt;= track MAIN_INV&gt;</code></p> <p>Set track to MAIN inverted polatity</p> <p><code>&lt;= track MAIN_AUTO&gt;</code></p> <p>Set track to MAIN with auto reversing</p> <p><code>&lt;= track PROG&gt;</code></p> <p>Set track to PROG</p> <p><code>&lt;= track OFF&gt;</code></p> <p>Set track power OFF</p> <p><code>&lt;= track NONE&gt;</code></p> <p>Set track no output</p> <p><code>&lt;= track EXT&gt;</code></p> <p>Set track to use external sync</p> <p><code>&lt;= track AUTO&gt;</code></p> <p>Update track to auto reverse</p> <p><code>&lt;= track INV&gt;</code></p> <p>Update track to inverse polarity</p> <p><code>&lt;= track DC loco&gt;</code></p> <p>Set track to DC</p> <p><code>&lt;= track DC_INV loco&gt;</code></p> <p>Set track to DC with inverted polarity</p> <p><code>&lt;= track DCX loco&gt;</code></p> <p>Set track to DC with inverted polarity</p>"},{"location":"news/category/dccexprotocol/","title":"DCCEXProtocol","text":""},{"location":"news/category/ex-installer/","title":"EX-Installer","text":""},{"location":"news/category/ex-commandstation/","title":"EX-CommandStation","text":""}]}