{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":""},{"location":"#welcome-to-dcc-ex","title":"Welcome to DCC-EX","text":"<p>Our Command Station is highly regarded as one of the best you can get and has many unique features that are specifically designed to bring control and fun to your hobby.</p> <ul> <li>Wi-fi access, with DCC-EX unique features, Engine Driver on Android, ThrottleCard on iOS and a wide variety of other Apps. We can even show you how to build your own throttle.</li> <li>The ability to run DCC and DC trains from the same throttle at the same time.</li> <li>The powerful but easy EXRAIL scripting language to configure and control accessories such as turnouts, signals, lights, and sounds. It can also run trains automatically and animate your layout!</li> <li>Integration with JMRI, iTrain, and RocRail if you prefer to run trains from your computer.</li> </ul> <p> The EX-CommandStation Booster 1 Express, otherwise known as a CSB1, can be purchased ready to run, complete with WiFi and power supply. If you have a phone, you could be running your trains in less than 5 minutes, without a computer. If you would like to buy one, check out our sellers If you want to get started with a CSB1 read the product page</p> <p> Or you can enjoy building your own, staggeringly cheap, version from readily-available Arduino parts in use by modellers from all over the world. We have even designed parts to make this easy for beginners, no soldering required.  Of course, we also have a wealth of information for more adventurous builders if you have the appropriate electronics skills.</p> <p>Both systems use the same powerful EX-CommandStation software which is totally free and easy to configure and install using our installation tool.</p> <p>We also have a a continually evolving range of additional products to enhance your entire layout including an integrated fast clock, integrated turntable controller, and I/O expansion.</p>"},{"location":"#who-is-dcc-ex","title":"Who is DCC-EX","text":"<p>DCC-EX is world-wide team of dedicated enthusiasts producing free and open source DCC and DC software and hardware solutions to run your model trains and layout. Our mission is to use our many decades of software and hardware experience to make model trains accessible and affordable to everyone.</p> <p>You can learn more on our About Us page.</p> <p>This website contains a vast amount of information, ranging from how to run your first train to how to automate a large exhibition layout.</p> <p>The navigation buttons above should help you find what you want and the search facility is extremely powerful.</p> <p>This site does not use Third Party Cookies.</p> <p>There is a light/dark mode button beside the search bar.</p>"},{"location":"about/00-about/","title":"About the DCC-EX Project","text":"<p>Who is behind all this? And will they ever face justice? Who knows, but the following is a list of those names associated with taking over Gregg Berman\u2019s original DCC++ BaseStation Project, and rewriting/expanding it into EX\u2011CommandStation and the wider DCC-EX project.</p> <p>First, a special thanks to Gregg E. Berman, who had the original idea for a model railroad Command Station using an Arduino Uno and a Motor Driver.</p> <p>If you wish to get in touch with the team, try our Discord server as the first preference, and you can also find some of the team on the DCC++ Forum on TrainBoard.</p>"},{"location":"about/00-about/#a-brief-history-of-dcc-ex","title":"A Brief History of DCC-EX","text":"<p>TODO</p>"},{"location":"about/00-about/#the-dcc-ex-team","title":"The DCC-EX Team","text":"<p>The DCC-EX team is a worldwide group of enthusiasts who volunteer their time to produce the DCC-EX project, making model trains accessible and affordable for everyone.</p> <p>Names below in parentheses are screen names on TrainBoard and Discord.</p>"},{"location":"about/00-about/#project-lead","title":"Project Lead","text":"<ul> <li>Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)</li> </ul>"},{"location":"about/00-about/#ex-commandstation","title":"EX-CommandStation","text":"<ul> <li> <p>Lead Developer</p> <ul> <li>Chris Harlow - Nottingham, UK (UKBloke)</li> </ul> </li> <li> <p>Developers</p> <ul> <li>Harald Barth - Stockholm, Sweden (Haba)</li> <li>Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)</li> <li>Herb Morton - Kingwood, Texas, USA (Ash++)</li> <li>Paul Antoine - Western Australia (Paul Antoine)</li> </ul> </li> </ul>"},{"location":"about/00-about/#ex-installer","title":"EX-Installer","text":"<ul> <li> <p>Developers</p> <ul> <li>Peter Cole - Brisbane, QLD, Australia (peteGSX)</li> <li>Paul Antoine - Western Australia (Paul Antoine)</li> </ul> </li> </ul>"},{"location":"about/00-about/#ex-webthrottle","title":"EX-WebThrottle","text":"<ul> <li> <p>Developers</p> <ul> <li>Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)</li> </ul> </li> </ul>"},{"location":"about/00-about/#ex-dccinspector","title":"EX-DCCInspector","text":"<ul> <li> <p>Developers</p> <ul> <li>Fred Decker - Holly Springs, NC, USA (FlightRisk)</li> </ul> </li> </ul>"},{"location":"about/00-about/#ex-toolbox","title":"EX-Toolbox","text":"<ul> <li> <p>Developers</p> <ul> <li>Looking for volunteers!</li> </ul> </li> </ul>"},{"location":"about/00-about/#ex-ioexpander","title":"EX-IOExpander","text":"<ul> <li> <p>Developers</p> <ul> <li>Peter Cole - Brisbane, QLD, Australia (peteGSX)</li> </ul> </li> </ul>"},{"location":"about/00-about/#ex-turntable","title":"EX-Turntable","text":"<ul> <li> <p>Developers</p> <ul> <li>Peter Cole - Brisbane, QLD, Australia (peteGSX)</li> </ul> </li> </ul>"},{"location":"about/00-about/#ex-fastclock","title":"EX-FastClock","text":"<ul> <li> <p>Developers</p> <ul> <li>Colin Murdoch - Pontypool, Wales (ColinM)</li> </ul> </li> </ul>"},{"location":"about/00-about/#ex-sensorcam","title":"EX-SensorCam","text":"<ul> <li> <p>Developers</p> <ul> <li>Barry Daniel- Gold Coast, Australia (BarryD)</li> </ul> </li> </ul>"},{"location":"about/00-about/#dccexprotocol","title":"DCCEXProtocol","text":"<ul> <li> <p>Developers</p> <ul> <li>Peter Cole - Brisbane, QLD, Australia (peteGSX)</li> <li>Chris Harlow - Nottingham, UK (UKBloke)</li> </ul> </li> </ul>"},{"location":"about/00-about/#dcc-classic","title":"DCC++ Classic","text":"<ul> <li> <p>Developers (no longer in active development)</p> <ul> <li>Mike Dunston - Sonora, California, USA (Atani)</li> <li>Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)</li> </ul> </li> </ul>"},{"location":"about/00-about/#website-and-documentation","title":"Website and Documentation","text":"<ul> <li> <p>Developers</p> <ul> <li>Peter Cole - Brisbane, QLD, Australia (peteGSX)</li> <li>Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)</li> </ul> </li> <li> <p>Contributors</p> <ul> <li>The whole team plus friends!</li> </ul> </li> </ul>"},{"location":"about/00-about/#hardware-electronics","title":"Hardware / Electronics","text":"<ul> <li> <p>Lead Developer</p> <ul> <li>Paul Antoine - Western Australia (Paul Antoine)</li> </ul> </li> <li> <p>Developers</p> <ul> <li>Harald Barth - Stockholm, Sweden (Haba)</li> <li>Erwin Peterlin - Graz, Austria (caperp)</li> <li>Fred Decker - Holly Springs, NC, USA (FlightRisk)</li> <li>Herb Morton - Kingwood Texas, USA (Ash++)</li> <li>Keith Trayler</li> </ul> </li> </ul>"},{"location":"about/00-about/#testing-research-support","title":"Testing / Research / Support","text":"<ul> <li>Kevin Smith - Rochester Hills, Michigan, USA (KC Smith)</li> <li>Sumner Patterson - Blanding Utah, USA (Sumner)</li> <li>Herb Morton - Kingwood Texas, USA (Ash++)</li> <li>Travis Farmer - Farmington Maine, USA (travis_farmer)</li> <li>Henk Kruisbrink - UK (Henkk)</li> </ul>"},{"location":"about/00-about/#related-software-friends-of-dcc-ex","title":"Related Software - Friends of DCC-EX","text":"<p>Making sure this software works well with |EX-CS|</p> <ul> <li> <p>JMRI</p> <ul> <li>M Steve Todd - USA (MSteveTodd)</li> </ul> </li> <li> <p>Engine Driver (ED)</p> <ul> <li>M Steve Todd - USA (MSteveTodd)</li> <li>Peter Akers - South East QLD, Australia (flash62au)</li> </ul> </li> </ul>"},{"location":"contributing/00-contributing/","title":"How Can I Contribute?","text":"<p>The DCC-EX Team has several projects and sub teams where you can help donate your expertise. See the sections below for the project or projects you are interested in.</p>"},{"location":"contributing/00-contributing/#documentation","title":"Documentation","text":"<p>This documentation is written in MkDocs so a knowledge of HTML, CSS or Javascript is not necessary.</p>"},{"location":"contributing/00-contributing/#development","title":"Development","text":"<p>We use C++, Python, HTML/CSS/Javascript, Android, and even make up our own languages. If you like dealing with code, there's something for all. See here for how to contribute code.</p>"},{"location":"contributing/00-contributing/#web-support","title":"Web Support","text":"<p>We do our support mostly via Discord, although some users prefer Facebook.</p>"},{"location":"contributing/00-contributing/#organisationcoordination","title":"Organisation/Coordination","text":"<p>If you are good at herding cats in several countries and time zones then we could always do with some help.</p>"},{"location":"contributing/00-contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be Nice</p>"},{"location":"contributing/00-contributing/#enforcement","title":"Enforcement","text":"<p>Contributors who do not follow the be nice rule in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"contributing/98-user-journeys/","title":"User Personas and Journeys - Front Page Tiles","text":"<p>Use these Mermaid diagrams to help ensure the various user types can navigate successfully from the front page to get to the information they require.</p>"},{"location":"contributing/98-user-journeys/#new-to-dcc-ex","title":"New to DCC-EX","text":"<p>These users don't really know what DCC-EX is, but saw it at their club, on a YouTube channel, at a show, or someone told them they should check it out.</p> <pre><code>graph LR\n    A[Home page] --&gt; B[DCC-EX introduction];\n    B --&gt; C[General product overview];\n    C --&gt; D[How they can get them];\n    D --&gt; E[Purchasing info];\n    D --&gt; F[DIY info];</code></pre>"},{"location":"contributing/98-user-journeys/#ready-to-run-csb1","title":"Ready-to-Run CSB1","text":"<p>These users just purchased their brand new shiny EX-CSB1 and want to get up and running with it ASAP. They need to know how to connect it safely to their layout, how to connect a throttle (eg. EX-WebThrottle, Engine Driver), and how to power it.</p> <pre><code>graph LR\n    A[Home page] --&gt; B[Get Started or Run trains?];\n    B --&gt; C[EX-CSB1 how to plug it in or user manual];\n    C --&gt; D[What's next to expand?];</code></pre>"},{"location":"contributing/98-user-journeys/#dc-ready-to-run-users","title":"DC Ready-to-Run Users","text":"<p>These users are similar to the above but want to run their existing DC trains. They may have a large collection that is too expensive or difficult to convert. They also need to know how to connect it to the layout and connect throttles as well as how to power it, but they also need to understand about isolation between the track outputs and potentially PWM sync issues.</p> <pre><code>graph LR\n    A[Home page] --&gt;B[Get Started with DC];\n    B --&gt; C[EX-CSB1 manual - plug it in];\n    C --&gt; D[DC considerations];\n    D --&gt; E[What's next to expand?];</code></pre>"},{"location":"contributing/98-user-journeys/#existing-users-adding-accessories","title":"Existing Users Adding Accessories","text":"<p>These users already have a CSB1 or DIY stack up and running and want to extend to using accessories including turnouts, signals, sensors, turntables, and so forth. They need to know how to physically connect them (I2C) and enable them in software (myAutomation.h). This will move them from Conductor into early Tinkerer territory for I2C in particular.</p> <pre><code>graph LR\n    A[Home page] --&gt; B[Adding Accessories];</code></pre>"},{"location":"contributing/98-user-journeys/#existing-users-looking-to-automateanimate","title":"Existing Users Looking to Automate/Animate","text":"<p>These users already have a CSB1 or DIY stack up and running and may or may not have accessories as well. They want to understand how to automate and/or animate running trains and/or their layout in general. This may be as simple as a shuttle running back and forth between two stations, or a complex display running trains, controlling various layout aspects (eg. lighting, cross gates), and automating shunting or routes across different tracks. This will definitely be out of Conductor territory but is all about EXRAIL, although guidance on what hardware is required to achieve these will be required.</p> <pre><code>graph LR\n    A[Home page] --&gt; B[EXRAIL introduction];\n    B --&gt; C[Accessory options];\n    B --&gt; D[EXRAIL cookbook];\n    B --&gt; E[EXRAIL reference];</code></pre>"},{"location":"contributing/98-user-journeys/#large-club-layout","title":"Large Club Layout","text":"<p>These users are aware of DCC-EX and know enough to be able to start implementing it on a large club layout. They want to know about wiring, boosters, power districts, multiple wired and wireless throttles, and connecting accessories.</p> <pre><code>graph LR\n    A[Home page] --&gt; B[Large layout page];\n    B --&gt; C[Sample use cases?];\n    B --&gt; D[Accessories?];\n    B --&gt; E[EXRAIL animation/automation?];</code></pre>"},{"location":"contributing/98-user-journeys/#downloader","title":"Downloader","text":"<p>These users already know enough and just want a quick way to get the latest version of software.</p> <pre><code>graph LR\n    A[Home page] --&gt; B[Download page];</code></pre>"},{"location":"contributing/99-release-checklist/","title":"Release Checklist","text":"<p>Everything on this page supports the team being able to determine when these docs can be released.</p> <p>This is a list of to do items that will allow us to release this new documentation, and move the existing to a separate \"legacy-docs\" URL for reference only.</p>"},{"location":"contributing/99-release-checklist/#content","title":"Content","text":"<ul> <li> <p>Conductor friendly getting started with RTR and officially supported Mega DIY stack only:</p> <ul> <li> General getting started page</li> <li> General EX-CommandStation page</li> <li> Clarity on what you need including good and recommended power supplies</li> <li> EXRAIL under EX-CS</li> <li> TrackManager under EX-CS - no waveform/DC PWM details, they can be a reference later, just focus on config and use</li> <li> EX-CSB1 RTR information - must be complete</li> <li> Mega DIY stack page - Mega + EX8874/Arduino R3 + WiFiShield8266 only (no hardware mods, plug n play only)</li> </ul> </li> <li> <p>Advanced DIY stacks:</p> <ul> <li> ESP32</li> <li> Nucleo</li> </ul> </li> <li> <p>Product pages for:</p> <ul> <li> CommandStation (includes EXRAIL and TrackManager)</li> <li> EX-CSB1</li> <li> EX-Motorshield8874</li> <li> EX-WiFiShield8266</li> </ul> </li> <li> <p>Better how to get help and support info:</p> <ul> <li> How to use Discord, code snippets, upload files, raise a ticket</li> <li> What are the logs/file required, how to get them</li> </ul> </li> <li> <p>EX-CommandStation troubleshooting steps:</p> <ul> <li> USB issues - drivers, cables, ports, permissions, other programs open</li> <li> WiFi/serial interfering</li> <li> WiFi issues</li> <li> EX-Installer common issues</li> <li> Not seeing roster/routes/turnouts in throttles/JMRI</li> </ul> </li> <li> <p>I2C more accessible information:</p> <ul> <li> As close to \"out-of-the-box\" as we can get device list (Adafruit, Qwiic, etc.)</li> <li> Wiring/pullups/distance in layman's terms</li> <li> Default device addresses and how to disable</li> <li> Troubleshooting steps</li> </ul> </li> <li> <p>Purchasing information for hardware:</p> <ul> <li> Official DCC-EX reseller stores</li> <li> Recommended third-party suppliers</li> </ul> </li> <li> <p> EXRAIL command reference from doxyGen</p> </li> <li> <p>User journeys to guide users through the site:</p> <ul> <li> Brand new users no knowledge</li> <li> Just want to run trains</li> <li> Just want to run trains - DC only version</li> <li> Wanting to add accessories</li> <li> Wanting to animate/automate</li> <li> Large club layout</li> <li> Downloader</li> </ul> </li> <li> <p> Add donation info</p> </li> </ul>"},{"location":"contributing/99-release-checklist/#release-qa-items","title":"Release QA Items","text":"<ul> <li> Proof-reading all pages but not by original author</li> <li> Address all TODO markers search for TODO</li> </ul>"},{"location":"contributing/99-release-checklist/#menu-and-page-structure","title":"Menu and Page Structure","text":"<ul> <li> All hardware pages should \"next\" onto the EX-Installer EX-CommandStation configuration instructions, maybe nav plugin extension, maybe JS</li> <li> <p>If DIY on tap nav menu, RTR must be their too, choose:</p> <ul> <li> Both DIY and RTR on nav menu</li> <li> Move both under products menu</li> </ul> </li> <li> <p>Redirects for key items from the previous site, and QR codes on hardware devices</p> <ul> <li> EX-CSB1 QR code</li> <li> EX8874 QR code</li> <li> show QR codes for Toolbox, and ED.</li> <li> and any other recommended throttle apps.</li> </ul> </li> <li> <p> Page numbers should be double digits (leading 0)</p> </li> </ul>"},{"location":"contributing/99-release-checklist/#styling","title":"Styling","text":"<ul> <li> Revisit navigation menu bar colouring</li> <li> Table separator colours are almost invisible</li> <li> Validate all colours are accessible friendly (reports links might be difficult to read)</li> </ul>"},{"location":"contributing/99-release-checklist/#team-info","title":"Team Info","text":"<ul> <li> <p> Ensure MkDocs contributor guide covers all customisations</p> <ul> <li> How to use our logos</li> <li> Grid cards</li> <li> CSS/JS customisations</li> <li> Custom plugins</li> <li> Custom footer</li> <li> How we use Material extensions</li> <li> Icons/emojis</li> <li> Snippets</li> </ul> </li> <li> <p> About Us page</p> </li> </ul>"},{"location":"contributing/99-release-checklist/#release-to-do","title":"Release To Do","text":"<ul> <li> GitHub workflow to build these docs on push/merge</li> <li> GitHub workflow must use strict mode to error on all warnings and errors</li> <li> News article on existing site ahead of release</li> <li> News article with this release</li> </ul>"},{"location":"contributing/code/00-contributing-code/","title":"Contributing to the public domain code","text":"<p>Thanks for considering contributing to our project. Here is a guide for how to get started and and a list of our conventions. We will also walk you through the Github command line and Desktop commands necessary to download the code, make changes, and get it included in a next version of the software.</p> <p>Before contributing to this repository, please first discuss the change you wish to make via issue, or any other method with the owners of this repository before making a change.</p> <p>Find us on our website, on our Discord, or on Trainboard.</p> <p>If you reach out on discord, we have areas reserved for developers to discuss technicalities to avoid confusing users.</p>"},{"location":"contributing/code/00-contributing-code/#development-environment","title":"Development Environment","text":"<p>We recommend using PlatformIO IDE for VSCode. If you haven't yet used it, it is an easy to learn and easy to use IDE that really shines for embedded development and the Arduino based hardware we use. For more information go to the PlatformIO website.</p> <ul> <li>Download and install the latest version of the Arduino IDE</li> <li>Download and install the latest version of Visual Studio Code from Microsoft</li> <li>Run VSCode and click on the \"extensions\" icon on the left. Install \"PlatformIO IDE for VSCode\" and the \"Arduino Framework\" support</li> </ul> <p>If you don't see C/C++ Installed in the list, install that too. We also recommend installing the Gitlens extension to make working with Git and GitHub even easier.</p> <p>You may ask if you can use the Arduino IDE, Visual Studio, or even a text editor and the answer is \"of course\" if you know what you are doing. Since you are just changing text files, you can use whatever you like as long as your commits and pull requests can be merged in GitHub. However, it will be much easier to follow our coding standards if you have an IDE that can automatically format things for you.</p>"},{"location":"contributing/code/00-contributing-code/#coding-style-guidelines","title":"Coding Style Guidelines","text":"<p>We have adopted the Google style guidelines. In particular please make sure to adhere to these standards:</p> <ol> <li>All header files should have <code>#define</code> guards to prevent multiple inclusion. (EXCEPT .h files containing EXRAIL scripts!)</li> <li>Use Unix style line endings</li> <li>We indent using two spaces (soft tabs)</li> <li>Braces</li> </ol> <p>For more information just check our code or read the style guide.</p>"},{"location":"contributing/code/00-contributing-code/#using-the-repository","title":"Using the Repository","text":"<ol> <li>Clone the repository on your local machine</li> <li>Create a working branch using the format \"username-featurename\" ex: \"git branch -b frightrisk-turnouts\"</li> <li>Commit often, ex: \"git add .\" and then \"git commit -m \"description of your changes\"</li> <li>Push your changes to our repository \"git push\"</li> <li>When you are ready, issue a pull request for your changes to be merged into the main branch</li> </ol>"},{"location":"contributing/code/00-contributing-code/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure any install or build dependencies are removed before the end of the layer when doing a build.</li> </ol>"},{"location":"contributing/documentation/00-docs/","title":"Contributing to Documentation","text":"<p>This page outlines what you need in order to contribute to the documentation, along with the various markdown attributes and so forth you can use.</p> <p>The documentation is hosted using GitHub Pages and is written in Markdown format, using MkDocs to publish the content. We use the MkDocs Material theme to give us the framework for the look and feel of the website, along with a number of other useful plugins and extensions to enhance the content.</p> <p>Important! Once up and running with the information on this page, please ensure you are familiar with general markdown syntax.</p> <p>Refer to the Markdown Guide.</p>"},{"location":"contributing/documentation/00-docs/#how-to-contribute","title":"How to Contribute","text":"<p>For contributions from the general public, we recommend forking the GitHub repository and submitting pull requests for the DCC-EX Documenter team to review and merge.</p> <p>If you wish to contribute more fully and become a part of the DCC-EX Documenter team, reach out to us via Discord. To gain access to the GitHub repository, one of the DCC-EX team administrators will need to add you to the \"Web\" team in GitHub.</p>"},{"location":"contributing/documentation/00-docs/#mkdocs-links","title":"MkDocs Links","text":"<p>Here are some handy links with more info:</p> <ul> <li>MkDocs website - The official MkDocs documentation.</li> <li>MkDocs Material theme - The MkDocs Material theme documentation.</li> <li>MkDocs Awesome Nav plugin - MkDocs Awesome Nav plugin is what we use for dynamic page structure.</li> <li>MkDocs RSS plugin - The MkDocs RSS Plugin publishes our DCC-EX News feed.</li> <li>MkDocs Open in New Tab plugin - The Open in New Tab plugin ensures all links to external websites open in a new tab to ensure the users' browsing experience in our documentation is consistent.</li> </ul>"},{"location":"contributing/documentation/00-docs/#what-you-need-to-install","title":"What You Need to Install","text":"<p>This is the list of software you need to successfully contribute to the documentation, including being able to preview it locally:</p> <ul> <li>Visual Studio Code (VSCode)</li> <li>Python - Version 3.13 is recommended, minimum required is 3.10</li> </ul> <p>There are two VSCode plugins that are highly recommended also:</p> <ul> <li>Markdown Preview Mermaid Support by Matt Bierner - enables previewing Mermaid diagrams in VSCode</li> <li>markdownlint by David Anson - helps keep consistent, good formatting in Markdown files (like flake8 for Python)</li> </ul>"},{"location":"contributing/documentation/00-docs/#getting-started","title":"Getting Started","text":"<p>Once you have installed VSCode and Python, you need to clone the GitHub repository, set up a virtual environment, and install the MkDocs requirements.</p> <p>We recommend using the built-in Git functionality of VSCode to clone the repository, or you can use GitHub Desktop or command line Git, whichever you prefer. There is plenty of information generally available on that so we won't cover it here, and instead will focus on the specifics required to ready to contribute to MkDocs content.</p> <p>Follow the appropriate section below to setup MkDocs in Python for your operating system:</p>"},{"location":"contributing/documentation/00-docs/#setup-on-macos","title":"Setup on macOS","text":"<pre><code>cd mkdocs-test\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/documentation/00-docs/#setup-on-linux","title":"Setup on Linux","text":"<pre><code>cd mkdocs-test\npython3 -m venv venv\n. ./venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/documentation/00-docs/#setup-on-windows","title":"Setup on Windows","text":"<pre><code>cd mkdocs-test\nvirtualenv venv\nvenv\\scripts\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/documentation/00-docs/#previewing-and-building-mkdocs","title":"Previewing and building MkDocs","text":"<p>Previewing locally is very simple:</p> <pre><code>mkdocs serve\n</code></pre> <p>Navigate to the local preview in a browser.</p> <p>When finished with the local preview, stop the local server with either Ctrl+C (Windows/Linux) or Cmd+C (macOS).</p> <p>Building locally is equally as simple:</p> <pre><code>mkdocs build\n</code></pre> <p>MkDocs also has a feature to deploy to GitHub pages without using a workflow:</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"contributing/documentation/02-standards/","title":"Documentation Standards","text":"<p>This guide outlines the mandatory standards to adhere to for page naming, directory structure, and other related items.</p> <p>We try to keep as few mandatory standards as possible, but these items must be adhered to in order for our documentation to be maintainable.</p>"},{"location":"contributing/documentation/02-standards/#general-content","title":"General Content","text":"<p>When creating content, remember to keep the target user in mind at all times, with a strong preference to Conductor level users. A significant (and growing) proportion of our user base do not understand software, nor a lot of electronics or embedded systems. Use terminology they are likely understand.</p> <p>Most importantly, keep pages concise, to the point, and avoid excess words or waffle. Not only does this make the key messages hard to read, but maintaining lengthy pages that are a wall of text becomes onerous, daunting, and reduces the likelihood of keeping our documentation current.</p> <p>So:</p> <ul> <li>Brevity is good, keep topics to the concise point (eg. Conductors don't care about DCC waveforms, they care about running a train).</li> <li>Avoid jargon where possible.</li> <li>If something does need elaboration, link to a relevant reference.</li> <li>Don't document things generally available on the Internet, eg. we don't document MkDocs or the Material theme as there is good documentation available, we only document the context of our use cases.</li> </ul>"},{"location":"contributing/documentation/02-standards/#do-not-duplicate-content","title":"Do Not Duplicate Content","text":"<p>DO NOT CREATE DUPLICATE CONTENT as this increases the maintenance burden significantly but, more importantly, makes it difficult for users when content appears slightly differently in two different places or even contradicts itself. When needing to repeat information in more than one place, take advantage of the MkDocs Snippets feature. This allows you to include the same markdown content in multiple places.</p>"},{"location":"contributing/documentation/02-standards/#directory-naming-page-naming-and-titles","title":"Directory Naming, Page Naming, and Titles","text":"<p>With the exception of the home page and the DCC-EX News page, do not use \"index.md\", but rather name pages according to their primary message. Using \"index.md\" adjusts the rendering of pages when navigating through the menus, and the team has a preference for the navigation experience using numbers pages over having an initial index page.</p> <ul> <li>All directory and page names must be in lower case and use \"-\" instead of spaces.</li> <li>Page ordering is ideally set by a two digit number, so preface with the appropriate page number eg. \"01-standards-formatting.md\".</li> <li>The page title is determined by the top level heading, see Headings.</li> </ul>"},{"location":"contributing/documentation/02-standards/#address-all-mkdocs-warnings-and-errors","title":"Address all MkDocs Warnings and Errors","text":"<p>When running locally with <code>mkdocs serve</code>, ensure any INFO, WARNING, or ERROR level messages are dealt with prior to submitting pull requests or deploying a new version.</p> <p>Warning</p> <p>When we release the new MkDocs based documentation, the deployment GitHub workflow will enforce <code>strict</code> mode, meaning any issues will generate a workflow error, preventing updates being deployed.</p>"},{"location":"contributing/documentation/02-standards/#directory-structure","title":"Directory Structure","text":"<p>Note firstly that we use the MkDocs Awesome Nav plugin to control the menu structure, which uses a \".nav.yml\" file in any directory where the default needs to be overridden.</p> <p>The top level directories under the \"docs\" directory determine the tabs or horizontal menu items on the header bar, with the subsequent directories and files in each of these determining the menu on the left pane.</p> <p>Do not adjust the top level directories without consulting the DCC-EX Documenter team, as these fundamentally adjust the user experience.</p> <p>If a new top level directory is to be added, it needs to be added to the \"/docs/.nav.yml\" file in the appropriate order. Files and directories created within existing top level directories will automatically be added to the menus (see Page Naming and Titles for page ordering).</p> <p>Also note that our custom Scoped Nav plugin automatically adjusts previous/next links, so overriding page ordering in \".nav.yml\" will cause issues, so please do not override page ordering in this manner, but rather use numbers as outlined in Directory Naming, Page Naming, and Titles.</p>"},{"location":"contributing/documentation/03-formatting-guide/","title":"Formatting Guide","text":"<p>This page provides guidelines on how to use the various markdown attributes and other MkDocs Material extensions we have enabled to enhance the documentation.</p>"},{"location":"contributing/documentation/03-formatting-guide/#page-and-section-links","title":"Page and Section Links","text":"<p>There are three types of links you can use:</p> <ul> <li>Section links - link to another section heading on the same page</li> <li>Document links - link to another document, or a section heading on another document</li> <li>External links - link to an external website</li> </ul> <p>All internal links to other pages and sections should be relative to the docs directory. We have enabled a setting to ensure links are correctly converted to the correct html href, and enable permalinks for headings to support this.</p>"},{"location":"contributing/documentation/03-formatting-guide/#section-links","title":"Section Links","text":"<p>Links to sections on the same page should just use the permalink section heading name:</p> <pre><code>[Link to this section](#page-and-section-links)\n</code></pre> <p>Results in: Link to this section</p>"},{"location":"contributing/documentation/03-formatting-guide/#document-links","title":"Document Links","text":"<pre><code>[Link to Contributing to Documentation Page](/contributing/documentation/00-docs.md)\n</code></pre> <p>Results in: Link to Contributing to Documentation Page</p> <pre><code>[Link to How to Contribute Section](/contributing/documentation/00-docs.md#how-to-contribute)\n</code></pre> <p>Results in: Link to How to Contribute Section</p> <p>Note: when typing a link in VSCode, the intellisense dropdown will help you complete the link by following the path from the project directory. This creates links that start with \"/docs\" (for example \"/docs/contributing/1-contribute-docs.md\" ). These links will not work unless you manually delete the /docs prefix.  Its a pain but we have raised a PR for VScode and mkDocs on this.</p>"},{"location":"contributing/documentation/03-formatting-guide/#external-links","title":"External Links","text":"<pre><code>[Link to Google Search](https://www.google.com)\n</code></pre> <p>Results in: Link to Google Search</p>"},{"location":"contributing/documentation/03-formatting-guide/#search-links","title":"Search Links","text":"<p>We have added a link feature to directly invoke the mkDocs powerful search dialog. This is particularly useful when you wish to refer to imformation that may be spread over several places and possibly not yet written.</p> <pre><code> [Find out about PCA9685 servo controllers](?PCA9685)\n</code></pre> <p>Find out about PCA9685 servo controllers</p> <p>Multi word searches are also accepted</p> <pre><code> [hidden turnouts](?hidden turnout)\n</code></pre> <p>hidden turnouts</p>"},{"location":"contributing/documentation/03-formatting-guide/#headings","title":"Headings","text":"<p>Headings are simply defined by one or more leading <code>#</code>, noting you can only have one top level heading on a page, which is the page title.</p> <p>The top level heading defines how the page appears in menus, so for this page this is the top level heading:</p> <pre><code># Standards and Formatting Guide\n</code></pre> <p>Further, this general section on \"Headings\" is a second level heading:</p> <pre><code>## Headings\n</code></pre> <p>Following are how to define the lower level headings with a demo of each.</p>"},{"location":"contributing/documentation/03-formatting-guide/#heading-level-3","title":"Heading Level 3","text":"<pre><code>### Heading Level 3\n</code></pre>"},{"location":"contributing/documentation/03-formatting-guide/#heading-level-4","title":"Heading Level 4","text":"<pre><code>#### Heading Level 4\n</code></pre>"},{"location":"contributing/documentation/03-formatting-guide/#heading-level-5","title":"Heading Level 5","text":"<pre><code>##### Heading Level 5\n</code></pre>"},{"location":"contributing/documentation/03-formatting-guide/#glossary-terms-and-linking","title":"Glossary Terms and Linking","text":"<p>Glossary plugins seem to be either very complicated to implement, or don't yield the results we're looking for. Instead, we have opted for a simple DIY glossary to define the terms, and provide a search link to enable users to find where they have been used in the documentation.</p> <p>To add a term to the glossary, use the search URL syntax and a second level heading:</p> <pre><code>## [Term](?term)\n\nThis is a new term being added to the glossary.\n</code></pre>"},{"location":"contributing/documentation/03-formatting-guide/#code-blocks","title":"Code blocks","text":"<p>When including code blocks, be sure to include an appropriate language for syntax highlighting, and use triple backtick \"`\" characters to surround the code for highlighting.</p> <p>For example:</p> <pre><code>```cpp\nTURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n```\n</code></pre> <p>Will render as:</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>For EXRAIL and general configuration file code blocks (eg. config.h, myAutomation.h), \"cpp\" is as good as any, and for any others use an appropriate language specifier.</p> <p>If appropriate, line numbers can also be displayed by appending <code>linenums=\"X\"</code> to the language, where \"X\" is the starting line number:</p> <pre><code>```cpp linenums=\"20\"\nTURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n```\n</code></pre> <p>Will render as:</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>This is a nonsense C++ code block generated by Gemini to demonstrate the full syntax highlighting:</p> <pre><code>#include &lt;iostream&gt;  // Standard I/O library\n#include &lt;vector&gt;    // For dynamic arrays\n#include &lt;string&gt;    // For string manipulation\n#include &lt;map&gt;       // For key-value pairs\n\n// A simple namespace to organize code\nnamespace MyLibrary {\n\nconst double PI_VALUE = 3.1415926535; // A global constant\n\n/**\n * @brief Represents a generic item with properties.\n * This is a multi-line comment to test comment colors.\n */\nclass GenericItem {\nprivate:\n    std::string itemName;\n    int itemId;\n    double itemPrice;\n    bool isAvailable;\n\npublic:\n    // Constructor with default values\n    GenericItem(const std::string&amp; name = \"Default Item\", int id = 0, double price = 0.0, bool available = true)\n        : itemName(name), itemId(id), itemPrice(price), isAvailable(available) {}\n\n    // Member function to display item details\n    void displayDetails() const {\n        std::cout &lt;&lt; \"Item Name: \" &lt;&lt; itemName &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Item ID: \" &lt;&lt; itemId &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Price: $\" &lt;&lt; itemPrice &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Available: \" &lt;&lt; (isAvailable ? \"Yes\" : \"No\") &lt;&lt; std::endl;\n    }\n\n    // Getter for itemPrice\n    double getPrice() const {\n        return itemPrice;\n    }\n\n    // Setter for itemPrice (with a simple check)\n    void setPrice(double newPrice) {\n        if (newPrice &gt;= 0.0) {\n            this-&gt;itemPrice = newPrice;\n        } else {\n            std::cerr &lt;&lt; \"Warning: Price cannot be negative.\" &lt;&lt; std::endl;\n        }\n    }\n}; // Don't forget the semicolon after class definition!\n\n// Template function to find the maximum of two values\ntemplate &lt;typename T&gt;\nT findMax(T a, T b) {\n    return (a &gt; b) ? a : b; // Ternary operator test\n}\n\n} // end namespace MyLibrary\n\n// Main function - entry point of the program\nint main() {\n    using namespace MyLibrary; // Use MyLibrary namespace\n\n    // Create instances of GenericItem\n    GenericItem item1(\"Laptop\", 101, 1200.50, true);\n    GenericItem* item2 = new GenericItem(\"Mouse\", 202, 25.99, false); // Using 'new'\n\n    // Display details using a loop\n    std::vector&lt;GenericItem&gt; inventory;\n    inventory.push_back(item1);\n    inventory.push_back(*item2);\n\n    std::cout &lt;&lt; \"--- Inventory Details ---\" &lt;&lt; std::endl;\n    for (const auto&amp; item : inventory) { // Range-based for loop\n        item.displayDetails();\n        std::cout &lt;&lt; \"-------------------------\" &lt;&lt; std::endl;\n    }\n\n    // Test the template function\n    int maxInt = findMax(10, 20);\n    double maxDouble = findMax(PI_VALUE, item2-&gt;getPrice()); // Accessing member via pointer\n\n    std::cout &lt;&lt; \"Maximum integer: \" &lt;&lt; maxInt &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Maximum double: \" &lt;&lt; maxDouble &lt;&lt; std::endl;\n\n    // Exception handling test\n    try {\n        if (item1.getPrice() &lt; 1.0) {\n            throw \"Price too low!\"; // Throwing a string literal\n        }\n        item1.setPrice(1500.00); // Change price\n    } catch (const char* msg) { // Catching a C-style string\n        std::cerr &lt;&lt; \"Error: \" &lt;&lt; msg &lt;&lt; std::endl;\n    }\n\n    // Clean up dynamic memory\n    delete item2; // Using 'delete'\n    item2 = nullptr; // Best practice to nullify pointer after delete\n\n    // Return 0 for successful execution (integer literal)\n    return 0;\n}\n</code></pre>"},{"location":"contributing/documentation/04-understanding-links/","title":"Understanding Links","text":""},{"location":"contributing/documentation/04-understanding-links/#what-the-html-browser-sees-is-this","title":"What the html browser sees is this","text":"<p>An ABOSLUTE link in html starts with <code>/</code>  which makes the browser prepend the web server address so <code>href=\"/blah/blah.html\"</code>  for example would link to <code>\"http:://dcc-ex.com/blah/blah.html\"</code> which would be BAD because  we actually wanted  <code>http:://dcc-ex.com/mkdocs-test/blah/blah.html</code> but there was no way of doing that if you didn't know the sub-directory mkdocs-test in advance and code it on all your links.</p> <p>To resolve this, you have to use RELATIVE hrefs, in which the link is relative to the current page.  So if you are on page   <code>blah1/blah2/blah3.html</code> and you want a link or image in  <code>_static/images/stuff.jpg</code>  you have to use <code>href=\"../../_static/images/stuff.jpg\"</code></p> <p>So.. RELATIVE HTML links are the only reliable way to work, otherwise your website is borked if you install it in for example <code>http:://dcc-ex.com/newsite/</code></p>"},{"location":"contributing/documentation/04-understanding-links/#what-the-mkdocs-author-sees","title":"What the mkdocs author sees","text":"<p>In mkdocs,  the markdown to html generator  passes through RELATIVE links unchanged, this means that you can easily refer to images in the same directory as the current page by just giving the name, or get to any other directory with the appropriate number of ../ to go up the tree.  That's great until you move the current page to another directory so the relative link is no longer going to find the image or page you want.</p> <p>MkDocs has a solution. When you code what appears to be an absolute link like <code>/_static/images/spaff.png</code> then the HTM generated will look like <code>href=\"../../_static/images/spaff.png\"</code>  with the appropriate number of <code>../</code> to walk back up the tree from the current file to the docs directory. So basically you code what looks like an ABSOLUTE link, but the html is generated with a relative link. Hooray!</p> <p>BUT there is one annoying little quirk...</p> <p>The intellisense when typing the start of a link like <code>[look here](/</code>   gives you a dropdown starting at docs  so you get <code>/docs/_static/images/spaff.jpg</code>   which wont get converted so it gives <code>href=\"/docs/_static/images/spaff.jpg\"</code>  which isn't found because the <code>/docs/</code> directory level isnt copied to the website.</p> <p>Pending a VSCode or mkDocs fix (both applied for) the only solution is to manually remove the <code>/docs</code> prefix from the link created by intellisense.</p>"},{"location":"contributing/documentation/04-understanding-links/#the-search-link","title":"The search link","text":"<p>The search link like <code>?turnout</code> is passed through unchanged by mkDocs but is intercepted in the browser by our own  JavaSCript code</p>"},{"location":"contributing/documentation/05-logos/","title":"Using Our Logos","text":"<p>We have various logos available for both the DCC-EX brand and our various products.</p> <p>These are typically created using InkScape in SVG format, which are located in the \"image-artefacts\" directory.</p> <p>The generated logos are exported in PNG format with a transparent background, and located in the \"docs/_static/images/logos\" directory.</p>"},{"location":"contributing/documentation/05-logos/#light-and-dark-theme","title":"Light and Dark Theme","text":"<p>Due to most logos using a transparent background, there are typically both a light and dark version of each logo available, and a CSS class is required to display the correct one using an attribute.</p> <p>If a logo has a solid background (for example our main DCC-EX logo), this is not required.</p> <p>For example, the EX-CommandStation logo has both options:</p> <pre><code>![EX-CommandStation Logo](/_static/images/logos/product-logo-ex-commandstation-only-light.png){ .only-light }\n![EX-CommandStation Logo](/_static/images/logos/product-logo-ex-commandstation-only-dark.png){ .only-dark }\n</code></pre> <p>This renders, and switching your browser between light and dark modes will demonstrate the result:</p> <p> </p>"},{"location":"contributing/documentation/05-logos/#branded-and-non-branded-product-logos","title":"Branded and Non-Branded Product Logos","text":"<p>In most instances, using our full brand and product logos can cause pages to become too \"busy\". Users are navigating the DCC-EX website looking at our products, so incorporating our brand along with the product name can cause content and visual overload.</p> <p>Where possible, use product name logos only, but if a product is being used in isolation from other DCC-EX context, branded logos are also available.</p> <p>Logo PNG files including the word \"only\" have no branding.</p> <p>EX-CommandStation branded logo:</p> <pre><code>![EX-CommandStation Logo](/_static/images/logos/product-logo-ex-commandstation-light.png){ .only-light }\n![EX-CommandStation Logo](/_static/images/logos/product-logo-ex-commandstation-dark.png){ .only-dark }\n</code></pre> <p> </p> <p>EX-CommandStation product only logo:</p> <pre><code>![EX-CommandStation Logo](/_static/images/logos/product-logo-ex-commandstation-only-light.png){ .only-light }\n![EX-CommandStation Logo](/_static/images/logos/product-logo-ex-commandstation-only-dark.png){ .only-dark }\n</code></pre> <p> </p>"},{"location":"contributing/documentation/05-logos/#logo-sizing","title":"Logo Sizing","text":"<p>As you can see by the examples above, the logo sizes can be quite intrusive if use unconstrained.</p> <p>If sizing needs to be constrained, use an additional attribute to set the width only (do not set height):</p> <pre><code>![EX-CommandStation Logo](/_static/images/logos/product-logo-ex-commandstation-only-light.png){ .only-light width=400px }\n![EX-CommandStation Logo](/_static/images/logos/product-logo-ex-commandstation-only-dark.png){ .only-dark width=400px }\n</code></pre> <p> </p> <p>All our product logos are generated with the same dimensions.</p>"},{"location":"contributing/documentation/06-mkdocs-features/","title":"Working with MkDocs","text":"<p>As outlined previously, MkDocs with the MkDocs Material theme are used as the basis of our documentation, utilising markdown plus other enhanced features to give our users a good experience.</p> <p>Only a brief introduction to these are outlined below to set the context for their use within our documentation, aside from custom plugins we have written which are covered here.</p> <p>Read the full MkDocs documentation and MkDocs Material documentation for more information.</p>"},{"location":"contributing/documentation/06-mkdocs-features/#previewing-and-deploying-mkdocs","title":"Previewing and Deploying MkDocs","text":"<p>Don't forget when working with MkDocs, you can preview locally by running <code>mkdocs serve</code> at a command prompt or bash console, and you can manually deploy to GitHub Pages (provided you have permissions to do so) with <code>mkdocs gh-deploy</code>.</p>"},{"location":"contributing/documentation/06-mkdocs-features/#dcc-ex-css-styling","title":"DCC-EX CSS Styling","text":"<p>All customised styling for our branding and other customisations is contained in the \"dccex_theme.css\" file.</p> <p>Do not adjust the contents of this file without liaising with the DCC-EX Documenter team to ensure styling is consistent with our theme.</p>"},{"location":"contributing/documentation/06-mkdocs-features/#dcc-ex-javascript-files","title":"DCC-EX JavaScript Files","text":"<p>There are several JavaScript files included to perform various client side functions:</p> <ul> <li>clickable-cards.js - Makes a grid card clickable using the card's HREF, works with CSS to hide the link also</li> <li>ex-installer-run-helper.js - Helper to hide irrelevant installer links/pages based on the detected browser's operating system</li> <li>legacy-docs-new-tab.js - Ensures all HREF links pointing to <code>https://dcc-ex.com/legacy-docs/</code> open in a new tab</li> <li>platform.js - Helper to determine the browser's operating system</li> <li>search-helper.js - Helper to create search links, see The search link</li> </ul>"},{"location":"contributing/documentation/06-mkdocs-features/#mkdocs-material-extensions","title":"MkDocs Material Extensions","text":"<p>While basic markdown is sufficient to get pages published with MkDocs and our documentation, there are certain extensions and plugins for MkDocs and the MkDocs Material theme that both improve the maintainability of our documentation, and improve the experience for our users.</p> <p>The authoritative list of enabled extensions can be determined by the \"mkdocs.yml\" file.</p> <p>Do not adjust the contents of this file without liaising with the DCC-EX Documenter team to ensure no existing functionality is broken.</p>"},{"location":"contributing/documentation/06-mkdocs-features/#admonitions-warning-danger-example-note","title":"Admonitions - Warning, Danger, Example, Note","text":"<p>Use admonitions to create callouts for specific user attention, but please ensure these are used sparingly and only where strictly necessary. Adding general notes and using these tends to make the content too \"busy\", but adding a specific callout about voltage level differences is a good use case.</p> <p>Some examples:</p> <pre><code>!!! warning \"This is a warning\"\n\n    Warnings are good to call out when appropriate.\n</code></pre> <p>This is a warning</p> <p>Warnings are good to call out when appropriate.</p> <pre><code>!!! danger \"This is dangerous!\"\n\n    When dealing with things like voltage levels or power supplies, these are good to call out.\n</code></pre> <p>This is dangerous!</p> <p>When dealing with things like voltage levels or power supplies, these are good to call out.</p> <pre><code>??? example \"A collapsible example\"\n\n    Examples can be good to call out sparingly, and this one is collapsible.\n</code></pre> A collapsible example <p>Examples can be good to call out sparingly, and this one is collapsible.</p> <pre><code>!!! note \"A general note\"\n\n    This is a general note, use very sparingly.\n</code></pre> <p>A general note</p> <p>This is a general note, use very sparingly.</p>"},{"location":"contributing/documentation/06-mkdocs-features/#attribute-lists","title":"Attribute Lists","text":"<p>Adding HTML attributes to inline or block level elements can be done using Attribute Lists.</p> <p>NOTE that like all markdown syntax, there must be no spaces between the attribute list and the element it is being applied to.</p> <pre><code>![Logo example small](/_static/images/logos/logo.png){ width=100px }\n![Logo example](/_static/images/logos/logo.png){ width=200px }\n</code></pre> <p>This renders:</p> <p> </p> <p>The other most common example in our documentation is to provide a specific CSS class to an element, for example our buttons are a CSS class applied to a link:</p> <pre><code>[Windows x64](https://github.com/DCC-EX/EX-Installer/releases/latest/download/EX-Installer-Win64.exe){ .md-button }\n</code></pre> <p>Renders Windows x64</p> <p>Multiple attributes can be applied using spaces between them, don't use a comma or any other separator.</p> <p>For example, this logo will be 100px wide and only show in light mode (switch to dark mode to hide it):</p> <pre><code>![Logo example](/_static/images/logos/logo.png){ width=100px .only-light }\n</code></pre> <p></p>"},{"location":"contributing/documentation/06-mkdocs-features/#snippets","title":"Snippets","text":"<p>To help us remove unnecessary duplication of content, we have enabled the <code>pymdownx.snippets</code> extension, which allows us to include content from a single file in other markdown files.</p> <p>All files that are to be included as snippets must reside in the \"snippets\" directory, and preferably within a subdirectory relevant to the topic.</p> <p>NOTE: the code below includes extra back tick \"`\" characters at the beginning and end to prevent MkDocs rendering this as a snippet.</p> <pre><code>`--8&lt;-- \"snippets/snippet-example/snippet-example.md\"`\n</code></pre> <p>The text below is included from this file:</p> <p>This text is being included from the file <code>snippets/snippet-example/snippet-example.md</code>.</p>"},{"location":"contributing/documentation/06-mkdocs-features/#icons-and-emojis","title":"Icons and Emojis","text":"<p>To include an icon or emoji search for them in the Icons, Emojis section of the documentation.</p> <p>To include, simply reference them as such:</p> <pre><code>:thumbsup:\n</code></pre> <p>This renders </p>"},{"location":"contributing/documentation/06-mkdocs-features/#mkdocs-plugins","title":"MkDocs Plugins","text":"<p>The authoritative list of enabled plugins can be determined by the \"mkdocs.yml\" file.</p> <p>Do not adjust the contents of this file without liaising with the DCC-EX Documenter team to ensure no existing functionality is broken.</p> <p>We have written two custom plugins for MkDocs to highlight the latest news articles and ensure the previous/next navigation buttons make sense within the context of what the user is seeing.</p> <p>These plugins reside within the \"plugins\" directory and are included in \"requirements.txt\" for installation by contributors.</p>"},{"location":"contributing/documentation/06-mkdocs-features/#dcc-ex-custom-latest-news-plugin","title":"DCC-EX Custom Latest News Plugin","text":"<p>This plugin simply grabs the title of the latest news/blog articles to create an unordered list which can be used in markdown files.</p> <p>To include it in a file, include this text on its own line with a blank line above and below:</p> <pre><code>- :material-newspaper: New Documentation\n{ .news-headline-list }\n</code></pre> <p>You may need to indent this line to suit the nesting of lists etc.</p> <p>This is included as a plugin in mkdocs.yml:</p> <pre><code>plugins:\n  - latest-news\n</code></pre> <p>By default, the latest 2 articles are included, this can be changed with:</p> <pre><code>plugins:\n  - latest-news:\n      count: 3\n</code></pre> <p>To customise the list styling, either create the default class \"news-list\" or define your own:</p> <pre><code>plugins:\n  - latest-news:\n      list-class: my-list-class\n</code></pre> <p>To ensure the CSS class correctly overrides MkDocs Material classes, make it specific, eg:</p> <pre><code>.md-typeset li.news-headline-list {\n  font-family: Audiowide,Helvetica,Arial,sans-serif;\n  list-style: none;\n  padding-left: 0;\n  margin-left: 0 !important;\n}\n</code></pre>"},{"location":"contributing/documentation/06-mkdocs-features/#dcc-ex-custom-scoped-nav-plugin-and-custom-footerhtml","title":"DCC-EX Custom Scoped Nav Plugin and Custom footer.html","text":"<p>This plugin is used to set the scope of the previous and next navigation buttons to the directory pages are located in.</p> <p>The first page in a directory will have no previous button, and the last no next button.</p> <p>NOTE: This is calculated based on the sorting order of the page file names within the directory, and therefore custom ordering of pages using .nav.yml will cause unexpected results.</p> <p>To enable this customised navigation, a custom \"footer.html\" template has been included and can be found in \"overrides/partials/footer.html\". This is required in order to show/hide the previous and next arrows as determined by the plugin.</p>"},{"location":"contributing/documentation/10-mermaid-diagrams/","title":"Mermaid Diagrams","text":"<p>Mermaid diagrams are a great way of codifying diagrams and charts within Markdown documents, and we have enabled a plugin to support these within MkDocs.</p> <p>The full capability of Mermaid is outlined on the Mermaid website.</p>"},{"location":"contributing/documentation/10-mermaid-diagrams/#flowchart","title":"Flowchart","text":"<pre><code>```mermaid\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n```\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"contributing/documentation/10-mermaid-diagrams/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>``` mermaid\nsequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!\n```\n</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"contributing/documentation/10-mermaid-diagrams/#state-diagram","title":"State Diagram","text":"<pre><code>``` mermaid\nstateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]\n```\n</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"diy/00-diy/","title":"Build Your Own Command Station","text":"<p>A command station consists of a processor and a shield/board to convert the low voltage digital signal from the processor into the high powered track output.</p> <p>DCC-EX started life on home-built command stations using Arduino UNO and Mega processors and the standard Arduino motor shield. This was attractive to users that liked to experiment and was exceptionally cheap to create.</p> <p>However, if you build your own, or even buy a pre-built stack from a third party, you will need to learn quite a lot more than using our plug-and-go solution the Command Station Booster 1 Express (CSB1).</p> <p>Buyer beware!</p> <p>There are many different brands and clones of various different microprocessors, shields/boards, and power supplies on the market, particularly when using marketplaces such as AliExpress and Amazon. Sometimes the prices on these marketplaces seem too good to be true for a genuine item, and usually they are and you will end up with a clone or inferior product, potentially with quality, reliability, and compatibility issues.</p> <p>When reading through these self-build options, we endeavour to be as clear as we can on the specific options we recommend, but we cannot possibly tell you all the options of where to purchase reliably, so you must take care when purchasing that you are buying the correct component. If in doubt, ask via our Discord server for a second opinion before spending your money.</p> <p>Further, should you select a different processor, or progress to adding accessories, you will find that lots of \"standards\" are not at all standard, and that apparently attractive alternatives to the recommended items are totally incompatible. You may need to configure the software or even modify hardware shields.</p> <p>In addition to the command station components, you will also need</p> <ul> <li>a power supply appropriate you your track and locos.</li> <li>a \u201cMain\u201d track, aka \u201cOperations\u201d track - most people already have this: it\u2019s your layout! If you don't yet have this, no problem you can still test on the programming track (below).</li> <li>a \u201cProgramming\u201d track, aka \"PROG\" or \u201cService\u201d track - an isolated short section of track that you will use to program locomotives</li> <li>a Train - Specifically, a locomotive equipped with a DCC decoder (either a standard or sound decoder). Ideally, it should be a loco already proven to work on DCC. Otherwise, if you have a problem, you may not be able to tell if the problem is the decoder or the EX-CommandStation</li> </ul> <p>Like any command station, you will want some kind of throttle but you can start to drive trains with just the basic system and your PC.</p>"},{"location":"diy/00-diy/#getting-the-dcc-ex-software","title":"Getting the DCC-EX Software","text":"<p>All builds will require the DCC-EX software to be configured and loaded onto the Arduino processor from your PC. This is best done using the EX-Installer</p>"},{"location":"diy/00-diy/#quick-and-easy-arduino-mega","title":"Quick and Easy Arduino Mega","text":"<p>If you build our standard Mega-based Command station and use our EX-MotorShield8874  and, optionally, the EX-WiFiShield8266 which have been specifically designed to meet our requirements, then you will be up and running quickly. Easy Build Instructions</p>"},{"location":"diy/00-diy/#slightly-more-difficult-mega","title":"Slightly more difficult Mega","text":"<p>Using other supported motor or WiFi shields requires a slightly more complex setup.</p> <p>You will eventually require a multimeter, a soldering iron, and a variety of dupont wires or similar and you will probably collect a bucket-load of connectors, adapters, and gizmos that you thought might be useful but don't have time to try.</p> <p>In fact, TIME is the thing you will need most, and time spent building your command station is just too easy an excuse for not building your layout!</p> <p>The following documentation pages can only take you through the basics and should you contact us for support it is well to remember that we do this for fun, we don't get paid, and we don't all have access to the same weird but cheap gizmo you found on the web with an instruction sheet in Klingon.</p> <p>Apart from that... it's great fun!</p>"},{"location":"diy/10-power/","title":"Selecting a power supply","text":"<p>You will require a power supply unit to provide track power and to run the Command Station processor.</p>"},{"location":"diy/10-power/#volts-and-amps","title":"Volts and Amps","text":"<p>The volt and current requirements for your track vary according to the scale of your locos and the number you expect to run simultaneously.</p> <p>These recommendations are generalised, and you must check to make sure they don't exceed your loco and DCC decoder manufacturer's recommendations.</p> Scale Recommended Voltage (DC) Minimum Current (Amps) Notes Z (1:220) 10\u201312V 2A Lower voltage protects tiny motors; avoid exceeding 12V. N (1:160) 12V 3A Most decoders rated for 12V max; higher voltages increase brush wear. TT (1:120) 12\u201314V 3\u20134A Slightly more headroom than N scale. HO (1:87) 14\u201315V 4\u20135A Common sweet spot for DCC; 15V is typical for DCC-EX setups. OO (1:76) 15V 4\u20135A Similar to HO; check decoder specs. S (1:64) 15\u201316V 5A Larger motors can handle more voltage. O (1:48) 16\u201318V 5\u20136A Ensure decoder supports higher voltage; some cap at 18V. G (1:22.5) 18\u201322V 6A+ Outdoor locos often need more torque and current."},{"location":"diy/10-power/#using-an-ex8874-or-csb1","title":"Using an EX8874 or CSB1","text":"<p>The EX8874 (which is also built in to the CSB1) provides power for both the track and the Command Station. There is almost zero voltage drop between the power supply and the track.</p> <p>We strongly advise purchasing a suitable power supply at the same time as the CSB or EX8874 from a vendor who understands your requirements.</p>"},{"location":"diy/10-power/#other-motor-shields","title":"Other motor shields","text":"<p>Should you have the temerity to choose a motor-shield other than the EX8874:</p> <ul> <li>you must allow for the voltage drop within your chosen shield.</li> <li>you must provide separate power for the Command Station processor, most easily via the USB socket. A standard phone charger, or a connection to a computer, will be adequate. Other options are significantly more complex.</li> <li>you may not be protected from reverse-polarity mistakes.</li> </ul>"},{"location":"diy/10-power/#what-to-look-for","title":"What to look for","text":"<p>Typically, retired or replacement laptop power supply bricks are suitable and readily available. You need to check their markings:</p> <ul> <li>Volts and Amps suitable for your trains and layout (see above)</li> <li>Double square safety markings.</li> <li>Plug polarity indicator, center positive.</li> </ul>"},{"location":"diy/10-power/#safety-warning","title":"SAFETY WARNING","text":"<p>A Command Station is NOT a typical consumer electronics device where the user is never in contact with any bare wire of any voltage.  Your track is effectively a large bare wire that will be touched frequently.</p> <p>You MUST use a suitable, double insulated, power supply where it is not possible for a loose wire or stray flexi-track clipping from your model building to fall in and bridge the gap between mains voltage and the output.</p> <p>Should this happen, it could melt your electronics, locos or children.</p>"},{"location":"diy/20-mega-easy/","title":"Easy build - Arduino Mega","text":"<p>The instructions below detail the steps required to use an EX8874 motor shield.</p> <p>DO NOT USE ANY OTHER SHIELD TYPE WITHOUT FIRST CHECKING OUR DETAILED INSTRUCTIONS FOR THAT SHIELD.</p>"},{"location":"diy/20-mega-easy/#what-you-need","title":"What you need","text":"<p>To build a basic DIY Command Station in easy steps you will need:</p> <ul> <li>A PC or laptop (Not a Raspberry Pi) running a reasonably recent versions of Windows, Linux or macOS</li> <li>an Arduino Mega microprocessor or Elegoo clone.</li> <li>USB cable to your PC for the processor.</li> <li>an EX-MotorShield8874 to power the track.</li> <li>A double-insulated DC power supply with a voltage suitable for your layout/locos.</li> <li>(Optional) EX-WiFiShield8266 to use Wi-Fi throttles.</li> </ul>"},{"location":"diy/20-mega-easy/#step-by-step-build","title":"Step-by-Step Build","text":""},{"location":"diy/20-mega-easy/#prepare-your-mega","title":"Prepare your Mega","text":"<ol> <li> <p>Use sticky tape or similar to cover up the barrel connector on the Mega. (Power to the processor will be provided by the EX8874 shield and you don't want accidents.)</p> </li> <li> <p>Use sticky tape or similar to cover the top of the USB connector on the mega. This prevents any accidental contact with the underside of the motor shield. </p> </li> <li> <p>Mount your Mega on 3d printed tray, a piece of plastic card or wood to make sure that the underside solder points are insulated. Placing your Command Station down on a tool, coin or even your track can short the pins and, in some cases, damage the board.</p> </li> </ol>"},{"location":"diy/20-mega-easy/#mount-the-ex8874-shield","title":"Mount the EX8874 shield","text":"<p>DO NOT USE ANY OTHER SHIELD TYPE WITHOUT FIRST CHECKING OUR DETAILED INSTRUCTIONS FOR THAT SHIELD.</p> <ol> <li>Make sure the pins are straight.</li> <li>Line up the shield with the connectors at the same end as the mega and carefully insert the pins. This is easiest if you insert one side slightly first. Don\u2019t force anything, there will be a visible gap  between the bottom of the motor board and the top of the headers.</li> </ol> <p>Check your work. Look under and through where the boards connect, make sure no pins missed the holes and got bent so that they run along the outside of the headers.</p> <p> </p>"},{"location":"diy/20-mega-easy/#optionally-install-wifishield","title":"Optionally Install WiFiShield","text":"<ol> <li>Prepare your EX-WiFiShield8266 by removing the two jumpers, see picture. </li> <li>Mount the Wi-Fi shield on the EX8874 noting the correct orientation in the pictures and there will be 2 pins on either side which are deliberately missing.</li> <li>Use a male-female Dupont wire (normally supplied with the shield) to connect to any one of the row of Tx pins on the Wi-Fi Board, and connect the other end to the Rx1 pin on the mega (pin 19). See photo below.</li> <li>Take a second jumper wire and connect it to any one of the row of Rx pins on the Wi-Fi Board and connect the other end to Tx1 on the mega (pin 18).</li> <li>Use a small piece of sticky tape or similar to keep the Dupont wires firmly in place in the mega header sockets. They are easily knocked out.  </li> </ol>"},{"location":"diy/20-mega-easy/#connect-your-power-supply","title":"Connect your power supply","text":"<p>We recommend you label the power supply so that it does not get confused with others of different voltages you may use later. Plug in to the barrel connector on the EX8874 shield (NOT the Mega).</p>"},{"location":"diy/20-mega-easy/#connect-to-your-pc","title":"Connect to your PC","text":"<p>Using a suitable USB cable (must carry Data and Power, not all cables do this!) connect the Mega USB to your PC.</p>"},{"location":"diy/20-mega-easy/#connect-your-track","title":"Connect your track","text":"<p>The EX8874 track connectors unplug for easy access.     If you only have one piece of track for testing, wire it to the PROG track plug.</p> <ol> <li>Your PROG track is wired to the green socket closest to the power barrel connector.</li> <li>The MAIN track is wired to the far connector.</li> </ol> <p></p>"},{"location":"diy/20-mega-easy/#load-the-software","title":"Load the software","text":"<p>Congratulations, you have built a DIY command station the easy way. But you still have to load the software.</p> <p>For simplicity, software loading is best done with the EX-Installer</p>"},{"location":"diy/21-mega-harder/","title":"Alternative build - Arduino Mega","text":"<p>These instructions assume a slightly more competent user who has made the decision to trade simplicity for price. It is assumed that you are comfortable modifying devices, maybe soldering etc. and are not going to make costly mistakes such as mixing up the power supplies or putting the processor board down on something that will short the underside of the pins.</p> <p>There are a limited number of suitable motor or WiFi shields available and each has its own quirks.</p>"},{"location":"diy/21-mega-harder/#what-you-need","title":"What you need","text":"<p>To build a basic DIY Command Station you will need:</p> <ul> <li>A PC or laptop (Not A Raspberry Pi) running a reasonably recent versions of Windows, Linux or MacOS</li> <li>an Arduino Mega microprocessor running our free Open Source software</li> <li>USB cable to your PC for the processor.</li> <li>an Arduino standard (or others as noted in details) motor-shield to power the track.</li> <li>A double-insulated DC power supply with a voltage suitable for your layout/locos.</li> <li>An additional double-insulated DC Power supply of 5 to 8 volts suitable to drive the Arduino logic. (This may also be fed through the USB cable, and old phone charger is suitable or if you intend to use JMRI your computer will supply this power.)</li> <li>Optionally<ul> <li>a female barrel connector to match the plug on your chosen track power supply</li> <li>a suitable WiFi shield to use WiFi throttles (Recommended) with 2 suitable M-F Dupont wires.</li> <li>OR an Ethernet Shield</li> </ul> </li> </ul>"},{"location":"diy/21-mega-harder/#step-by-step-build","title":"Step By Step Build","text":""},{"location":"diy/21-mega-harder/#prepare-your-mega","title":"Prepare your Mega","text":"<ul> <li>Use sticky tape or similar to cover the top of the USB connector on the mega. This prevents any accidental contact with the underside of the motor shield.  </li> </ul>"},{"location":"diy/21-mega-harder/#optionally-mount-your-ethernet-shield","title":"Optionally mount your Ethernet Shield","text":"<p>Note, you can't have Ethernet and WiFi running on the same command station, but you can install both shields and choose one or the other when installing the software. See Ethernet Install</p>"},{"location":"diy/21-mega-harder/#prepare-your-motor-shield","title":"Prepare your motor shield","text":"<p>FAILURE TO DO THIS CAN DESTROY YOUR MEGA.</p> <p></p> <ol> <li> <p>Unless you are using an EX8874 shield, you MUST prevent the shield from feeding track voltage into your Mega. This is done by cutting the VIN trace and/or removing the pin that feeds the Mega.</p> </li> <li> <p>Ensure shield pins are straight and correctly aligned.</p> </li> </ol>"},{"location":"diy/21-mega-harder/#mount-the-motor-shield","title":"Mount the motor shield","text":"<p>Align the motor shield so that the power connectors are at the same end as the Mega power/USB connectors. It is normal for you to see a few millimetres of the pins between the bottom of the motor board and the top of the headers.</p>"},{"location":"diy/21-mega-harder/#connect-your-track","title":"Connect your track","text":"<p> Don't skip this step if you don't yet have any track because the WiFi shield will cover the connectors.</p> <p>It's best to create fly leads with a suitable pluggable connectors for later. It makes it much easier to detach your command station from your layout when you need to fiddle with it or throw it against the wall out of sheer frustration.</p> <p>If you only have one piece of track for testing, wire it to the PROG track plug.</p> <ol> <li>The MAIN track is wired to the A channel output.</li> <li>Your PROG track is wired to the B channel output.</li> </ol>"},{"location":"diy/21-mega-harder/#connect-your-track-power-supply","title":"Connect your track power supply","text":"<p> Wire your track power supply to the input turrets of the motor shield, observing polarity. It is best to create short wire with a female barrel connector.</p>"},{"location":"diy/21-mega-harder/#optionally-install-a-wifi-shield","title":"Optionally install a WiFi Shield","text":"<p>See WiFi Install</p>"},{"location":"diy/21-mega-harder/#load-the-software","title":"Load the software","text":"<p>Software loading is best done with the EX-Installer</p>"},{"location":"diy/30-nucleo/","title":"Complex Build - Nucleo","text":"<p>Reasons to consider the supported Nucleo-F4 boards</p> <ul> <li> <p>Nucleo-144 can have up to 8 districts.   - DCC signals are in sync, as is the case for all of the DCC-EX command stations.   - DC signals can be in sync, which makes Nucleo-144 the better choice if you want 8 DC mode districts.</p> </li> <li> <p>Nucleo-144 - Ethernet is onboard/included with F429ZI and F439ZI   \u00a0 \u00a0 \u00a0 \u00a0 hint:  minimal cost difference; you may find it useful.  </p> </li> <li> <p>Nucleo boards are quality products.   - Pricing is best when purchased from st.com or one of their distributors:   \u00a0 \u00a0 Digikey, Farnell, Mouser</p> </li> <li> <p>Nucleo-64   Why would someone go this route vs. Nucleo-144 or CSB1/ESP32-WROOM?   - More pins than ESP32   - More memory than Mega   - F411RE could be used as EX-IOExpander   - Already have EX8874 and WiFi shield and/or want the smaller size</p> </li> </ul>"},{"location":"diy/30-nucleo/#nucleo-f4-boards-supported","title":"Nucleo-F4 boards supported","text":"<ul> <li> <p>Nucleo-144   F429ZI / F439ZI - Ethernet included   F446ZE   F413ZH</p> </li> <li> <p>Nucleo-64   F411RE   F446RE</p> </li> <li> <p>Other notes   - The three Nucleo-144 boards' pin locations are quite consistent with each other.   - Nucleo-144 boards have the Zio headers installed - headers (top) and pins (bottom).   \u00a0 \u00a0 Morpho headers will require installation/soldering, if you want to use them.    - Nucleo-64 boards' pin locations are less consistent.  If you are aware, it should not be an issue.   - Nucleo-64 boards have Arduino headers (top) and Morpho pins (top and bottom) installed.  </p> </li> </ul>"},{"location":"diy/30-nucleo/#reference-nucleo","title":"Reference - Nucleo","text":"<ul> <li> <p>Nucleo information</p> </li> <li> <p>Legacy Nucleo documentation</p> </li> </ul>"},{"location":"diy/40-esp32/","title":"Complex Build - ESP32","text":"<p>ESP32-WROOM-32 was selected as the microprocessor for the EX-CSB1. \u00a0Although folks are encouraged to use the EX-CSB1, this information should assist in building an ESP32-based DCC-EX command station.</p> <p> </p> <ul> <li> <p>Caution:\u00a0 Other ESP32 modules (S2, S3, C3 etc.) are NOT supported. \u00a0Other ESP32 modules do not have the necessary RMT hardware, or do not have enough such hardware to run DCC-EX.</p> </li> <li> <p>ESP32-WROOM-32 advantages   - Built-in WiFi   - Memory   - Sniffer/Booster capable (with additional optocoupler circuit)  </p> </li> <li> <p>ESP32-WROOM-32 is more complex than using the Arduino Mega   - GPIO pin numbers are used (vs. Arduino style pin location numbers)   - ESP32 pins are not 5V tolerant   - I2C bus is 3.3V   - Soldering is required to modify the WeMos D1 R32/ESPDUINO-32 board   - Modifications are required for motor shields to protect ADC input pins   - ADC input range begins at 0.15V   - ESP32 Espressif boards package version 2.0.17 is required</p> </li> </ul>"},{"location":"diy/40-esp32/#ex-commandstation-esp32-wroom-32","title":"EX-CommandStation - ESP32-WROOM-32","text":"<ul> <li>ESP32-WROOM-32 is the only ESP32 which can presently be used to run EX-CommandStation software.   ESP32-WROOM-32 is the only ESP32 which can presently be used to run EX-CommandStation software.</li> </ul>"},{"location":"diy/40-esp32/#wemos-d1-r32","title":"WeMos D1 R32","text":"<ul> <li> <p>WeMos D1 R32/ESPDUINO-32 has the Uno form factor.</p> </li> <li> <p>WeMos D1 R32 boards have some obvious hardware errors:   - Pullup voltage to the IO0 pin is too high (4.2v instead of 3.3-3.8v) which leads to unreliable WiFi.   - IOREF pin does not output 3v3, but instead breaches the UNO R3 specification and outputs 5V.   - A0 and A1 pins cannot be used for ADC input when WiFi is used.</p> </li> <li> <p>There are other ESP32-WROOM-32 boards with the Uno form factor which might work, but these will require a custom motor define when there are differences in GPIO pin locations.</p> </li> </ul>"},{"location":"diy/40-esp32/#esp32-wroom-32-development-boards","title":"ESP32-WROOM-32 Development boards","text":"<ul> <li> <p>ESP32-WROOM-32 Development boards come in various sizes and pin configurations.</p> </li> <li> <p>38-pin and 30-pin boards are common.</p> </li> <li> <p>Only the ESP32-WROOM-32 variants can be used.</p> </li> </ul>"},{"location":"diy/40-esp32/#reference-esp32","title":"Reference ESP32","text":"<ul> <li> <p>Assembly and other information: \u00a0Reference - ESP32</p> </li> <li> <p>Legacy ESP32 documentation</p> </li> </ul>"},{"location":"diy/50-wifi/","title":"Optionally install Wifi","text":"<p>This page does not apply to CSB1 or other ESP32-based command stations which have Wi-Fi built in.</p> <p>If you intend to use an ESP-01 development board, please skip to ESP01</p>"},{"location":"diy/50-wifi/#ex-wifishield8266","title":"EX-WiFiShield8266","text":"<p> We recommend you purchase an EX-WiFiShield8266 (a joint venture with Makerfabs) which has been designed to make the installation easy.</p> <p>You can find installation instructions here WiFiShield8266 install</p>"},{"location":"diy/50-wifi/#other-shields","title":"Other shields","text":"<p>Most other Arduino ESP8266 Wi-Fi shields, including the dodgy ones with \"Shiald\" and \"Arbuino\" spelling mistakes, will work well with a DCC-EX command station but must be modified slightly to bypass the useless design based on UNOs with one user and no USB connection. They are frequently shipped with firmware versions that do not work well with DCC-EX (latest is not always best!) and it's non-trivial to rectify this.</p> <p>In addition, the shield size overlaps the standard Arduino motor-shield terminal blocks which is a pain if you failed to follow the Command Station build suggestions at the time.</p> <ol> <li> <p>Ensure that the WiFi shield is physically modified to avoid it communicating over the standard Arduino Tx/Rx Serial pins, by removing pins 0 and 1. If it has any DIP switches, set them all off.</p> </li> <li> <p>Mount the shield above the command station motor shield making sure the tab end of the WiFi shield is away from the power connector end of the motor shield.</p> </li> <li> <p>Use two male-female Dupont wires to connect the WiFi Shield to your Command Station. (Pay Attention... we get a lot of support calls from users who have not noticed that the wires cross!)</p> </li> </ol> <pre><code>- Arduino      Shield\n- Rx1  -------&gt; Tx\n- TX1  -------&gt; Rx\n</code></pre>"},{"location":"diy/50-wifi/#esp-01-or-esp-01s","title":"ESP-01 or ESP-01S","text":"<p> These devices are not recommended because there are power consumption issues that may cause random Command Station brown-out failure while attempting to connect in a low WiFi signal area.  They will probably NOT work without a non-trivial firmware update.</p> <p>The ESP-01 should be connected with dupont wires to the Command Station with wiring as follows:</p> <pre><code>- Arduino      ESP-01\n- 3.3V  -----&gt; Vcc\n- 3.3V  -----&gt; CH_PD\n- Gnd   -----&gt; Gnd\n- Tx1   -----&gt; Rx\n- Rx1   -----&gt; Tx\n</code></pre> <p>Incorrect wiring can destroy this device.</p>"},{"location":"diy/51-ethernet/","title":"Optionally install Ethernet","text":"<p>The standard Ethernet shields must be first in the stack as they use pins that are not passed through the headers of the motor shield. Look underneath the shield and this will become obvious. The shields also cause issues with their height, shields above may not sit level (but will still work) unless you introduce an extra row of header extenders.</p>"},{"location":"diy/51-ethernet/#arduino-network-shield-2","title":"Arduino Network Shield 2","text":"<p> There have been different revisions for the Arduino Network Shields, the main difference is the version of the WiFi chip on the board. The \u201c2\u201d board uses the Wiznet W5500, other versions used the older W5100 chip. The only supported chip currently is the W5500, but the other boards may work as well. The W5500 can handle 8 simultaneous socket connections while the W5100 can only handle 4.</p> <p>This board also has an SDCard capability but it can't be used in the  EX\u2011CommandStation due to timing limitations.</p>"},{"location":"diy/51-ethernet/#wiznet-wiz850io","title":"Wiznet WIZ850IO","text":"<p> This is a micro Ethernet board no bigger than the RJ45 connector it is attached to. You have to wire this with jumpers or solder it to a prototyping PCB.</p>"},{"location":"diy/51-ethernet/#sunfounder-ethernet-shield","title":"Sunfounder Ethernet Shield","text":"<p> This board is tested and works. It is less expensive than the Arduino brand-name board and based on the Wiznet W5100 instead of the W5500.</p>"},{"location":"diy/80-installer/","title":"Installing Command Station firmware","text":"<p>Your command station cannot operate without the appropriate firmware which must be configured in advance to suit the hardware target.</p> <p>Once your initial Command Station build is operating, you will almost certainly wish to make use of additional features such as defining turnouts, rosters, signals, routes, animations and other varied accessories. In each case, we make it as simple as possible but you do need to use the appropriate tools to re-install the firmware to incorporate your changes.</p> <p>The EX-Installer guides you through the process.</p>"},{"location":"diy/90-others/","title":"DIY - Other devices","text":"<p>We are unable to support you self building with devices other than those described in the earlier pages. In some cases we do know about devices that simply don't work or have so little market penetration that it is not worth the considerable effort required to develop, test and maintain software for them.</p> <p>DCC-EX is not a simple Arduino program, it requires precise access to the internals of each processor type. This means development time is taken and support issues rise whenever we take on a new processor.</p> <p>We are unable to rely on third party libraries which are generally designed to be the only thing on your Arduino and do not play well in such a demanding scenario.</p>"},{"location":"diy/90-others/#the-following-devices-are-not-supported","title":"The following devices are NOT supported:","text":"<ul> <li>Arduino UNO and Nano. We have supported them in the past but the increase in Command Station features has oustripped their miniscule memory capabilities.</li> <li>Mega Wifi. Some users have had success with this but we have had approximately 50% failure rate on these devices. Its just not worth it. </li> <li>Arduino Giga. This has a very high cost and some strange WiFi limitations.</li> <li>Teensy (various models). These have been made to work in the past but without help we are unable to update or support them.</li> <li>ESP32. There are dozens of ESP32 versions and the vast majority of them will not be able to run DCC-EX. We can only support the explicitly recommended version.</li> <li>UNO R4 WiFi. Useless and expensive.</li> <li>Nano Every.  Not enough FLASH memory.</li> <li> <p>Pi Pico.  Lack of demand and awkward form factor for shields.</p> </li> <li> <p>Motor shields other than those recommended.</p> </li> </ul> <p>Many of these require modification or simply do not provide the features we need. Even the Arduino standard motor shield (which we do support) is not capable of the full range of the newer DCC-EX functions and requires physical modification to avoid melting your processor.</p>"},{"location":"installer/00-overview/","title":"Using EX-Installer","text":"<p>We highly recommend using EX-Installer to configure and install EX-CommandStation, EX-IOExpander, and EX-Turntable.</p> <p>It is aimed to be easy to use, and also supports getting help and support by providing the mechanism to obtain log files and monitor your device which is necessary to provide sufficient information to get help.</p>"},{"location":"installer/00-overview/#installing","title":"Installing","text":"<p>This needs to outline the steps to install EX-Installer.</p>"},{"location":"installer/00-overview/#using-device-monitor","title":"Using Device Monitor","text":"<p>Instructions on using Device Monitor.</p> <p>Testing a link to dcc-ex.com</p> <p>Test an internal link to EX-IOExpander</p>"},{"location":"installer/01-installer/","title":"EX-Installer","text":"<p>With the exception of a Command Station Booster1 Express CSB1 used solely as shipped with no accessories or options, you will need to download and install software to your Command Station or other DCC-EX products.</p> <p>This is managed by EX-Installer which is responsible for obtaining the relevant software and libraries, merging your custom configurations and mind-bending automations, locating the USB connection to your device,  compiling and downloading the result and showing the serial log from your device if required.</p> <p>Since every layout is essentially a prototype, and there are a huge variety of hardware build combinations, it is not possible to download a pre-built firmware package from the web.</p>"},{"location":"installer/01-installer/#warning-antivirus-software","title":"Warning Antivirus Software","text":"<p>You may need to turn off your antivirus software before you try to install, or you may be prompted to trust this executable.</p> <p>Sometimes our software gets blocked by antivirus applications. If you see any errors on the installation screen, this is usually the issue.</p>"},{"location":"installer/01-installer/#download-ex-installer","title":"Download EX-Installer","text":"<p>Windows x64 macOS Linux x64</p> <p>NOTE: There is no support for EX-Installer on Windows 7, nor 32-bit operating systems such as Windows x32 or RaspberryPi OS.</p>"},{"location":"installer/01-installer/#alternatives-to-the-ex-installer","title":"Alternatives to the EX-Installer","text":"<p>Experienced programmers or those wishing to develop new features or products will generally find VSCode/PlatformIO a more powerful and familiar option.</p> <p>Methods involving downloading zip files have caused  support issues in the past, are troublesome and not recommended.</p> <p>Use of the Arduino IDE is discouraged and not covered in this documentation as it has far less functionality than VSCode and has limitations with respect to compiler and library options.</p>"},{"location":"installer/02-first-run/","title":"First Run installer","text":"<p>You will be presented with the Welcome screen\u2026</p> <p></p> <p>This screen provides some basic information about the process of loading the Software. The font may be very small on a high quality screen so use the \"tools sizing\" menu to find a better zoom factor. </p> <p>To proceed, click the Manage Arduino CLI button.</p> <p></p> <p>This screen allows you to install or update the Arduino Command Line Interface (CLI).</p> <p>We use the Arduino Command Line Interface (CLI) to upload the DCC-EX products to your Arduino. The CLI eliminates the need to install the more daunting Arduino IDE. EX\u2011Installer is able to manage the installation and updating of the Arduino CLI for you at the click of a button.</p> <p>If you have not installed the CLI previously you will see an 'Install Arduino CLI' button.</p> <p>If you have previously installed the CLI you will see a 'Refresh Arduino CLI' button.</p> <p>HINT:</p> <p>Expressif ESP32 is required for the EX\u2011CSB1</p> <p>If you are using an Espressif or STMicroelectronics device (including the EX\u2011CSB1, as opposed to the other CPU based Arduinos, you will need to enable support for these by selecting the appropriate additional platform option.</p> <p>NOTE:</p> <p>Enabling additional platforms that you will not be using will take more space on your hard drive and is likely to add several minutes to the installation process.</p> <p>You must have Arduino CLI installed to proceed, simply click the Install Arduino CLI button if it is showing.</p> <p>If you already have the Arduino CLI installed, it is recommended that you refresh it periodically (e.g. weekly) to ensure support for the various device details are kept up to date. To refresh the CLI, simply click the Refresh Arduino CLI button.</p> <p>Installing the CLI can take some time. Maybe grab a cup of tea or coffee, and watch magic happen!</p>"},{"location":"installer/03-select-product/","title":"Select Product to Install","text":"<p>Select which product you want to install</p> <p></p>"},{"location":"installer/04-install-cs/","title":"Installing Command Station Software","text":"<p>This assumes you have read and done the EX-Installer installation, know how to execute it and have done the CLI download and optional ESP32 steps to make sure you have the necessary build processor and run time libraries for your Command Station.</p> <p>To proceed, click the Select your device button.</p>"},{"location":"installer/04-install-cs/#device-selection","title":"Device Selection","text":"<p>A scan for devices will start automatically. Usually the installer is able to work out the details automatically.</p> <p>If you see No devices found it means that you either</p> <ul> <li>have not connected the device to the computer, connect it now then click the Scan for Devices button again</li> <li>the device was not recognised by the computer, this may be a bad USB cable or a missing USB driver. Refer to the Diagnosing Basic Problems page for assistance.</li> </ul> <p>Next select the USB port (if several) and the type of device you wish to load the EX\u2011CommandStation software onto. EX\u2011Installer will attempt to work out both of these for you, but it may need assistance.</p> <p>NOTE: For the EX\u2011CSB1 select \u2018DCC-EX EX-CSB1\u2019 from the drop-down list.</p> <p>Now press the Select Product To Install button and click on the EX\u2011CommandStation logo to proceed.</p>"},{"location":"installer/04-install-cs/#version-selection","title":"Version Selection","text":"<p>Select which version of the EX\u2011CommandStation software to load onto your hardware. If you are unsure, or unless you have been otherwise directed by the support team, we recommend you select Latest Production.</p>"},{"location":"installer/04-install-cs/#configuration","title":"Configuration","text":"<p>When loading for the first time, you should use Configure Options. Alternatively you may reuse your previous files.</p> <p>On this screen you can select some of the flexible and optional features of the EX\u2011CommandStation:</p>"},{"location":"installer/04-install-cs/#motor-driver-type","title":"Motor Driver Type","text":"<p>You must select the motor shield that you have installed. The installer can\u2019t detect this. Selecting the wrong board will not work and may damage the hardware by compromising the short-circuit protection.</p> <ul> <li>For the EX\u2011CSB1 alone select \u2018EX-CSB1\u2019 or \u2018EXCSB1_WITH_EX8874\u2019 as appropriate.</li> </ul> <p></p>"},{"location":"installer/04-install-cs/#other-options","title":"Other options","text":"<p>You should select \"Disable EEPROM support\" for most cases. </p>"},{"location":"installer/04-install-cs/#optional-lcd-or-oled-display","title":"Optional LCD or OLED display","text":"<p>The EX\u2011CSB1 will generally be supplied with an OLED 128 X 64</p> <p>If you have installed and optional OLED or LED display, enable [I have a display] option, which will present you with a drop-down list to select the type of display you have.</p> <p></p>"},{"location":"installer/04-install-cs/#optional-wi-fi","title":"Optional Wi-fi","text":"<p>If you are using a CSB1 or other board with integrated Wi-Fi, or have installed and optional Wi-Fi board you need to enable the <code>I have Wi-Fi</code>. This enables the \"Wi-fi Options\" button where you can configure the Wi-Fi.</p>"},{"location":"installer/04-install-cs/#wi-fi-access-point-mode","title":"Wi-Fi Access Point mode","text":"<p>In Access Point mode, you command station runs a completely isolated Wi-Fi Network. This is most useful if your layout is away from the house, or you transport your layout frequently, or do not want to give guests access to your home Wi-Fi. Wi-Fi phones or tablets will need to connect their Wi-Fi to the Access Point and will lose access to your home Wi-Fi.  Wi-Fi Password is optional. If this field is left blank the password will default to \u2018PASS_xxxxxx\u2019 where \u2018xxxxxx\u2019 will be the same as the SSID name that will be automatically configured. If possible, choose a channel that is unused (or least used) by other Wi-Fi networks around your location. There are numerous phone apps that can help you determine which channels are being used by other networks. For Android, \u2018Wi-fi Analyzer\u2019 is one that works. For iOS \u2018Netspot\u2019 is suitable (you don\u2019t need to purchase WiPry device they mention).</p> <p>Wi-Fi Channel can be any value from 1-11.</p>"},{"location":"installer/04-install-cs/#wi-fi-station-mode","title":"Wi-Fi Station mode","text":"<p>In Station mode, the CommandStation connects to your existing home Wi-Fi Network or other router. Phone and Tablet throttles on your home network can find the CommandStation easily.</p> <p>Wi-Fi SSID is the name of your home network.</p> <p>Wi-Fi Password is the password for your home network.</p> <p>Additionally, if you choose, you may customise the Wi-Fi hostname, or leave it as the default \u201cdccex\u201d which is easily found by throttles. </p>"},{"location":"installer/04-install-cs/#optional-ethernet","title":"Optional Ethernet","text":"<p>If you have installed and Ethernet board, select this option.</p> <p>Note that it is not possible to have both Wi-Fi and Ethernet enabled at the same time.</p>"},{"location":"installer/04-install-cs/#start-with-power-on","title":"Start With Power On","text":"<p>The EX\u2011CSB1 will generally be supplied with this enabled.</p> <p>If you don\u2019t enable this, you will need to turn the track power with your controller, or with TrackManger automations.</p>"},{"location":"installer/04-install-cs/#override-current-limit-advanced","title":"Override Current Limit (Advanced)","text":"<p>Do not select without Engineer level knowledge.</p>"},{"location":"installer/04-install-cs/#set-track-modes-advanced","title":"Set Track Modes (Advanced)","text":"<p>The default has Track A and DCC MAIN  and Track B as a PROG track. This is an advanced option and should only be used do not need to alter this unless you are running multiple motor shields or wish to operate only in DC.</p>"},{"location":"installer/04-install-cs/#advanced-configuration-optional","title":"Advanced Configuration (Optional)","text":"<p>Skip this page when you first start. You will need it later once you start adding accessories or automations.  </p> <p>Note there is an additional option Create myAutomation.h that allows a blank myAutomation.h file to be created, which you can edit on the following Advanced Config screen. Leaving this option disabled means a myAutomation.h file will not be generated if it is not required, which saves memory on your EX\u2011CommandStation device.</p>"},{"location":"installer/04-install-cs/#compile-and-load","title":"Compile and Load","text":"<p>This proceeds to compile your configuration in with the base code and load it into the Command Station Arduino processor.</p> <p>There may be errors compiling (usually due to a mistake in the advanced configuration or myAutomation.h) and this will prevent the load stage from taking place.</p> <p></p> <p>Errors during the load stage are almost invariably caused by problems communicating with the Arduino, possibly by incorrect selection of the type or by having another program, such as JMRI or EX-Webthrottle still using the USB connection.</p>"},{"location":"installer/04-install-cs/#backup","title":"Backup","text":"<p>After loading the software onto your device, you can optionally copy the generated configuration files to a folder of your choice as a backup by clicking the Backup config files button. You will be prompted to select a folder, and if the chosen folder already contains config files, you can overwrite these, or you can select an alternative location.</p>"},{"location":"installer/04-install-cs/#device-monitor","title":"Device Monitor","text":"<p>Once you have selected a device in EX\u2011Installer on the \u201cSelect your device\u201d screen, or after successfully loading software onto your device, a View device monitor button will be available.</p> <p>When clicking this button, the EX-Installer Device Monitor window will open, allowing you to interact with your device by sending commands and viewing the serial console output.</p> <p> For further details on using EX-Installer Device Monitor, continue on to the next page with the \u2018Next\u2019 button, or go straight to Using the EX-Installer Device Monitor.</p> <p>Next Steps - Test your setup\uf0c1</p> <p>IMPORTANT</p> <p>The programming track is for programming only. Make sure you are on the main track if you expect your loco to move or respond to light or sound commands.</p> <p>See the Testing your installation page or click the \u2018Next\u2019 button to learn how to test and use your EX\u2011CommandStation.</p>"},{"location":"installer/04-install-cs/#stored-configuration-files","title":"Stored Configuration Files","text":"<p>Click the Browse button and navigate through your computer\u2019s folders and files to select any file in the folder containing your existing configuration.</p> <p>On this screen you can edit the configuration files. If you have more than two files to edit, they will be separated into tabs as shown in the second figure above.</p> <p>NOTE: If you did not enable any options requiring myAutomation.h, and did not enable Create myAutomation.h, you will only be able to edit config.h on this screen.</p> <p></p>"},{"location":"installer/05-platformio/","title":"Advanced Users - VSCode/PlatformIO","text":"<p>TODO - provide setup help.</p>"},{"location":"installer/download-linux/","title":"Download linux","text":""},{"location":"installer/download-linux/#download-and-install-on-linux","title":"Download and install on Linux","text":"<p>TODO - Add screenshots &amp; fix page flow</p> <p>Download from here Linux x64</p> <p>Right-click on the file, go to Properties, then the Permissions tab, and check \u201cAllow executing file as program\u201d</p> <p>Open a terminal window and navigate to that folder</p> <p>Run the installer with the following command:</p> <pre><code>./EX-Installer-Linux64\n</code></pre>"},{"location":"installer/download-mac/","title":"Download mac","text":""},{"location":"installer/download-mac/#download-and-install-on-macos","title":"Download and install on MacOS","text":"<p>Download from here macOS</p> <p>Open a terminal window and navigate to the that folder that you downloaded the file to. e.g.:</p> <pre><code>cd Downloads\n</code></pre> <p>Enter the following command to tell the OS that it is an executable:</p> <pre><code>chmod +x EX-Installer-macOS\n</code></pre> <p>Run the installer with the following command:</p> <pre><code>./EX-Installer-macOS\n</code></pre> <p>On later macOS versions, go to Privacy &amp; Security in System Settings, and scroll down to Allow applicaitons downloaded from \"App Store and identified developers\" and then when EX-Installer is blocked, click \"Allow Anyway\"</p> <p></p>"},{"location":"installer/download-win/","title":"Download win","text":""},{"location":"installer/download-win/#download-and-install-on-windows","title":"Download and install on Windows","text":"<ul> <li>Download from here Windows x64</li> <li>Open the downloads folder where your browser has saved the EX-Installer-Win64.exe and execute it.</li> </ul> <p>NOTE: Depending on the configuration of your computer the \u2018.exe\u2019 may or may not appear. This is not of concern.</p> <p>If your browser shows a warning like </p> <p> </p> <p>you will need to select the \"...\" and select \"Keep\". On the next dialog </p> <p> </p> <p>Select \"Show more\" and \"Keep Anyway\".</p> <p>You should see </p> <p></p> <p>and you can now select \"Open file\" to run the installer.</p>"},{"location":"news/","title":"DCC-EX News","text":""},{"location":"news/#get-this-in-your-rss-feed","title":"Get this in your RSS feed","text":"<p>Notes on how to get the RSS feed here when figured out.</p>"},{"location":"news/2025/06/new-documentation/","title":"New Documentation","text":"<p>We have new documentation!</p> <p>We've changed our documentation.</p> <p>Need to highlight reclassification of products.</p> <p>Need to link to legacy docs.</p>"},{"location":"products/00-products/","title":"DCC-EX Product Overview","text":"<p>The DCC-EX team has designed and released various different open source products aimed at making model trains accessible to more people.</p> <p>This page briefly outlines each of our products, the experience level you need to be able to use them, and links to more information.</p>"},{"location":"products/00-products/#conductor-level","title":"Conductor Level","text":"<p>These are our easy to use, get up and running quickly type products. You don't need to pick up a soldering iron or write any software, just plug them in and go!</p> <p>NOTE: You may need to install some software on your computer to take advantage of some of these, but our documentation will walk you through that process.</p> <p></p>"},{"location":"products/00-products/#ex-commandstation-booster-1-express","title":"EX-CommandStation Booster 1 Express","text":"<p>A ready-to-run, all in one Command Station and Booster with built-in WiFi preloaded with our flagship train control, layout animation and automation software. </p> <p>For more information on this and how to purchase, head over to the EX-CSB1 product page</p> <p>You can learn more about the software in the EX-CommandStation documentation.</p>"},{"location":"products/00-products/#ex-webthrottle","title":"EX-WebThrottle","text":"<p>This is the easiest way to validate you've connected your command station correctly to your track. Just load it up in your Chromium based web browser (Edge, Chrome, Opera) after connecting your command station to your computer and you can run your trains with it.</p> <p>To access it, refer to the EX-WebThrottle documentation.</p>"},{"location":"products/00-products/#ex-toolbox","title":"EX-Toolbox","text":"<p>For Android phone users, this is an extremely useful tool to help with configuring various aspects of your trains, command station, and accessories.</p> <p>You can download it here </p> <p>TODO ... Refer to the EX-Toolbox documentation for how to install and use it.</p>"},{"location":"products/00-products/#tinkerer-level","title":"Tinkerer level","text":"<p>These products are more involved to get up and running, and aren't just plug in and go.</p> <p>You will need to perform some assembly and configure and install some software to take advantage of these ones, but you won't need to solder anything.</p> <p></p>"},{"location":"products/00-products/#ex-commandstation-recommended-self-build-option-diy","title":"EX-CommandStation Recommended Self Build Option (DIY)","text":"<p>A supported DIY stack for EX-CommandStation using an Arduino Mega + EX-MotorShield8874 (or Arduino R3 Motor Shield) + EX-WiFiShield8266 (optional).</p> <p>If you want to build it yourself, this is our recommended setup which simply requires some assembly and software installation with no advanced modifications required.</p> <p>Refer to the Easy build Arduino Mega page for information on what to buy and how to assemble.</p>"},{"location":"products/00-products/#ex-motorshield8874","title":"EX-MotorShield8874","text":"<p>A dual channel, 5 amp (per channel) motor shield designed specifically for DCC-EX in an Arduino shield format.</p> <p>Assembly is required to add this to an Arduino Mega along with software configuration.</p> <p>Refer to the EX-MotorShield8874 page for more information.</p>"},{"location":"products/00-products/#ex-wifishield8266","title":"EX-WiFiShield8266","text":"<p>A WiFi shield designed specifically for DCC-EX in an Arduino shield format.</p> <p>Assembly is required to add this to an Arduino Mega along with software configuration.</p> <p>Refer to the EX-WiFiShield8266 page for more information.</p>"},{"location":"products/00-products/#engineer-level","title":"Engineer level","text":"<p>These products are far more involved and complicated to get up and running.</p> <p>This products go beyond simple assembly and you will need a good understanding of configuring software and hardware, including soldering components and making some modifications to existing hardware devices.</p> <p>If you are new to DCC-EX and/or electronics in general, we do not recommend you try to tackle any of these products until you have become familiar with how our products work.</p>"},{"location":"products/00-products/#ex-commandstation-advanced-self-build-diy","title":"EX-CommandStation Advanced Self Build (DIY)","text":"<p>A more complex DIY stack for EX-CommandStation using Espressif ESP32 or STMicroelectronics Nucleo microcontrollers. Some modifications may be required depending on the device chosen, and there are various nuances to be aware of when assembling and configuring these DIY options.</p> <p>You will need to need to be careful when configuring and installing software on these devices also.</p> <p>Refer to the EX-CommandStation DIY Pages for information on what options are available and supported.</p>"},{"location":"products/00-products/#ex-fastclock","title":"EX-FastClock","text":"<p>An integrated fast clock for your layout.</p> <p>While it's possible to get up and running with this fairly easily, there is still some software configuration and installation to be performed which makes this a little more complicated.</p> <p>Refer to the EX-FastClock documentation for how to get up and running.</p>"},{"location":"products/00-products/#ex-turntable","title":"EX-Turntable","text":"<p>An integrated turntable/traverser controller using a stepper motor.</p> <p>The software and integration side of EX-Turntable is reasonably straight forward, however the mechanics of getting a turntable operational with a stepper motor and the required sensors to control the location of the turntable accurately is quite involved.</p> <p>Refer to the EX-Turntable documentation for what's required and how to get up and running.</p>"},{"location":"products/00-products/#ex-dccinspector","title":"EX-DCCInspector","text":"<p>A diagnostic tool to inspect DCC packets.</p> <p>This requires some assembly and soldering to get up and running, and you will need to understand various aspects of the DCC protocol to get the most out of it.</p> <p>Refer to the EX-DCCInspector documentation for more information.</p>"},{"location":"products/00-products/#ex-ioexpander","title":"EX-IOExpander","text":"<p>Driven by a shortage of I2C connected I/O expansion devices, EX-IOExpander allows you to use various Arduino devices to expand the I/O capabilities of your command station.</p> <p>However, this does mean you will need to understand I2C connectivity and will likely need some more complex assembly and/or soldering to use this on your layout.</p> <p>Refer to the EX-IOExpander documentation for more information.</p>"},{"location":"products/01-getting-started/","title":"Getting Started with DCC-EX","text":"<p>If you are just starting here for the first time, it's more than likely you are interested in the possibility of using a DCC-EX Command Station to run some trains.</p> <p>A Command Station is the electronic device that translates throttle commands, such as telling a loco to move, into electronic signals sent on the track to the loco. </p> <p>These signals are usually DCC  (Digital Command Control) which allows commands that control multiple locos on the same piece of track.</p> <p>However, the DCC-EX Command Station is also capable of running DC (Direct Current) locos as there are millions of them still in use.</p> <p>You have the option to buy a DCC-EX Command station ready-to-run or build it yourself from cheaper parts.</p> <p>You will probably want to install a throttle on your phone/tablet. You can get the preferred Engine Driver here </p>"},{"location":"products/ex-commandstation/00-overview/","title":"The DCC-EX Command Station","text":"<p>A DCC Command Station powers your track and sends digital signals to the locos and accessories through the track. All commercial command stations do that, but we think we do it a lot better for a lot less money.</p> <p>Our primary solution is the EX-CSB1 CommandStation which provides a ready-to-run system with integrated WiFi. You can start running trains from your Android phone in a couple of minutes if you plug your track in one end and a power supply in the other.</p> <ul> <li> <p>If you want to buy a ready built command station, see Purchase a Command Station and come back here to learn about it while you are waiting for the delivery.</p> </li> <li> <p>If you want to build your own command station and are prepared to learn about Arduinos see Building your own Command station but you are advised to read the basic guidance that follows so you will have a better understanding of what you want to achieve, and what will be possible.</p> </li> <li> <p>If you already have a DCC-EX command station, read on.</p> </li> </ul> <p>To follow the basic setup process, you can use the \"next\" button seen at the bottom right of each page.</p>"},{"location":"products/ex-commandstation/01-ex-csb1/","title":"EX-CSB1 CommandStation Booster","text":"<p>This is the EX-CSB1 Getting Started Guide.</p>"},{"location":"products/ex-commandstation/01-ex-csb1/#features","title":"Features","text":"<p>The DCC-EX EX-CSB1 Command Station/Booster comes ready to use out of the box and has the following features:</p> <ul> <li>Dual DCC/PWM DC outputs with up to 5A capacity \u2013 easily expandable to 4 outputs</li> <li>Wi-Fi built-in \u2013 fast 802.11n capable, with Access Point and Station modes including support for connecting as many as 10 Wi-Fi throttles (you can also connect to JMRI via Wi-Fi, but a USB cable is often better)</li> <li>Single power supply for track and onboard electronics \u2013 12-25V DC with polarity protection</li> <li>USB-C connector \u2013 for software upload, diagnostic monitoring, DCC-EX WebThrottle and JMRI connectivity</li> <li>Railsync DCC input \u2013 enables Booster or Sniffer modes, which with an EXRAIL script can be automatically engaged on receipt of a signal</li> <li>OLED screen \u2013 for diagnostics, status and information display</li> </ul> <p></p>"},{"location":"products/ex-commandstation/01-ex-csb1/#connecting","title":"Connecting","text":"<p>The DCC-EX EX-CSB1 Command Station/Booster needs the minimum following connections to be able to run trains:</p> <ul> <li>Power input on the 2.1mm black barrel connector \u2013  accepts 10-25V DC fully regulated, preferably a modern switch-mode power brick, double-insulated with good power overload protection. Minimum current capability of 4A, suggested 12-16V for Z, N or HO/OO scales, with DCC+Sound locos generally wanting 14-16V even in N scale.</li> <li>One track connection \u2013 on either the Track Out A (topmost) or Track Out B (beside the power) connector. Note that by default, A is configured for DCC MAIN operation, and B is configured for PROG or programming track. We recommend connecting your track to the A MAIN output initially to test running of trains.</li> </ul> <p>When correctly supplied with track power, both green Power LEDs will light. If the right-most LED alone is lit, it indicates power is being supplied from the USB-C connector so software upload can proceed, but trains cannot be run.</p> <p>The Wi-Fi LED will light once a Wi-Fi network is created (Access Point mode), or once connected to an existing Wi-Fi network (Station mode.)</p> <p>Other Connectors:</p> <ul> <li>Qwiic I2C connector \u2013 allows a broad range of 3.3V I2C peripherals to be easily with simple cables.</li> <li>Railsync connector \u2013 allows connection to Railsync or a DCC track signal for Booster and Sniffer modes when enabled with suitable software configuration.</li> </ul>"},{"location":"products/ex-commandstation/05-config-h/","title":"Build configuration (config.h)","text":"<p>During compilation and build, there are a number of settings that control the way the code is constructed and important features are configured.</p> <p>Most configuration takes place in EXRAIL but some things just need setting before that.</p> <p>If you are using the EX-Installer, the important options will be automatically managed and configured. There are several more advanced options covered in the config.h advanced but these should not trouble the vast majority of users.</p> <p>These options should be coded in the file <code>config.h</code> which will be automatically included in the compilation process.</p>"},{"location":"products/ex-commandstation/05-config-h/#motor-shield-definition-mandatory","title":"Motor shield definition (Mandatory)","text":"<pre><code>#define MOTOR_SHIELD_TYPE typeName\n</code></pre> <p>The motor shield definition tells the code how many tracks your command station has and which pins are used to talk to the motor shield(s). It also describes the electrical characteristics of the current sensing and the current limits to be applied to each track.</p> <p>There are a number of pre-defined motor shield typeNames available of which the most common are:</p> <ul> <li>STANDARD_MOTOR_SHIELD : Arduino Motor shield Rev3 based on the L298 with 18V 2A per channel</li> <li>EX8874_SHIELD         : DCC-EX TI DRV8874 based motor shield</li> <li>EXCSB1                : DCC-EX CSB-1 hardware</li> <li>EXCSB1_WITH_EX8874    : DCC-EX CSB-1 hardware with DCC-EX TI DRV8874 shield</li> <li>NO_SHIELD             : CS without any motor shield (as an accessory only CS)</li> </ul> <p>Further pre-defined shield names can be found in the code file MotorDrivers.h although their presence there does not necessarily mean that we can provide support for issues.</p>"},{"location":"products/ex-commandstation/05-config-h/#wifi-settings","title":"WiFi settings","text":"<p>Ignore this if you do not have WiFi on your command station or choose to avoid it.</p> <p>WiFi has two operating modes:</p> <ul> <li>AP (Access point) means the Command station acts as its own private WiFi network so throttle devices must connect first to the Command Station Wifi network.</li> <li>STA (Station mode) means the command station connects to your WiFi router and appears as a device on that network. If the WiFI is configured for STA mode, but fails to connect to your router, it will fall back to AP mode in much the same way as smart plugs, lights etc.</li> </ul>"},{"location":"products/ex-commandstation/05-config-h/#setup-sta-station-mode","title":"Setup STA (Station) mode","text":"<pre><code>#define ENABLE_WIFI true\n#define WIFI_SSID \"deadBudgie\"\n#define WIFI_PASSWORD \"myHovvercraftIsFullOfEels\"\n</code></pre>"},{"location":"products/ex-commandstation/05-config-h/#setup-ap-access-point-default-mode","title":"Setup AP (Access Point) default mode","text":"<pre><code>#define ENABLE_WIFI true\n</code></pre> <p>The WiFi chip will first try to connect to the previously configured network and if that fails fall back to Access Point mode.</p> <p>The SSID of the AP will be automatically set to <code>DCCEX_*</code> where the <code>*</code> part is taken from an internal device number (for example <code>DCCEX_12b7c</code>) to try and avoid duplications. The password will be set to <code>PASS_*</code> where the <code>*</code> part matches the generated SSID name.</p>"},{"location":"products/ex-commandstation/05-config-h/#setup-ap-access-point-advanced-mode","title":"Setup AP (Access Point) advanced mode","text":"<pre><code>#define ENABLE_WIFI true\n#define WIFI_FORCE_AP true\n#define WIFI_SSID \"MyCSB1\"\n#define WIFI_PASSWORD \"Don't tell him Pike!\"\n#define WIFI_CHANNEL 1\n</code></pre> <p>The AP mode password must be at least 8 characters long.</p> <p>The default channel is set to \"1\". Use a phone WiFi analyser app to see which channels are relatively quiet in your area. If you need to use an alternate channel (we recommend using only 1,6, or 11) you may change it here.</p> <ul> <li>WIFI_HOSTNAME: The default is \"dccex\" but you can change this if you have more than one CS on you home router to make them show up with different names on the network. Host names starting with \"dccex\" are more readily found by WiFi throttles.</li> </ul> <pre><code>#define WIFI_HOSTNAME \"dccex-csb1\"\n</code></pre>"},{"location":"products/ex-commandstation/05-config-h/#ethernet-settings","title":"Ethernet settings","text":"<p>It is not valid to enable Ethernet and WiFi at the same time.</p> <pre><code>#define ENABLE_ETHERNET true\n</code></pre>"},{"location":"products/ex-commandstation/05-config-h/#lcdoled-support","title":"LCD/OLED support","text":"<p>The LCD feature requires an I2C enabled LCD screen using a Hitachi HD44780 controller and a commonly available PCF8574 based I2C 'backpack'. To define LCD_DRIVER for I2C address 0x27, 16 cols, 2 rows</p> <pre><code>#define LCD_DRIVER  0x27,16,2\n</code></pre> <p>For an OLED display define OLED_DRIVER [address,]width,height in pixels (address auto detected if not supplied)</p> <p>128x32 or 128x64 I2C SSD1306-based devices are supported. Use 132,64 for a SH1106-based I2C device with a 132x64 display.</p> <p>For example</p> <pre><code>#define OLED_DRIVER 132,64\n</code></pre> <p>OR</p> <pre><code>#define OLED_DRIVER 0x3c,132,64\n</code></pre> <p>Define scroll mode as 0, 1 or 2</p> <ul> <li>0 is scroll continuous (fill screen if possible),</li> <li>1 is by page (alternate between pages),</li> <li>2 is by row (move up 1 row at a time).</li> </ul> <pre><code>#define SCROLLMODE 1\n</code></pre> <p>In order to avoid wasting memory the current scroll buffer is limited to 8 lines.  Some users wishing to display additional information such as TrackManager power states have requested additional rows aware of the warning that this will take extra RAM.  if you wish to include additional rows</p> <pre><code>#define MAX_CHARACTER_ROWS 12\n</code></pre>"},{"location":"products/ex-commandstation/05-config-h/#disable-eeprom","title":"Disable EEPROM","text":"<p>The EEPROM feature is only there for backward support of deprecated methods of turnout, sensor and output creation inherited from DCC++. You are advised to turn this off to save memory.</p> <pre><code> #define DISABLE_EEPROM\n</code></pre>"},{"location":"products/ex-commandstation/05-config-h/#delayed-startup","title":"Delayed startup","text":"<p>Some newer 32bit microcontrollers boot very quickly, so powering on I2C and other peripheral devices at the same time may result in the CommandStation booting too quickly to detect them.</p> <p>To work around this, set STARTUP_DELAY to a value in milliseconds that works for your environment.</p> <pre><code> #define STARTUP_DELAY 3000\n</code></pre>"},{"location":"products/ex-commandstation/10-testing/","title":"Testing your Command Station","text":"<p>(LOTS OF TODO in this file)</p> <p>The simplest and most direct testing method is to use a serial monitor to talk directly to the USB connection of you command station. This is a fundamental aspect of the Arduino system and thus avoids issues such as wifi connections. Indeed, this is the only way to see what's going wrong if your problems are wifi related.</p>"},{"location":"products/ex-commandstation/10-testing/#serial-monitors","title":"Serial Monitors","text":"<p>There are several serial monitors available:</p> <p>Instructions on using Device Monitor.</p> <p>Testing a link to dcc-ex.com</p> <p>Test an internal link to EX-IOExpander</p> <ul> <li>Built in to the EX-Installer     ??? TODO EX INSTALLER showing serial log</li> <li>Built in to VSCode is you are using that as an IDE.</li> <li>Built in to the Arduino IDE (We do not recommend that for development)</li> <li>Built in to the EX-WebThrottle</li> <li>Built in to JMRI or other train control software. (TODO.. above provide links to individual side-pages showing how to get at the serial monitor in each case)</li> </ul> <p>Whichever you use, please ensure the baud rate is set to 115200 so that it matches that used by the command station. (Installer anf WebThrottle do this automatically)</p> <p>Its important to note that only one program on your PC can be connected to the Command Station USB. It is a common cause of error messages if you try and open a serial monitor when one of the other programs is still running.</p> <p>In most cases, connecting a serial monitor causes the Command station to restart.</p>"},{"location":"products/ex-commandstation/10-testing/#simple-testing-commands-main-track","title":"Simple testing commands (Main track)","text":"<p>Commands are entered as shown, complete with the <code>&lt; &gt;</code> markers. Case is important because <code>&lt;T</code> is a completely different command to <code>&lt;t</code></p>"},{"location":"products/ex-commandstation/10-testing/#check-communication-and-version","title":"Check communication and version","text":"<pre><code>&lt;s&gt;\n</code></pre> <p>TODO... pic</p>"},{"location":"products/ex-commandstation/10-testing/#turn-on-track-power","title":"Turn on track power","text":"<p><code>&lt;1&gt;</code> will turn on all 4 leds that lie behind the track output sockets.</p> <p><code>&lt;0&gt;</code> Will turn the tracks off.</p>"},{"location":"products/ex-commandstation/10-testing/#move-a-loco","title":"Move a loco","text":"<p>You can only drive a loco if you know the loco DCC address. For a brand new loco or decoder this is normally preset to 3. If you don't know the loco address, then you can find out using the simple programming commands</p> <p>Assuming you know the loco address is 3, the following commands may be useful:  </p> <p><code>&lt;!&gt;</code> Emergency stop all locos</p> <p><code>&lt;t 3 50 1&gt;</code>  Move loco 3 speed 50 forward.</p> <p><code>&lt;t 3 20 0&gt;</code>  Move loco 3 speed 20 reverse.</p> <p><code>&lt;t 3 0 1&gt;</code>  Stop loco 3 (decoder may stop loco realistically)</p> <p><code>&lt;t 3 -1 1&gt;</code>  Emergency Stop loco 3</p>"},{"location":"products/ex-commandstation/10-testing/#test-loco-functions","title":"Test loco functions","text":"<p><code>&lt;F 3 0 1&gt;</code>   Turn on loco 3 function 0</p> <p><code>&lt;F 3 0 0&gt;</code>   Turn off loco 3 function 0</p>"},{"location":"products/ex-commandstation/10-testing/#things-to-remember","title":"Things to remember","text":"<p>The commands <code>&lt;t</code> and <code>&lt;F</code> will normally reply with a <code>&lt;l</code> response when something about a loco is changed. This response is designed for throttles to share information and not generally for human reading.</p> <p>A response of <code>&lt;X&gt;</code> indicates the command was not understood by the command station, so check your typing as <code>&lt;T</code> and <code>&lt;f</code> are not the same as <code>&lt;t</code> and <code>&lt;F</code>.</p> <p>DCC generally has no way of knowing whether the loco exists, is listening or has dirty wheels. If you get no movement the first thing to do is check the track is clean.</p>"},{"location":"products/ex-commandstation/accessories/00-accessories/","title":"Connecting Accessories","text":"<p>Once you go beyond just wanting to run trains, and want to control turnouts, signals, and potentially automate other various parts of your layout, you will need to know how to connect accessories to your Command Station.</p> <p>This includes our other products such as EX-FastClock, EX-IOExpander, and EX-Turntable.</p>"},{"location":"products/ex-commandstation/accessories/00-accessories/#accessory-types","title":"Accessory Types","text":"<p>There are generally three ways accessories can be controlled by your Command Station:</p> <ul> <li>I2C</li> <li>Serial</li> <li>DCC accessories attached to a DCC main track output</li> </ul> <p>Throughout these pages, we will be focusing on accessories connected via I2C only.</p> <p>Most devices connected via Serial are typically throttles or controllers rather than accessories.</p> <p>When purchasing DCC accessories, you will have received a user manual for these, so follow that for instructions on how to connect them.</p>"},{"location":"products/ex-commandstation/accessories/00-accessories/#voltage-differences","title":"Voltage Differences","text":"<p>It is essential to be aware that hardware devices may operate at different voltage levels, meaning simply connecting an accessory to your Command Station may lead to damage or incorrect operation should this situation occur.</p> <p>The most common issue is connecting an accessory designed for 5V operation to a Command Station that operates at 3.3V, such as our EX-CSB1. This will cause damage!</p> <p>This voltage issue applies to both I2C and Serial connections.</p>"},{"location":"products/ex-commandstation/accessories/00-accessories/#what-is-i2c","title":"What is I2C?","text":"<p>If you want the nitty gritty of what I2C is, you can refer to the Wikipedia article, which covers more detail than we will here.</p> <p>To keep it simple and in the context of DCC-EX, I2C is a bus that allows multiple accessories or peripherals to be connected to your Command Station, utilising two signal lines/connections and a common ground connection. While power can be provided by your Command Station, it is recommended to have your accessories powered separately.</p> <p>Each I2C device must have a unique address in order to be detected and configured by the software.</p> <p>You will typically see these addresses in hexadecimal format, for example <code>0x40</code>.</p>"},{"location":"products/ex-commandstation/accessories/20-actuators/","title":"Actuators - to make stuff happen","text":"<p>Actuators are devices that you can add to make things happen under the control of the Command station. For example throwing a turnout, setting a signal or switching lights. There are basically two types of actuator that will commonly be used:</p> <ul> <li>PWM output used for Servo movement of turnouts, semaphore signals, crossing gates, fancy animations and LED fading.</li> <li>Digital output (On/Off) mostly used for LEDs, relays and some turnout types.</li> </ul> <p>Other actuator types include:</p> <ul> <li>NeoPixel output used for advanced lighting, mimic panels, signals etc.</li> <li>Sound players</li> <li>Turntable control systems</li> </ul>"},{"location":"products/ex-commandstation/accessories/20-actuators/#servo-actuators","title":"Servo actuators","text":"<p>Servo actuators generally use a PCA9685 device which can connect up to 16 Servos or LEDs over a single I2C connection. This device also acts to provide servo movement power separately from the movement control signal.</p> <p>EXRAIL is used to</p> <ul> <li>Define the PCA9685 connection and its address so that each output can be given a unique VPIN to control it.</li> <li>For turnouts define a SERVO_TURNOUT for each VPIN so that the rest of DCC-EX can throw or close this turnout without knowledge of the underlying mechanism.</li> <li>For semaphore signals, define a SERVO_SIGNAL to that the rest of DCC-EX can control the signal.</li> <li>Control animation servos directly, such as crossing gates or shed doors.</li> </ul>"},{"location":"products/ex-commandstation/accessories/20-actuators/#digital-actuators","title":"Digital actuators","text":"<p>Digital outputs are generally connected via an MCP23017 device which offers up to 16 output pins on a single I2C connection.</p> <p>EXRAIL is used to</p> <ul> <li>Define the MCP23017 connection and its address so that each output can be given a unique VPIN to control it.</li> <li>Set or reset the pin output when appropriate</li> </ul>"},{"location":"products/ex-commandstation/accessories/30-sensors/","title":"Sensors","text":"<p>Sensors become necessary when you wish to add automated control of accessories or trains, or you wish to add a control panel separate from the functions of your throttle. Each sensor device can trigger actions or be read in EXRAIL or be passed up to a PC controller such as JMRI, RocRail or iTrain.</p> <p>Sensor devices include</p> <ul> <li>Switches and buttons on a control panel</li> <li>InfraRed or ultrasonic detectors when a train crosses a point on the track</li> <li>Video camera using AI to detect train position or children's hands reaching over the layout</li> <li>Block Occupancy (or Train-on-track, TOTI) detectors that detect the current consumed by a loco decoder or resistor-fitted rolling stock when present in an isolated track block.</li> </ul> <p>EXRAIL is used to handle sensors</p> <ul> <li> <p>Describe how the sensor devices are wired to the command station (usually via I2C) and what VPIN is to be assigned to each sensor</p> </li> <li> <p>Control what happens when a sensor VPIN changes state</p> </li> </ul> <p>The most common method of connecting sensor devices to your command station is through an MCP23017 device which offers up to 14 input pins (or 16 output pins, or a mix of both) through a single I2C connection. For more inputs you can add more MCP23017 devices to the I2C chain.</p> <p>The EX-IOExpander can be used to connect multiple sensors over a single I2C connection depending on the microprocessor used to build it.</p> <p>The EX-SensorCam can be used to offer up to 80 sensor points on a single I2C connection.  </p>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/","title":"Connecting a servo turnout","text":"<p>The details below assume you are using an EX-CSB1 command station or a DIY station with an EX8874 motor shield and Wifi connection. Otherwise the steps are the same but the wiring is trickier without the Qwiic sockets and testing requires command input.</p> <p>You will need the following for up to 16 servos.</p> <ul> <li>Your Command Station with power supply and USB connection to your PC.</li> <li>Qwiic cable for connection to CSB1, with Qwiic or dupont connectors for connection to PCA9685.</li> <li>PCA9685 module</li> <li>Up to 16 SG90 servos</li> <li>EX-Installer downloaded on your PC</li> <li>(Optionally) Android phone with EX-Toolbox installed</li> <li>A servo power supply 5V 2A DC -- and not taken from the command station.</li> </ul>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#follow-the-steps-below","title":"Follow the steps below","text":"<ol> <li>Turn off power to your Command station and unplug the USB cable and power supply.</li> <li>Connect the Qwiic cable between the CSB1 or EX8874 and the PCA9685 module.  When using Mega, the I2C bus is 5V. Use the I2C headers, where 5V is available (IOREF/Vdd). </li> <li> <p>Run the EX-Installer on your PC and select the cpu type, then the Serial Monitor. You should see output similar to the following where the Command Station enumerates all the I2C devices it can find. from the startup logs using the serial monitor</p> <pre><code>&lt;* I2C Device found at 0x3C, OLED Display or HMC583L Magnetometer? *&gt;\n&lt;* I2C Device found at 0x40, PWM? *&gt;\n. . .\nand then it shows the OLED is configured\n&lt;* 132x64 OLED display configured on I2C:0x3c *&gt;\n\nsend the command: &lt;D HAL SHOW&gt; to see the vPins configured\n&lt;* Arduino Vpins:2-39 *&gt;\n&lt;* PCA9685 I2C:0x40 Configured on Vpins:100-115  *&gt;\n&lt;* PCA9685 I2C:0x41 Configured on Vpins:116-131 OFFLINE *&gt;\n&lt;* MCP23017 I2C:0x20 Configured on Vpins:164-179 OFFLINE *&gt;\n&lt;* MCP23017 I2C:0x21 Configured on Vpins:180-195 OFFLINE *&gt;\n</code></pre> </li> <li> <p>Examine the log to check that your PCA9685 has been detected and note the I2C address it found. This will typically be 0x40. If this address is 0x40 or 0x41 then the CS has defaulted this to be a PCA9685 and automatically assigned a range of 16 VPINs to represent the 16 servo outputs.</p> </li> <li>Examine the log further down and you should see where the VPINs are assigned. The following advice assumes that the address was 0x40 and the first VPIN will be 100.</li> <li>Plug a servo into the first output socket. DO NOT mechanically connect the servo arm to any turnout or animation as the servo may move unexpectedly and cause physical damage.  You will connect the servo arm after exercising the servo (step 8).</li> <li>Connect the additional servo power supply to the long-edge turrets on the PCA9685, observing the correct polarity. </li> <li>On the installers serial monitor, enter the command <code>&lt;D SERVO 100 200&gt;</code> which should move the servo. Experiment with other positions than 200. The usable range is approximately 102 to 490.  </li> <li>(Optionally) Use the EX-Toolbox Andoid app to experiment with servo angles and servo arm lengths until you have the required throw distance and angles to suit your servo mounting preferences.</li> </ol>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#define-your-turnouts","title":"Define your Turnouts","text":"<ol> <li> <p>In EX-Installer, edit myAutomation.h and define each turnout to give an id of your choice, the VPIN of the servo, the closed and open servo values you have discovered by experimentation and a suitable decription to show on your throttle.</p> <pre><code>//SERVO_TURNOUT( turnout_id, vpin, active_angle, inactive_angle, profile [, \"description\"|HIDDEN] )\nSERVO_TURNOUT(1, 100, 350, 120, Slow, \"Coal yard exit\")\nSERVO_TURNOUT(2, 101, 400, 200, Slow, \"Branch line siding\")\nSERVO_TURNOUT(3, 102, 400, 200, Slow, HIDDEN)\n</code></pre> </li> <li> <p>Reload the command station from the installer.</p> </li> </ol>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#test-your-turnout-definitions","title":"Test your turnout definitions","text":"<ol> <li>Using the serial monitor as before, enter the commands <code>&lt;T 1 T&gt;</code> to throw turnout 1, <code>&lt;T 2 C&gt;</code> to close turnout 2 and so on.</li> <li>With your Wifi throttle (Typically Engine Driver) navigate to the turnouts page where you will see the two turnouts listed. From there you can throw or close them as required.</li> </ol>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#connect-your-servos-to-turnouts","title":"Connect your servos to turnouts","text":"<p>There are many ways of mounting servos both above and below the baseboard using 3D printed mounts or a strip of plastic L shape. You will probably want to use microswitches to switch frog polarity or use more expensive frog juicers or EXRAIL driven relays.</p> <p>We recommend that whatever mechanical connection you make allows for protection of you turnout from excess servo movement.</p>"},{"location":"products/ex-commandstation/accessories/50-connecting-servo-turnout/#pca9685-configure-additional-boards","title":"PCA9685 Configure additional boards","text":"<p>The first two PCA9685 are pre-defined at addresses 0x40 and 0x41, for pins 100-115 and 116-131. Configure additional PCA9685 in myAutomation.h.</p> <pre><code>  HAL(PCA9685, 132, 16, 0x42)\n  HAL(PCA9685, 148, 16, {I2CMux_0,SubBus_4,0x43})\n</code></pre> <p>Nucleo-144 boards do not have pre-defined PCA9685 due to pin conflicts, as pins thru 116 are reserved for the microprocessor.  All PCA9685 connected to Nucleo-144 boards require configuration in myAutomation.h.</p>"},{"location":"products/ex-commandstation/accessories/60-hardware-list/","title":"Hardware device list","text":"<p>The following hardware devices, available from various sources, have support code built in to the Command Station. Some are commonly used in the electronics and Arduino market, others are specifically designed for model railway use.</p> <p>Although the devices are summarised here, you should refer to EXRAIL cookbooks for examples of how to use these, or refer to the appropriate source code, normally found in a file called IO_something.h (e.g. IO_PCA9685.h)</p> <ul> <li>ADS111x I2C-connected analogue input</li> <li>DCCAccessoryDecoder creates VPINs to drive DCC connected accessory decoders</li> <li>DFPlayer Serial connected MP3 player</li> <li>DS1307 Real time clock</li> <li>duinoNodes for DNIN8, DNIN8K and DNOU8 pin expanders</li> <li>EncoderThrottle for simple throttle driving with a rotary encoder</li> <li>EXFastclock connects to the EXFastClock product</li> <li>EXIOExpander connects to an EXIOExpander </li> <li>EXSensorCAM connects to the EXSensorCAM video sensor device</li> <li>EXTurntable connects to a  turntable device</li> <li>HALDisplay connects additional OLED or Liquid Crystal displays</li> <li>HCSR04 Ultrasonic distance measure</li> <li>I2CDFPlayer  MP3 sound player over I2C connection</li> <li>I2CRailcom connection to EXRailcomCollector device</li> <li>MCP23007 I/O expander</li> <li>MCP23017 I/O 16 bit pin expander</li> <li>NeoPixel Adafruit NeoPixel driver</li> <li>PCA9554 / TCA9554 8 bit pin expander</li> <li>PCA9555  16 bit pin expander</li> <li>PCA9685 16 pin servo controller</li> <li>PCF8574 I/O expander</li> <li>PCF8575 I/O expander</li> <li>RotaryEncoder read encoder connected to a separate Arduino</li> <li>TCA8418 80-key keypad encoder</li> <li>TM1638  8-button, 8-led, 8 digit device</li> <li>TouchKeypad capacitative touch-pad based on the TTP229-B</li> <li>Trainbrains see trainbrains.eu </li> <li>VL53LOX time-of-flight</li> </ul>"},{"location":"products/ex-commandstation/accessories/88-i2c-intro/","title":"I2C \u2013 An Introduction","text":"<p>Model trains come alive when we add points (turnouts), signals, sensors, lights, sounds and more. DCC-EX comes ready-equipped with the capability to add many such devices. In the hands of users experienced in electronics, DCC-EX can support hundreds of such devices using a connection system called I2C \u201cI Squared C\u201d which is built-into your Command Station. While I2C is very powerful, it is not a consumer plug and play set up. If you have not used it before and are not experienced in electronics, you will need to teach yourself some new skills \u2013 which can be fun and which also creates its own challenges.</p> <p>To help Conductors to get up the learning curve, we have 3 proven and essential building blocks that will get you there as smoothly as possible. We ask new users to closely follow all 3 of these, as otherwise our volunteer support teams get overwhelmed with support requests as the success of the DCC-EX venture grows.</p> <p>The 3 I2C building blocks we very strongly request Conductors build for themselves are:</p> <ul> <li> <p>Firstly, we have developed a set of tightly-specified components and configurations that we know work well in practice. Yes, you can often find cheaper individual components but these are a false economy as they are often poorly manufactured, meaning they may not work at all, causing frustration and a non-functioning model train layout. Please use these configurations initially, so that you can get used to the I2C system before becoming more adventurous.</p> </li> <li> <p>Secondly, there are new skills to learn and new terms to become familiar with if you are to be able to understand why your own set up is or is not working. You will hear terms like pullup resistors, logic voltage level, clock and data lines bandied about. Some of these you\u2019ll need to understand well, others can wait. Self-education on I2C therefore is vital for Conductors to enjoy your deployment of I2C from the very beginning. We have curated a number of videos and guides that we know to be helpful. There is even a foundation set that we strongly urge new users to watch, so that you understand the basics of I2C.</p> </li> <li> <p>Third, even when using a configuration that is known to work, you will be using a number of cables to connect items and it is very common to have problems caused by inadvertently swapping cables, or simply poor connections, which can cause things not to work, or worse, be damaged. The use of a multimeter to confirm correct set up and to troubleshoot any issues arising is mission critical. Yes, we are strong on this point because it is such a vital tool for you to enjoy this aspect of your hobby and for our support teams to guide you through any problems you may encounter.</p> </li> </ul> <p>Using these 3 proven building blocks together, you will likely have a successful installation. If you choose to ignore these, you will probably find a multitude of unexpected and unknown issues and join the ranks of users that can\u2019t get their accessories to work and don\u2019t understand why.</p>"},{"location":"products/ex-commandstation/accessories/89-i2c-wiring/","title":"I2C Wiring","text":"<p>I2C expansion modules provide accessory pins, but I2C wiring requires a lot of attention to detail.</p>"},{"location":"products/ex-commandstation/accessories/89-i2c-wiring/#i2c-concepts","title":"I2C concepts","text":"<ul> <li>Keep I2C wiring short.</li> <li>Use Qwiic cables.</li> <li>Know the combined resistance of connected I2C modules.</li> <li>Avoid using excess power from the microprocessor's power source.  Separate power sources can avoid degrading the I2C bus by low voltage spikes/sags or overloading the source.</li> </ul>"},{"location":"products/ex-commandstation/accessories/89-i2c-wiring/#i2c-bus-voltage","title":"I2C bus voltage","text":"<ul> <li>I2C bus voltage is determined by the voltage used for the pullups on the SDA and SCL pins, which should not exceed the voltage of the microprocessor.</li> <li>Mega 2560 is 5V; CSB1, ESP32-WROOM, Nucleo-F4 are 3.3V.</li> </ul>"},{"location":"products/ex-commandstation/accessories/89-i2c-wiring/#qwiicstemma-qt","title":"Qwiic/STEMMA QT","text":"<ul> <li>Qwiic a.k.a. STEMMA QT - connectors and wiring are designed for 3.3V.</li> <li>When using a Mega:  the Qwiic connector on EX8874 the power pin is 3.3V, but the SDA SCL pins have pullups to 5V. For most cases, use the I2C headers on the EX8874 when using a Mega.</li> <li>Qwiic wiring pattern is used for the Adafruit STEMMA QT / Qwiic connectors - and is different from the NXP pattern below.</li> </ul>"},{"location":"products/ex-commandstation/accessories/89-i2c-wiring/#i2c-wire-length","title":"I2C wire length","text":"<ul> <li>Length increases capacitance and reduces signal quality.</li> <li>Plan to include LTC4311 or other options when length exceeds 2 meters, for example the Adafruit LTC4311 I2C Extender/Active-terminator</li> </ul>"},{"location":"products/ex-commandstation/accessories/89-i2c-wiring/#combined-parallel-resistance","title":"Combined parallel resistance","text":"<ul> <li>Lower resistance results in a stronger signal and helps offset higher capacitance.</li> <li>If resistance is too low, the uC will be unable to overcome it.</li> </ul> <p>This table shows the parallel resistance values with multiple I2C modules. - Note that Mega has 10k onboard; EX-CSB1 has 5.1k; others are weak or disabled. - I2C modules, such as PCA9685 and MCP23017, will generally have 10k pullups. LCD and OLED displays may have 4.7k or 10k. - Add/remove pullups to result in 2.5-3.0 mA. - With LTC4311 the need to adjust resistance may be less important, unless resistance is too low.  </p> <p></p>"},{"location":"products/ex-commandstation/accessories/89-i2c-wiring/#wiring-pattern-for-lower-capacitance","title":"Wiring pattern for lower capacitance","text":"<p>https://www.nxp.com/docs/en/user-guide/UM10204.pdf </p> <p></p>"},{"location":"products/ex-commandstation/accessories/89-i2c-wiring/#power-sources","title":"Power sources","text":"<ul> <li>A separate power source for the VCC pin of the I2C bus avoids potential voltage spikes/sags and noise into the power circuit of the microprocessor, and should make the I2C accessory bus more resilient.  </li> <li>Additional/separate power source is required for the +5V servo power on the PCA9685 module.  </li> <li>When using separate power sources, there is potential for a ground loop.  TODO </li> </ul>"},{"location":"products/ex-commandstation/accessories/90-buying-i2c-devices/","title":"Buying I2C devices","text":"<p>There are many I2C devices available and the price/availability can vary widely depending on your location and delivery options. Where devices are very cheap, you may find quality issues and so expect a few duds.</p> <p>Some devices come with QWiic connectors which makes them easier to plug-and-play with the QWiic connector on your EX-CSB1 or EX8874 motor shield.</p> <p>In general, the Adafruit devices below are high quality and well documented but that is usually reflected in the price.</p> <ul> <li> <p>MCP23017 provides 16 pins for mixed input or output.(see details). This is good for:</p> <ul> <li>Up to 14 inputs from push-buttons, switches, sensors.</li> <li>Up to 16 outputs to LEDs and signals (which require current limiting resistors) and relays.</li> </ul> </li> <li> <p>PCA9685 provides up to 16 outputs for servos and LEDs (PWM pins used for V+ include resistors) (See details).</p> </li> <li> <p>PCA9548 multiplexor allows for I2C devices that must share the same I2C address (See details).</p> </li> <li> <p>NeoDriver provides an interface to NeoPixel chains of LEDs (See details).</p> </li> <li> <p>LTC4311 resolves electronic issues when the total of I2C wiring is greater than approximately 2m or 6ft (See details).</p> </li> <li> <p>QWiic wires make it easy to plug these devices together(See details).</p> </li> </ul>"},{"location":"products/ex-commandstation/accessories/90-buying-i2c-devices/#rosscoe-trains","title":"Rosscoe Trains","text":"<p>Rosscoe supplies I2c devices with QWiic sockets and additional power feeds which makes wiring much easier.</p> <p>The Rosscoe Shop is linked from our Third Party Products and Sellers page.</p>"},{"location":"products/ex-commandstation/exrail/01-exrail/","title":"What is EXRAIL?","text":"<p>EXRAIL is an \u201cEXtended Railroad Automation Instruction Language\u201d used to:</p> <ul> <li>Describe your turnouts, signals etc.</li> <li>Configure your Command Station to understand the hardware and accessories you have attached.</li> <li>Handle what to do when things happen (e.g. a button is pressed)</li> <li>Create automated route settings through your layout</li> <li>Move things, make sounds, flash lights</li> <li>Drive trains under automatic control</li> <li>Implement mimic panels and control panels</li> <li>Display status information or platform announcements on OLED screens.</li> </ul>"},{"location":"products/ex-commandstation/exrail/01-exrail/#you-dont-need","title":"You DON\u2019T need","text":"<ul> <li>JMRI, or any additional utilities</li> <li>Engine Driver, wiThrottle, or any other WiThrottle app</li> <li>A separate computer living under your layout</li> <li>Knowledge of C++ or Python/Jython programming</li> </ul> <p>Although EXRAIL has more than 100 individual commands available, it is generally easier to work from the how-to cookbook examples rather than attempt to understand every feature. It's important to understand a few principles first.</p>"},{"location":"products/ex-commandstation/exrail/01-exrail/#important-background-information","title":"Important Background Information","text":"<ul> <li>EXRAIL scripts are written into a file called myAutomation.h which you can edit with any suitable text editor. You don't need any extra tools installed on your PC that you don't already have in VSCode or the EX-Installer.</li> <li>When you upload the command station with the DCC-EX code, myAutomation.h is used by the compiler to configure the software and embed any sequences so that the command station can run without further assistance from your PC. If you change myAutomation.h then you must upload again.</li> <li>EXRAIL can run multiple sequences simultaneously so it's great for annoying Arduino programmers who find that extremely complex to do in C++.</li> </ul>"},{"location":"products/ex-commandstation/exrail/01-exrail/#basic-building-blocks","title":"Basic building blocks","text":"<p>There are a few basic building blocks that will appear in the examples:</p> <ul> <li><code>SEQUENCE</code> - Simply a list of things to be done in order. These things might be to actually drive a train around, or merely to set some turnouts or flash some scene or panel lights. Actions can be made to wait for conditions to be met, like a sensor detecting a train, a button being pushed, or a period of time elapsing. e.g.</li> </ul> <pre><code>  SEQUENCE(27) // Close crossing gates\n    BLINK(100,500,500) // start flasher\n    DELAY(4000)\n    SERVO(200,30,Slow) // move barrier\n    DONE   // sequence completed\n</code></pre> <ul> <li><code>ROUTE</code> \u2013 A special type of SEQUENCE that is made visible to a throttle with a readable name so the user can press a button to get the sequence executed. This might be best used to set a series of turnouts and signals to create a route through the layout. For example</li> </ul> <pre><code>  ROUTE(1,\"Platform A to Mainline\")\n    THROW(27) // set turnouts\n    CLOSE(6)\n    GREEN(101) // change departure signal\n    DONE \n</code></pre> <ul> <li><code>AUTOMATION</code> \u2013 A special type of SEQUENCE that is made visible to a throttle so that a user can hand over a loco and let EXRAIL drive the train away, following each step listed in the sequence. For example, a user could manually drive a train into a station and press a handoff button in the throttle to run an AUTOMATION to take it on a journey around the layout.</li> </ul> <pre><code>  AUTOMATION(17,\"Depart to Byeckaslike\")\n    FWD(20) // start slowly\n    AT(167) // when we reach sensor 167\n    SPEED(55)\n    AT(168) // approaching station\n    SPEED(10) // slow down\n    AT(169) // at the terminus\n    ESTOP // stop dead\n    DONE\n</code></pre> <ul> <li>ON-[HANDLER] \u2013 a sequence that is automatically started when some event happens. For example when a button is pressed (ONBUTTON) or a turnout is changed (ONTHROW / ONCLOSE) so you can intercept turnout/point changes to automatically adjust signals or other turnouts.</li> </ul> <pre><code>ONBUTTON(167)\n  RED(108)\n  THROW(6)\n  GREEN(112)\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/01-exrail/#a-users-story","title":"A users story","text":"<p>I have used C++ on Arduino\u2019s and Python/Jython on JMRI software to build Automation sequences. I now use EXRAIL instead because:</p> <ul> <li> <p>It\u2019s significantly easier and more flexible than the other two options.</p> </li> <li> <p>I reduce the number of Uno and Nano accessory boards needed to do the same tasks on the layout by using the DCC-EX Command Station and embedded EXRAIL instead.</p> </li> <li> <p>I can create Automations, Routes, &amp; Sequence scripts With EXRAIL on the Command Station and still access them from JMRI PanelPro and DecoderPro GUI buttons with a simple sendDCCmessage.py script pointer that passes them to the EXRAIL scripts on the Command Station, so I don\u2019t have to rewrite the script in Jython/Python.</p> </li> <li> <p>EXRAIL is ten times easier to learn and use and is more flexible than the other methods.</p> </li> </ul>"},{"location":"products/ex-commandstation/exrail/02-autostart/","title":"Things that happen at startup","text":"<p>When the command station starts:</p> <ul> <li>Definitions of HAL drivers, Turnouts and Signals will take place first regardless of where they are found in the myAutomation.h file.</li> <li>EXRAIL will run through all its sequences to detect any VPIN that has been used for input, perhaps by an AT, AFTER, ONBUTTON, ONSENSOR etc. These pins are then set to the Arduino INPUT_PULLUP mode. This is necessary so that EXRAIL can actually read the input pins.</li> </ul> <p>Where VPINS are mapped to external expanders (such as an MCP23017), the HAL driver will pass on the relevant commands to the expander.</p> <ul> <li>EXRAIL will then automatically start tasks at any point in the myAutomation.h file where and AUTOSTART command is found. There may be several, they will all run simultaneously and in no particular priority.</li> </ul> <p>To create commands that will automatically run at startup:</p> <pre><code>AUTOSTART\n  POWERON\n  THROW(1)\n  CLOSE(2)\n  PRINT(\"Ready to Rumble\")\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/01-vpins/","title":"Virtual Bitmap device pins (VPINs)","text":"<p>A VPIN is an Arduino pin number that has been extended to include pins on external devices or expanders.</p> <p>By giving external device pins unique VPIN numbers, the vast majority of the pin manipulation required by the user is controlled the same way regardless of whether the pin is an actual Arduino pin on the main CPU, an expander pin over i2c perhaps behind a multiplexer, a virtual pin or even a software-only pin simulation.</p> <p>The vast majority of VPINs are either output (e.g. LEDs and servos) or input (e.g. buttons and sensors) but rarely both.  </p>","boost":4},{"location":"products/ex-commandstation/exrail/cookbooks/01-vpins/#creating-virtual-pins","title":"Creating virtual pins","text":"<p>Virtual pins are normally defined by specifying the Hardware Driver that is used to connect to an external device. There is no way for the command station to know for sure what devices are connected so it must be told. This is done by including HAL commands in myAutomation.h which configure the device.</p> <p>For Example</p> <pre><code>    HAL(PCA9685, 100, 16, 0x40) \n    HAL(PCA9685, 116, 16, 0x41) \n    HAL(PCA9685, 132, 16, 0x42) \n    HAL(PCA9685, 148, 16, {I2CMux_0,SubBus_4,0x43})\n\n    HAL(MCP23017, 164, 16, 0x20) \n    HAL(MCP23017, 180, 16, 0x21) \n</code></pre> <p>This would create VPINs 100 to 115 to represent the 16 servo outputs on the first PCA9685 servo control board at I2C address 0x40 and VPINs 164 to 179 on the first MCP23017 i/o expander. VPINs for two PCA9685 and two MCP23017 are pre-defined, except for PCA9685 used with Nucleo-144. Refer to wiring details and fuller list of supported I2C devices elsewhere.</p>","boost":4},{"location":"products/ex-commandstation/exrail/cookbooks/01-vpins/#using-output-vpins","title":"Using OUTPUT VPINS","text":"<p>Pin values can be changed with basic digital pin commands common to all VPINs.  In EXRAIL</p> <p><code>SET(180)</code> <code>RESET(180)</code>  sets value HIGH or LOW.</p> <p><code>SET(181,5)</code> or <code>RESET(181,5)</code>  sets/resets a range of pins (181..185 in this case).</p> <p><code>BLINK(180,250,750)</code> sets pin 201 blinking for 250mS on and 750mS off. Blinking is stopped by a SET or RESET of the pin.</p> <p>Serial commands can set HIGH/LOW values to VPINs using <code>&lt;z 180&gt; &lt;z -180&gt;</code> as for any digital output.</p>","boost":4},{"location":"products/ex-commandstation/exrail/cookbooks/01-vpins/#using-input-vpins","title":"Using INPUT VPINs","text":"<p><code>IF(200)</code> tests if pin value is HIGH.</p> <p><code>ONBUTTON(200)</code> triggers when a pin goes HIGH. This is most useful for push buttons connected between the pin and ground. This causes a new EXRAIL task to start and switch bounce will be ignored until the task completes.</p> <p>For example:</p> <pre><code>ONBUTTON(202) \n   RED(11) \n   THROW(2)\n   CLOSE(1)\n   GREEN(12)\n   DONE\n</code></pre> <p><code>ONSENSOR(200)</code> triggers when a sensor changes state. This is less useful.</p> <p>Other more advanced commands are available, see cookbooks.</p>","boost":4},{"location":"products/ex-commandstation/exrail/cookbooks/animation-sensors/","title":"Buttons and Switches","text":"<p>Buttons and switches are connected to an input vpin, usually on an expander such as an MCP23017 which provides a number of input or output pins.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/animation-sensors/#detecting-a-button-press","title":"Detecting a button press","text":"<p>The ONBUTTON(x) sequence is started when the vpin x is made HIGH by a button press or other sensor being triggered.</p> <pre><code>ONBUTTON(172)\n  PRINT(\"Moooving on\")\n  SERVO(135,417) // move cow out of the way\n  DELAY(4000)  // wait \n  THROW(3) // throw turnout 3 \n  GREEN(130) // set a signal\n  DONE\n</code></pre> <p>Repeated pressing of the button will be ignored until the DONE has completed.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/animation-sensors/#detecting-a-switch-change","title":"Detecting a switch change","text":"<p>The ONSENSOR(x) sequence is started when an input vpin changes state between HIGH and LOW. You will probabaly need to check the state inside the sequence using an IF(x) command.</p> <pre><code>ONSENSOR(176)\n  IF(176) \n    PRINT(\"Sensor 176 gone HIGH\")\n    GREEN(110) // set signal\n  ELSE\n    PRINT(\"Sensor 176 gone LOW\")\n    RED(110)  // set signal\n  ENDIF\n  DONE\n</code></pre> <p>Note: Switches are not suitable for controlling turnouts because the command station cant reach out a finger and change the switch position when the turnout is changed from a throttle or some other EXRAIL script. (Unless of course, you are into animating a servo to do just that!)</p> <p>You can toggle a turnout with a single button</p> <pre><code>ONBUTTON(172) TOGGLE_TURNOUT(7) DONE\n</code></pre> <p>Or have 2 buttons</p> <pre><code>ONBUTTON(172) THROW(7) DONE\nONBUTTON(173) CLOSE(7) DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/dc-tracks/","title":"Set a track to DC","text":"<p>The command</p> <ul> <li><code>SET_TRACK(t,mode)</code> is used to change the way a track is used. <code>SET_POWER(t, ON)</code>  - track is OFF following mode change.</li> </ul> <p>Using a ROUTE or other sequence, you can set a track to the correct DC polarity and specify the loco address that the throttle will use to drive the loco on that track.</p> <p>(The throttle doesn't need to know that you are using DC.)</p> <pre><code> ROUTE(77,\"Set track A to DC for loco 123\")\n   SETLOCO(123)\n   SET_TRACK(A,DC)\n   SET_POWER(A,ON)\n   DONE\n</code></pre> <p>Modes DC or DCX are only different in that the polarity is reversed. This will be important if you have, for example, a double track mainline which is normally wired in opposite polarity so that 'forward' is clockwise on one track and anticlockwise on the other. To drive over a junction between the two, the 'to' track must be switched in polarity to match the 'from' track.</p> <p>For example:</p> <pre><code>ROUTE(78,\"Cross from outer to inner\")\n  SETLOCO(123)\n  SET_TRACK(A,DC)\n  SET_TRACK(B,DCX)\n  SET_POWER(A,ON)\n  SET_POWER(B,ON)\n  THROW(6) // throw the crossover turnout(s)\n  DONE\n</code></pre> <p>See also the facing turnouts cookbook.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/estop-button/","title":"Emergency stop button","text":"<p>ONBUTTON(173) will start a sequence at this point when a button on vpin 173 is pressed. The ESTOPALL command will stop all locos and inform all throttles. The DONE command completes/terminates the process started by ONBUTTON.</p> <pre><code>ONBUTTON(173) ESTOPALL DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/flashing-signals/","title":"Signals with flashing","text":"<p>Flashing is achieved with the command</p> <pre><code>BLINK(vpin, onMs, offMs)\n</code></pre> <p>which will start a vpin blinking until such time as it is SET, RESET or set by a signal operation such as RED, AMBER, GREEN.</p> <p>BLINK returns immediately, the blinking is autonomous.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flashing-signals/#always-blink-amber","title":"Always blink AMBER","text":"<p>A signal that always blinks amber could be done like this:</p> <pre><code>SIGNALH(130,131,132)\nONAMBER(130) BLINK(131,500,500) \nDONE\n</code></pre> <p>The RED or GREEN calls will turn off the amber pin and that will stop the blink automatically.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flashing-signals/#amber-and-flashing-amber","title":"Amber and Flashing Amber","text":"<p>A signal that has normal AMBER and flashing AMBER could be done by creating a new macro to implement a FLAMBER(signalid) command</p> <pre><code>// create a new command\n#define FLAMBER(signal) \\\n        AMBER(signal) \\\n        BLINK(signal+1,500,500)\n\nSIGNAL(130,131,132) \n\n// then where necessary you can \nAMBER(130)   // set signal to AMBER\n// or \nFLAMBER(130) // set signal to flashing amber\n</code></pre> <p>(Caution: this assumes that the amber pin is redpin+1 in the SIGNAL or SIGNALH definition)</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/roster-similar-locos/","title":"Roster for Similar Sound Locos","text":"<p>The ROSTER command in EXRAIL can be tedious if you have several sound locos with the same function settings. Using a preprocessor definition saves typing.</p> <pre><code>ROSTER(1201,\"Red class 99\",\"light/*horn/flash/bang/wallop/squeal/honk\") \nROSTER(1202,\"Green class 99\",\"light/*horn/flash/bang/wallop/squeal/honk\") \n</code></pre> <p>Can be simplified by pre-defining the functions:</p> <pre><code>#define CLASS99F \"light/*horn/flash/bang/wallop/squeal/honk\" \nROSTER(1201,\"Red class 99\",CLASS99F) \nROSTER(1202,\"Green class 99\",CLASS99F) \n</code></pre> <p>This technique is particularly useful for rostering DC tracks where the function keys are related to PWM frequency:</p> <pre><code>#define DCFuncs\"/////////////////////////////FQ490 Hz/FQ3400 Hz/FQ62500 Hz\"\nROSTER(1225,\"DC TRACK B 1225\",DCFuncs)\nROSTER(1226,\"DC TRACK C 1226\",DCFuncs)\n</code></pre> <p>It is also possible to utilise the compiler rule that \"Hello\" \"Sailor\" is treated as \"HelloSailor\". This means that common functions can be used with loco specific additions.</p> <pre><code>#define CommonFuncs \"light/*horn\" \nROSTER(1201,\"Noisy class 99\",CommonFuncs \"/flash/bang/wallop/squeal/honk\") \nROSTER(1202,\"Quieter class 99\",CommonFuncs) \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/","title":"Route button control","text":"<p>Route buttons appear on the throttle and can be controlled from EXRAIL to hide, disable or recaption the button. Everything here applies equally to AUTOMATIONs.</p> <p>If a route button can be in one of 4 states:</p> <ul> <li>Inactive (waiting to be pressed)</li> <li>Active (highlighted as if selected)</li> <li>Disabled (you can't press this)</li> <li>Hidden (the entire route is not visible on the throttle)</li> </ul> <p>This allows EXRAIL to prevent multiple conflicting routes to be set, or to replace the default \"Set\" button with open/close, start/stop, yes/no, on/off or whatever makes most sense in context.</p> <p>Here are examples of solving the same problem but with different user experiences. In this case we want a way of setting a light on or off.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/#simple-light-switch-route","title":"Simple light switch route","text":"<p>This example just has the logic to switch a light on/off with the \"Set\" button.  It uses a Bitmap flag to remember whether the light is on or off. Note that the light and flag will default to off.</p> <p>A flag or range of flags in created like this:</p> <pre><code>HAL(Bitmap,800,16)\n</code></pre> <p>That creates flags 800..815, we only need one here but if you need more, its better to crete a bank of flags in one go rather than lots of individual flags.</p> <pre><code>ROUTE(600,\"Shed lights\")\n  IF(800)  // is the light on? \n     RESET(120)  // lights off\n     RESET(800)\n  ELSE  // light is off \n     SET(120)  // lights on\n     SET(800)\n  ENDIF\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/#changing-button-captions","title":"Changing button captions","text":"<p>The same logic includes changing the button caption from \"Set\" to \"Turn On\" or \"Turn Off\".</p> <pre><code>ROUTE(600,\"Shed lights\")\n  IF(800)  // is the light on? \n     RESET(120)  // lights off\n     RESET(800)\n     ROUTE_CAPTION(600,\"Turn on\") // change button caption\n  ELSE  // light is off \n     SET(120)  // lights on\n     SET(800)\n     ROUTE_CAPTION(600,\"Turn off\") // change button caption\n  ENDIF\n  DONE\n\nAUTOSTART\n  ROUTE_CAPTION(600,\"Turn On\") // start with lights off (pin and flag will default off)\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/#changed-button-activeinactive-appearance","title":"Changed button active/inactive appearance","text":"<p>This example make the \"set\" button appear active (highlighted) or inactive</p> <pre><code>ROUTE(600,\"Shed lights\")\n  IF(800)  // is the light on? \n     RESET(120)  // lights off\n     RESET(800)\n     ROUTE_INACTIVE(600) // change button state to inactive\n  ELSE  // light is off \n     SET(120)  // lights on\n     SET(800)\n     ROUTE_ACTIVE(600) // button appears highlighted as active\n  ENDIF\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/route-button-control/#two-separate-routes-example","title":"Two separate routes example","text":"<p>This example has two \"routes\" to control lights, but only one of them will be visible at a time so we dont need a flag. Each route will have the default \"Set\" button.</p> <pre><code>ROUTE(600,\"Shed lights on\")\n  SET(120)\n  ROUTE_HIDDEN(600) // hide self\n  ROUTE_INACTIVE(601) // reveal off \n  DONE\n\nROUTE(601,\"Shed lights off\")\n  RESET(120)\n  ROUTE_HIDDEN(601)\n  ROUTE_INACTIVE(600)\n  DONE\n\nAUTOSTART\n    ROUTE_HIDDEN(601)  // shed lights are off already\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/startup-poweron/","title":"Startup power","text":"<p>By default the Command station will start with the track power OFF.</p> <p>This can be inconvenient if you are using the free version of the WiThrottle app from the Apple store which does not have a power button.</p> <p>You can configure EXRAIL to power on at startup by using</p> <pre><code>AUTOSTART POWERON DONE\n</code></pre> <p>Alternatively, you can power tracks individually</p> <pre><code>AUTOSTART\n  SET_POWER(A,ON)\n  SET_POWER(D,ON)\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/startup-set-track/","title":"Startup - Define Tracks","text":"<p>By default the Command station will start with \u00a0 \u00a0 Track A - <code>MAIN</code> \u00a0 \u00a0 Track B - <code>PROG</code></p> <p>These lines can be added to myAutomation.h to define tracks as needed.</p> <pre><code>AUTOSTART \n  SET_TRACK(A,MAIN)\n  SET_TRACK(B,PROG)\n  SET_TRACK(C,MAIN)\n  SET_TRACK(D,MAIN)\n  POWEROFF\n DONE\n</code></pre> <p><code>POWEROFF</code> is the default.  </p> <p><code>POWERON</code> will set MAIN tracks ON.  </p> <p>Other track modes require the <code>SET_POWER</code> command, for each track. Example: Set a track to DC NOTE: The use of the <code>SET_LOCO</code> command for DC mode tracks.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/timecontrol/","title":"Time Control","text":"<p>The Command Station has additional commands added to exrail allow events to be controlled by a EX-FastClock.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/timecontrol/#time-command","title":"Time Command","text":"<p>The basic form of the clock command is:</p> <pre><code>ONCLOCKTIME( hour, mins)\n</code></pre> <p>This is an event based command and will activate a sequence of commands until a DONE command is reached.  An example of how this might be used is as follows:</p> <pre><code>ONCLOCKTIME(06,15) \n  SETLOCO(7309) \n  ....\n  .... Do some stuff\n  ....\n  DONE\n</code></pre> <p>Sequences built this way can only be run via a clock command.  If it was required to have a sequence that could be run for Engine Driver for example, then this could be operated by a clock command as below:</p> <pre><code>ONCLOCKTIME(06,15) SENDLOCO(7309,10) DONE\n\nSEQUENCE(10)\n    PRINT(\"Go Somewhere\")\n    FON(1)\n    DELAY(500)\n    FWD(50)\n    DELAY(20000)\n    FWD(0)\n    DELAY(2000)\n    FON(4)\n    DELAY(3000)\n    FOFF(4)\n    PRINT(\"You have arrived\")\n    FOFF(1)\nDONE\n</code></pre> <p>This event could either be run by the clock or could be selected at will from Engine Driver.  To stop the Command Station from running timed commands to switch to manual running, simply pause the clock.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/timecontrol/#repeating-time-events","title":"Repeating Time events","text":"<p>Some users may wish to repeat an event at the same time every hour - e.g. to play a recording of a clock chime.  It is possible to achieve this as follows:</p> <pre><code>ONCLOCKMINS( mins )\n</code></pre> <p>This is an event based command that will activate at the same time each hour as in the example below:</p> <pre><code>ONCLOCKMINS(15) \n  SET(1000)             // Start playing first MP3 file\n  AT(-1000)             // Wait for playing to finish\n  RESET(1000)           // Stop player \n  ....\n  .... Do some other stuff\n  ....\nDONE\n</code></pre> <p>The sequence above will repeat at 15 munites past the hour per FastClock time.  It would also be possible to make these routines be selectable from Engine Driver by configuring them as follows:</p> <pre><code>ONCLOCKMINS(15) FOLLOW(10) DONE\n\nSEQUENCE(10)\n  SET(1000)             // Start playing first MP3 file\n  AT(-1000)             // Wait for playing to finish\n\n  RESET(1000)           // Stop player \n  ....\n  .... Do some other stuff\n  ....\nDONE\n</code></pre> <p>In that way the Sequence 10 can either be run by the clock, or if the clock is not running may be selected manually from Engine Driver.</p> <p>NB:  See the following page for details on running sound files.</p> <p>( add a refernce )</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/timecontrol/#testing-timed-sequences","title":"Testing Timed Sequences","text":"<p>If one is testing out a sequence using a timed command it can be done quickly without using the clock.  The following command can be entered from the System Monitor:</p> <pre><code>&lt;JC mmmm ss&gt; \n</code></pre> <p>where mmmm is the time in minutes since midnight.  This is (hours * 60) + mins and is how the time is held within  Command Station.  So for the time in the example above (6:15) the following:</p> <pre><code>&lt;JC 375 4&gt;\n</code></pre> <p>would execute the command immediately (4 being the perceived speed factor i.e. 1 minutes every 15 seconds).  The  Command Station would respond with:</p> <pre><code>&lt;jC 375&gt;\n</code></pre> <p>And would then display any messages generated by the SEQUENCE 10.</p> <p>The final command available is:</p> <pre><code>  &lt;JC&gt;\n</code></pre> <p>which requests the latest time from  Command Station which responds with:</p> <pre><code>  &lt;jC 375&gt;\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/advanced/5-display-locos-on-oled/","title":"Display Loco speeds on OLED (Advanced)","text":"<p>The following example creates a C++ function to display loco details on an OLED screen. By using a generic HAL driver, the function can be invoked repeatedly according to a time delay.</p> <p>BEWARE that code like this is sensitive to many restrictions such as time taken and memory use. It is also subject to version changes in some of the internal dcc-ex routines so is only given here as an example.</p> <p>EXRAIL macros cannot be used inside STEALTH sections. Users using STEALTH and STEALTH_GLOBAL are expected to understand the implications and the C++ language features used and the need to avoid any lengthy process.</p> <p>The STEALTH_GLOBAL macro allows the creation of C++ functions within the command station environment. This function displays the first 8 locos in the DCC speed reminders table on LCD/OLED screen 2.</p> <p>Notice that it will only update one OLED row per call, and will not update the row if the speed byte has not changed. This is because OLED updates are very \"expensive\" in terms of cpu time and I2C traffic volumes and attempting to do too much in one call can cause blocking of other more important functions.</p> <pre><code>STEALTH_GLOBAL(\n  void updateLocoScreen() {\n    const byte loco_slots=8;\n    static byte current_slot=loco_slots-1;\n    static byte shown_speed[loco_slots]; // remember whats already shown\n    static bool first_call=true;\n\n    if (first_call) {\n      first_call=false;\n      for (int i=0; i&lt;loco_slots; i++) shown_speed[i]=127;\n    }\n\n    // switch to next row\n    current_slot= (current_slot + 1) % loco_slots;\n    auto loco=DCC::speedTable[current_slot].loco;\n    if (loco&lt;0) return; // this slot is no longetr used\n    if (loco==0) return; // we are beyond the last loco   \n\n    auto speed = DCC::speedTable[current_slot].speedCode;\n    if (speed== shown_speed[current_slot]) return; // no change in speed\n    shown_speed[current_slot] = speed; // remember speed for next time\n\n    auto direction = (speed &amp; 0x80) ? 'F' : 'R';\n    speed = speed &amp; 0x7f;\n    if (speed &gt; 0) speed = speed - 1; // make it look like JMRI\n    StringFormatter::lcd2(2, current_slot+2, F(\"Loco:%4d %3d %c\"), loco, speed, direction);\n  }\n)\n</code></pre> <p>To ensure the function is called twice per second we use the UserAddin HAL feature. The LCD/OLED number 2 used by the function is connected by I2C. </p> <pre><code>HAL(UserAddin,updateLocoScreen,500) \nHAL(HALDisplay&lt;OLED&gt;, 2, 0x3d, 128, 64)  \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/advanced/analog-sensors/","title":"Analog sensors","text":"<p>Sensors that read analog values are comparatively rare for model railway use but are sometimes used to detect a binary state depending on the current detected by a sensor.</p> <p>ADS1113 and ADS1114 are restricted to 1 input.  ADS1115 has 4 way multiplexer which allows any of four input pins to be read by its ADC.</p> <p>The ADS111x is set up so that the maximum input voltage of 5V (when Vss=5V) gives a reading of 32767*(5.0/6.144) = 26666.</p> <p>A device like the above is defined in EXRAIL by</p> <pre><code>HAL(ADS1113,300, 1, 0x48);  // single-input ADS1113 on vpin 300\n// or\nHAL(ADS1115,300, 4, 0x48);  // four-input ADS1115 on pins 300..303\n</code></pre> <p>To monitor a vpin like this for a binary decision</p> <pre><code>AUTOSTART SEQUENCE(99)\nATGTE(300,1000) // wait intil vpin 300 reaches 1000 or greater\n... do something\nATGTE(300,950) // wait until it drops back below 950\n.. do something else\nFOLLOW(99) // continue monitoring\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/advanced/command-filter/","title":"Command Filters","text":"<p>A command filter intercepts <code>&lt; &gt;</code> type commands from throttles or the serial monitor and can be used to override, block or modify existing commands and implement completely new commands.</p> <p>The following code, added to myAutomation.h like any other EXRAIL code, gives a basic example.</p> <pre><code>STEALTH_GLOBAL(\n  void myFilter(Print * stream, byte &amp; opcode, byte &amp; paramCount, int16_t p[]) {\n    (void)stream;\n    // use command &lt;U locoid&gt; to display name from roster\n    if (opcode == 'U' &amp;&amp; paramCount == 1) {\n      auto locoId=p[0];\n      auto name=RMFT2::getRosterName(locoId);\n      if (!name) return; // caller will &lt;X&gt; this\n      opcode=0; // caller can now ignore this\n      StringFormatter::lcd(0, F(\"Loco %d name %S\"), locoId, name);\n    }\n  }\n)\n</code></pre> <ul> <li>All <code>&lt;&gt;</code> commands will be broken into an opcode and numeric parameters before being passed to myFilter.</li> <li>You can only have one myFilter function but it can filter multiple commands by inspecting the opcode.</li> <li>The filter function can inspect or modify the opcode and parameters, make changes and return. If the opcode is set to 0, the caller will assume that the filter has completely handled the command and will not check it further.  </li> <li>Output directed to the stream parameter will be transmitted back to the originating throttle. If no output is expected then casting to void is a good way of eliminating the \"unused parameter\" compiler warning.</li> <li>the <code>&lt;U&gt;</code> and <code>&lt;u&gt;</code> opcodes are reserved for use by users. They will not clash with any future DCC-EX commands.  </li> <li>Although this is a conventional c++ function, the use of STEALTH_GLOBAL in EXRAIL avoids the need to #include a vast array of weird and wonderful API and memory management definitions.</li> <li>To recognize keyword parameters (e.g <code>&lt;1 MAIN&gt;</code>) you would test using the _hk suffix like this</li> </ul> <pre><code> if (opcode == '1' &amp;&amp; paramCount == 1 &amp;&amp; p[0] == \"MAIN\"_hk) \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/advanced/tca8418-keyboard/","title":"TCA8418 keyboard scanner","text":"<p>The TCA8418 IC from Texas Instruments is a low cost and very capable GPIO and keyboard scanner. Used as a keyboard scanner, it has 8 rows of 10 columns of IO pins which allow encoding of up to 80 buttons. The IC is available on an Adafruit board with Qwiic I2C interconnect called the Adafruit TCA8418 Keypad Matrix and GPIO Expander Breakout.</p> <p>The great advantage of this IC is that the keyboard scanning is done continuously, and it has a 10-element event queue, so even if you don't get to the interrupt immediately, keypress and release events will be held for you. Since it's I2C its very easy to use with any DCC-EX command station.</p> <p>The TCA8418 driver presently configures the IC in the full 8x10 keyboard scanning mode, and then maps each key down/key up event to the state of a single vpin for extremely easy use from within EX-RAIL and JMRI as each key looks like an individual sensor.</p> <p>This is ideal for mimic panels where you may need a lot of buttons, but with this board you can use just 18 wires to handle as many as 80 buttons.</p> <p>By adding a simple HAL statement to myAutomation.h it creates between 1 and 80 buttons it will report back.</p> <pre><code>HAL(TCA8418, firstVpin, numPins, I2CAddress, interruptPin)\n</code></pre> <p>For example:</p> <pre><code>HAL(TCA8418, 300, 80, 0x34)\n</code></pre> <p>Creates VPINs 300-379 which you can monitor with EX-RAIL, JMRI sensors etc.</p> <p>With an 8x10 key event matrix, the events are numbered using the Rn row pins and Cn column pins as such:</p> <pre><code>     C0  C1  C2  C3  C4  C5  C6  C7  C8  C9\n    ========================================\n R0|  0   1   2   3   4   5   6   7   8   9\n R1| 10  11  12  13  14  15  16  17  18  19\n R2| 20  21  22  23  24  25  26  27  28  29\n R3| 30  31  32  33  34  35  36  37  38  39\n R4| 40  41  42  43  44  45  46  47  48  49\n R5| 50  51  52  53  54  55  56  57  58  59\n R6| 60  61  62  63  64  65  66  67  68  69\n R7| 70  71  72  73  74  75  76  77  78  79\n</code></pre> <p>So if you start with the first pin definition being VPIN 300, R0/C0 will be 300 + 0, and R7/C9 will be 300+79 or 379.</p> <p>And if needing an Interrupt pin to speed up operations:</p> <pre><code>HAL(TCA8418, 300, 80, 0x34, 21)\n</code></pre> <p>This is not for CSB1 which has no spare pins for interrupts.</p> <p>Note that using an interrupt pin speeds up button press acquisition considerably (less than a millisecond vs 10-100), but even with interrupts enabled the code presently checks every 100ms in case the interrupt pin becomes disconnected. Use any available Arduino pin for interrupt monitoring.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/1-basic/","title":"Basic driving functions","text":"<p>EXRAIL contains a number of basic commands to drive locos and control their functions such as lights and sounds.</p> <p>Its important to understand that EXRAIL has \"tasks\". A task may be driving loco 3 using sequence(555) while another task is driving loco 7 using a the same or a different sequence. That is why the driving commands below do not refer to the loco address, they take the address from the task executing the sequence. </p> <p>The loco associated with a task can be set with a <code>SETLOCO(locoid)</code> executed within the task, or it can be automatically assigned from a throttle using a hand-off to an AUTOMATION.</p> <p>All driving speeds are in the range 0 to 127 where 0 is a normal stop (where a loco's decoder will usually stop gently as if the driver were applying the brakes) and speed 1 is an emergency stop where the loco will stop immediately without any semblance of momentum. The same speed range applies for DC and when running with 28 speed steps.</p> <ul> <li><code>FWD(speed)</code> will start the loco moving forward at the given speed.</li> <li><code>REV(speed)</code> will start the loco moving in reverse at the given speed.</li> <li><code>SPEED(speed)</code> alters the loc speed without changing the direction.</li> <li><code>STOP</code> is the same as SPEED(0)</li> <li><code>ESTOP</code> is the same as SPEED(1)</li> </ul> <p>Bear in mind that FWD(0) and REV(0) are not quite the same thing as it will affect the loco lights (if the loco has direction changing lights fitted) and may involve sound effects if the loco simulates the driver changing the reversing gear.</p> <p>Usually, a sequence being used to drive a loco will include <code>AT(vpin)</code> commands to continue until a given sensor is detected.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/3-functions/","title":"Loco Functions","text":"<p>Functions can be set on or off. EXRAIL knows nothing about the meaning of each function because this is internal to the loco decoder.</p> <ul> <li><code>FON(func)</code>  turns on a loco function</li> <li><code>FOFF(func)</code> turns off a function</li> </ul> <p>In more advanced cases, an automation driving a loco may need to manage functions on another address, perhaps carriage lights. This can be done with the commands</p> <ul> <li><code>XFON(locoid, function)</code></li> <li><code>XFOFF(locoid, function)</code></li> </ul> <p>For eaxample:</p> <pre><code>... while driving...\n   AT(189)   // passing tunnel\n   FON(0)    // loco lights on\n   FON(8)    // make like a boy-racer  \n   XFON(3001,0) // carriage lights on\n   AT(190)   // at far end of tunnel\n   FOFF(8)   // pretend we didn't do that\n   FOFF(0)   // loco lights off\n   XFOFF(3001,0) // carriage lights off\n... and so on\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/30-automations/","title":"AUTOMATIONS","text":"<p>An AUTOMATION is a sequence of EXRAIL commands used to drive a loco.</p> <p>By creating an AUTOMATION in EXRAIL, your throttle will show the automation on its Routes display. To send a loco along an AUTOMATION, you must first drive the loco to a point where the automation can start and then select the automation from the routes screen of your throttle.</p> <p>The automation will take over driving the loco but you will still see the throttle moving if the loco changes speed. If you manually alter the speed with the throttle that will take effect normally as the automation spends most of its time in an AT command waiting for the train to reach a sensor, and will not wake up again until the sensor is detected. You may, for example, stop the train manually to fix a derailment, dropped rolling stock or cat sitting on the track. When you restart the loco and drive it to the sensor the automation is expecting, the automation will carry on.</p> <p>Of particular interest, compared with a PC (JMRI, iTrain, RocRail etc) running the loco, EXRAIL is only interested in the sensor your task us trying to reach. This makes it vastly more efficient than even the fastest PC system.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/40-simple-shuttle/","title":"Simple shuttle","text":"<p>Imagine we have a track like this with sensors 164 and 165 at each end.</p> <pre><code>Dogbath                                                  Catflap\n||============================================================||\n  |                                                          |\n 164                                                        165\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/40-simple-shuttle/#sensor-positioning","title":"Sensor positioning","text":"<p>This illustrates an important aspect of EXRAIL driving. The sequence is only interested in one sensor at a time, there is no case for logic that says \"Oh wait! Sensor 164 has been hit, how do I know which loco it was and which way it was going... and was it the loco that hit it or the end of the reversing train..\"</p> <p>If you are using magnet-operated sensors that only detect the loco, you must adjust the sensor positions to take into account the length of the train when it is reversing. In this case, moving the sensors at the Dogbath end by one train length towards Catflap.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/40-simple-shuttle/#creating-the-basic-automation","title":"Creating the basic AUTOMATION","text":"<p>Create an automation like this. The automation id needs to be unique amongst all AUTOMATION, ROUTE or SEQUENCE definitions.  </p> <pre><code>AUTOMATION(123,\"Dogbath to Catflap shuttle\")\n  FWD(40) // Set off from Dogbath\n  AT(165) // wait until we get to Catflap stopping point \n  STOP // and then stop\n  DELAYRANDOM(15000,20000) // wait for driver to have a smoke \n  REV(40) // reverse back \n  AT(164) STOP // At Dogbath \n  DELAYRANDOM(5000,10000) // wait 5 to 10 seconds \n  FOLLOW(123) // and follow the sequence again\n</code></pre> <p>First drive your train to Dogbath, with the front facing Catflap. Select the automation from your throttle and the train should start after a random wait.</p> <p>It should be pretty obvious what this does and where the sensors need to be to give a reasonable stopping point, but this may depend on inertia settings in your loco decoder or command station setup.</p> <p>The AT command pauses the driving task until the sensor is activated.</p> <p>EXRAIL commands can be on the same line or separate lines, it makes no difference but sometimes it's easier to read if you put things like \"AT something DO something\" on one line.</p> <p>Also notice that this automation will work just as well for a DC loco or when DCC is being run at 28 speed steps for very old decoders.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/41-improved-shuttle/","title":"Improved shuttle","text":"<p>In this and following examples, the previous example comments have been removed and new changes commented to make them easier to see. Some lines have been joined together to keep the example short on screen and make it generally more human readable.</p> <p>By adding more sensors, the shuttle can be made more realistic, slowing down at station approach and making sounds.</p> <pre><code>Dogbath                                                  Catflap\n||============================================================||\n  |         |                                      |         |\n 164       166                                    167       165\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/41-improved-shuttle/#speed-changes","title":"Speed changes","text":"<p>Using the previous example.</p> <pre><code>AUTOMATION(123,\"Dogbath to Catflap shuttle\")\n  FWD(40)\n  AT(167) SPEED(15) // At Catflap slow down point, change speed\n  AT(165) ESTOP     // ESTOP avoids any momentum issue   \n  DELAYRANDOM(15000,20000)  \n  REV(40)  \n  AT(166) SPEED(15) // At Dogbath slow down point, change speed\n  AT(164) ESTOP \n  DELAYRANDOM(5000,10000)  \n  FOLLOW(123) \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/41-improved-shuttle/#sounds-and-lights","title":"Sounds and lights","text":"<p>Headlight settings and sounds may be added using the FON(functionNumber) and FOFF(functionNumber). These numbers will depend on the features of the loco decoder but it is not an error to send functions to DC or non-sound locos.</p> <pre><code>AUTOMATION(123,\"Dogbath to Catflap shuttle\")\n  FON(0) FON(3) DELAY(2000) FOFF(3) // light on, sound whistle for 2 seconds\n  FWD(40)\n  AT(167) SPEED(15) \n  AT(165) ESTOP\n  FOFF(0)  // turn off light \n  DELAYRANDOM(15000,20000)  \n  FON(0) FON(3) DELAY(2000) FOFF(3) // Lights and whistle\n  REV(40)  \n  AT(166) SPEED(15) \n  AT(164) ESTOP \n  DELAYRANDOM(5000,10000)  \n  FOLLOW(123) \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/41-improved-shuttle/#signals","title":"Signals","text":"<p>Signals don't actually control trains, the drivers do. But for model purposes it is sufficient to include signal changes in the engine driving script.</p> <p>In this case we will define a signal at each end of the line using RED &amp; GREEN leds on extender vpins 170..173. and use them to go green when a train is allowed to leave each station. Each signal is then only referred to by the first pin, as you will see.</p> <p>Remember, its just for show because there can be no other trains on this line anyway. (Well at least until we get to some more advanced scenarios.)</p> <p>Define the signals anywhere but not normally inside an AUTOMATION or other sequence.</p> <pre><code>SIGNALH(170,0,171) // Dogbath depart. Red LED on 170, Green on 171, no amber\nSIGNALH(172,0,173) // Catflap Depart. \n\nAUTOMATION(123,\"Dogbath to Catflap shuttle\")\n  GREEN(170) // set Dogbath departure signal to green\n  FON(0) FON(3) DELAY(2000) FOFF(3) \n  FWD(40)\n  AT(167) SPEED(15)\n  RED(170)  // remember to set Dogbath signal red at some point \n  AT(165) ESTOP FOFF(0) \n  DELAYRANDOM(15000,20000)  \n  GREEN(172) // Set Catflap departure signal to green\n  FON(0) FON(3) DELAY(2000) FOFF(3) \n  REV(40)  \n  AT(166) SPEED(15) \n  RED(172) // rember to reset Catflap signal\n  AT(164) ESTOP \n  DELAYRANDOM(5000,10000)  \n  FOLLOW(123) \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/45-passing-loop/","title":"Passing loop shuttle","text":"<p>A passing loop shuttle involving two trains with a passing loop can be controlled quite easily but involves some more advanced concepts.</p> <p>If we have a layout like this:</p> <pre><code>          164           166\n           |             |              Turnout2\nDogbath ||====[1]=====\\====[4]===&lt;&lt;=========\\\n                       \\===[2]===&gt;&gt;==========\\========[3]==========|| Catflap\n                     Turnout1            |                      |\n                                        167                    165\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/45-passing-loop/#block-reservations","title":"Block Reservations","text":"<p>In EXRAIL we operate multiple trains at the same time and coordinate them with block reservations which is an entirely virtual concept but similar to early era real train operations where a driver must obtain a token from the signalman before proceeding into a particular block. In this example, we don't care which train enters the loop first or how it affects the other train. We define (in our minds) the block numbers which are shown in <code>[x]</code> above. There is no need for track breaks or other electronics, just the sensors so a train driver can say \"When I get to the buffers.. STOP!\"</p> <p>For example, a train leaving Dogbath is already occupying <code>[1]</code> but it must reserve <code>[2]</code> before departing in case the other train has been stopped in <code>[2]</code> by a cow on the line. Similarly it cant leave <code>[2]</code> before the other train has cleared <code>[3]</code>.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/45-passing-loop/#basic-passing-loop-logic","title":"Basic passing-loop logic","text":"<p>So, the sequence starting from Dogbath, going to Catflap will look like this:</p> <pre><code>SEQUENCE(100) \n  DELAYRANDOM(5000,10000)\n  RESERVE(2) // will wait with loco stopped until block 2 is available.\n  THROW(1)   // set the turnout so we will enter the loop correctly\n  FWD(40)    // move off\n  AT(167)    // we are in the West&gt;East loop\n  FREE(1)    // we are no longer in block 1\n  RESERVE(3) // This will stop loco if 3 not yet free, and wait.\n  CLOSE(2)   // set turnout to exit loop\n  FWD(40)    // must resume speed if we were stopped.\n  AT(165)    // when we get to Catflap\n  STOP\n  FREE(2)    // we are not in loop\n  FOLLOW(101) // now follow the Catflap -&gt; Dogbath sequence\n</code></pre> <p>And the Catflap to Dogbath sequence will be a similar logic but in reverse and with different sensors etc.</p> <pre><code>SEQUENCE(101)  // Catflap to Dogbath (loco in reverse)\n  DELAYRANDOM(5000,10000)\n  RESERVE(4) // will wait with loco stopped and until block 4 is available.\n  THROW(2)   // set the turnout so we will enter the loop correctly\n  REV(40)    // move off backwards \n  AT(166)    // we are in the E-&gt;W loop\n  FREE(3)    // we are no longer in block 3\n  RESERVE(1) // This will stop loco if 3 not yet free, and wait.\n  CLOSE(1)   // set turnout to exit loop\n  REV(40)    // must resume speed if we were stopped.\n  AT(164)    // when we get to Dogbath\n  STOP\n  FREE(4)    // we are not in loop\n  FOLLOW(101) // now follow the Dogbath-Catflap sequence \n</code></pre> <p>Notice that you don't drive into an area of the track without first reserving the corresponding block, and you must remember to free it once you have safely left. Also the script above assumes that a train can cause the turnout to change quickly enough if it reaches a sensor in the loop and doesn't need to stop, this can be alleviated if you throw/close the turnout behind you as you reach your loop sensor so that the other train does not need to worry about any slow turnout movement.</p> <p>Please bear in mind that your turnout geometry may be different. The diagram is for two right-hand turnouts, you may have used a left/right pair so modify the THROW/CLOSE statements above to suit.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/45-passing-loop/#starting-the-shuttle","title":"Starting the shuttle","text":"<p>We have the issue that one train is starting from the far end, and we have to establish the train positions, directions, initial reserved status and where in the sequence they must start.</p> <p>If we assume that:</p> <ul> <li>Loco id 3 is ready at Dogbath and faces Catflap.</li> <li>Loco id 4 is ready at Catflap and faces Catflap (ie BOTH locos face East).</li> </ul> <p>Then we can create a ROUTE that will appear on your throttle and start the sequences.</p> <pre><code>ROUTE(1,\"Start Dogbath-Catflap\")\nRESERVE(1) // loco is already at Dogbath\nRESERVE(3) // loco is already at Catflap\nSENDLOCO(3,100) // start loco 3 running the sequence from Dogbath\nSENDLOCO(4,101) // start loco 4 running the sequence from Catflap\nDONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/45-passing-loop/#handling-facing-trains","title":"Handling facing trains","text":"<p>If your two trains start facing each other from opposite ends of the loop, you must allow for this change otherwise the train starting at Catflap will be told to reverse when leaving, this is embarrassing to say the least.</p> <p>The INVERT_DIRECTION command tells EXRAIL to invert the FWD/REV commands for the current loco in the current task. Rather than duplicate both sequences with different direction commands, or litter them with IFLOCO checks, we can alter the startup to apply this invert to the task running loco 4 before starting at Catflap.</p> <p>Note that EXRAIL is running a separate task for each loco.</p> <pre><code>ROUTE(1,\"Start Dogbath-Catflap\")\nRESERVE(1) \nRESERVE(3)\nSENDLOCO(3,100) \nSENDLOCO(4,102) // start loco 4 running the inverted sequence from Catflap\nDONE\n\nSEQUENCE(102) // run inverted direction commands from Catflap\n INVERT_DIRECTION // tell current task to invert directions \n FOLLOW(101) // carry on \n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/driving-trains/45-passing-loop/#advanced-extras","title":"Advanced Extras","text":"<p>Once you have this basic shuttle working, you can use the methods described in previous examples to add signals, sound effects or perhaps a level crossing with gates.</p> <p>You may consider having an intermediate station stop along one end of the line or extend the design to use three locos and two passing loops.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/multi-files/","title":"Multiple Files in EXRAIL","text":"<p>EXRAIL commands are read by the compiler only from the file myAutomation.h, the absence of a file with this name means no EXRAIL code is loaded into the command station. However, it is simple to partition myAutomation.h into separate files for the convenience of editing. For example myTurnouts.h, myRoster.h and so on. By ensuring all the files start with \"my\" it avoids issues with name clashes or Git.</p> <p>To include your additional files, use the c++ preprocessor #include control in myAutomation.h to insert the file contents exactly as if you had typed them into myAutomation.h</p> <pre><code>// Include my roster file\n#include \"myRoster.h\"\n// Include my turnout definitions\n#include \"myTurnouts.h\"\n// Special animation\n#include \"myCowOnElectricFence.h\"\n</code></pre> <p>A note to hardened C++ programmers... do not be tempted to add include guards to your .h files.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/multiple-command-stations/","title":"Maintaining multiple command stations","text":"<p>Maybe you have more than one command station and you wish to have slightly different EXRAIL setups, perhaps because you are testing a new release on a separate CPU or need to compile different scripts for different layouts.</p> <p>The C++ compiler pre-processor is available to select various parts of your myAutomation.h based on definitions created in your config.h or those created by defines.he which automates the detection of the CPU type of your command station.</p> <p>For example:</p> <pre><code>#if defined(ARDUINO_ARCH_AVR)\n  // on my Mega, I have signal1 on pins (30,31,32)\n  ALIAS(mysignal1,30)\n#else \n  // on my CSB1 or similar, I use pins 800,801,802 on an expander\n  ALIAS(mysignal1,800)\n#endif\n  SIGNALH(mysignal1,mysignal1+1,mysignal1+2)\n  ONTHROW(1) RED(mysignal1) DONE\n  ONCLOSE(1) GREEN(mysignal1) DONE\n</code></pre> <p>In addition, each EXRAIL command is actually a preprocessor definition so it is possible to use an #ifdef to include a section that uses a new feature but only if the code version has that feature available.</p> <pre><code>#ifdef NEOPIXEL\n   NEOPIXEL(2013,255,255,0)\n#endif   \n</code></pre> <p>Note #ifdef xxx and #if defined(xxx) do the same thing.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/naming-a-sequence/","title":"Naming sequences for easy commands","text":"<p>The DCC-EX command</p> <pre><code>&lt;/START id&gt;\n</code></pre> <p>can be used to start a sequence when the sequence id is known.</p> <p>However its is sometimes more convenient to code a sequence so that it can be started by name.</p> <p>This is made possible by using upper case quoted sequence names with the _hk suffix.</p> <pre><code>SEQUENCE(\"BEER\"_hk)  \n  PRINT(\"BEER sequence started\")\n  ... and so on\n</code></pre> <p>The name must be specified in upper case but it can be started by the command in any mixed case.</p> <pre><code> &lt;/start beer&gt;\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/using-call-return/","title":"Using CALL and RETURN","text":"<p>Where you want to use the same sequence of commands from several places in other sequences you can avoid copying the repeated stuff by using CALL and RETURN</p> <pre><code>ROUTE(1,\"Platform A to mainline\")\n  CALL(911)\n  THROW(1)\n  CLOSE(2)\n  DONE\n\nROUTE(2,\"Platform B to mainline\")\n  CALL(911)\n  CLOSE(1)\n  CLOSE(2)\n  DONE\n\nSEQUENCE(911)\n  SERVO(123,100,Slow)  // move the cow out of the way\n  PLAYSOUND(500,3) // Make it Moo\n  DELAYRANDOM(5000,10000) // make the route wait 5 to 10 seconds\n  RETURN      // return to the calling sequence\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/using-call-return/#notes","title":"Notes","text":"<ul> <li>You can nest CALLs 4 deep.</li> <li>If the called sequence executes a <code>DONE</code> statement, the task is terminated and there is no return.</li> </ul>"},{"location":"products/ex-commandstation/exrail/cookbooks/editing-tricks/using-macros/","title":"Using C++ Macros","text":"<p>The EXRAIL language is compiled by C++ and this means you can use MACROS of your own design according to the C++ compiler pre-processor specification.</p> <p>A MACRO is essentially a tiny program that types stuff for you while substituting parameters.</p> <p>For example: This macro can be used to start two leds flashing alternately at half second intervals:</p> <pre><code>#define FLIPFLOP(led) \\\n   BLINK(led,500,500) \\\n   DELAY(500) \\\n   BLINK(led+1,500,500)\n</code></pre> <p>Notice that a C++ macro must be only one logical line long! So we must use the <code>\\</code> character on the end of the line to indicate that this line is continued on the following.</p> <p>In the above example, the FLIPFLOP macro takes a LED VPIN and starts flashing it, then half a second later it starts flashing the next pin in line. Since the delay and the on/off period are the same, the LEDs will flash alternately.</p> <p>So you might use it in a sequence like this:</p> <pre><code>ONBUTTON(30)\n   FLIPFLOP(32)  // start flashing leds 32 and 33\n   DELAY(4000)   // wait 4 seconds\n   SERVO(123,1033,Slow) // close crossing gates\n   DELAY(3000) // give red-light jumpers a chance to consider their life choices\n   GREEN(34) // change approach signal to green\n   DONE\n</code></pre> <p>and</p> <pre><code>ONBUTTON(31)\n   RED(34) // change approach signal to red\n   SERVO(123,3200,Slow) // Open crossing gates\n   RESET(32,2) // turn off the blinking on pins 32,33\n   DONE\n</code></pre> <p>The servo positions above are of course dependent on your servos and how they are mounted. You must experiment first see Servos.</p> <p>Macros like these are, obviously, more useful if you use the macro in more than one place.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/","title":"Flags, Counters and Bitmaps","text":"<p>These are implemented by a software-only driver that mimics a set of VPINs that can be used for both digital and analogue values. Unlike sensors and leds, these VPINs are both INPUT and OUTPUT  These can be used in many ways:</p> <ul> <li>As a simple digital flag to assist in inter-thread communication.</li> <li>A flag or value that can be set from commands and tested in EXRAIL.(e.g. to stop a sequence)</li> <li>As a counter for looping or occupancy counts such as trains passing over a multi track road crossing.</li> <li>As a collection of 16 digital bits that can be set, reset, toggled, masked and tested.</li> </ul> <p>Existing &lt;&gt; and exrail commands for vpins work on these pins.  </p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#creating-virtual-pins","title":"Creating virtual pins","text":"<pre><code>  HAL(Bitmap,firstpin,npins) \n</code></pre> <p>creates 1 or more virtual pins in software.</p> <p>e.g. <code>HAL(Bitmap,1000,20)</code>  creates pins 1000..1019</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#use-as-flags","title":"Use as flags","text":"<p>When used as a digital flag, these pins can be changed or tested with the basic digital pin commands common to all VPINs.  SET, RESET, BLINK, IF, ONBUTTON, ONSENSOR and so forth. Serial commands operate in the same way.  </p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#use-as-counters","title":"Use as counters","text":"<p>For loop counting, counters can be incremented by <code>BITMAP_INC(1013)</code> and decremented by <code>BITMAP_DEC(1013)</code> and tested with IF/IFNOT/IFGTE etc.</p> <p>Counters be used to automate a multi track crossing where each train entering increments the counter and decrements it on clearing the crossing. Crossing gate automation can be started when the value changes from 0, and be stopped when the counter returns to 0.</p> <p>Detecting the first increment from 0 to 1 can be done with <code>ONBUTTON(1013)</code> and the automation can use <code>IF(1013)</code> or <code>IFNOT(1013)</code> to detect when it needs to reopen the road gates.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#use-as-analogue-values-advanced","title":"Use as analogue values (advanced)","text":"<p>Analog values may be set into the virtual pins and tested using the existing analog value commands and exrail macros. <code>&lt;z vpin value&gt;</code> <code>&lt;D ANIN vpin&gt;</code> etc. and in EXRAIL <code>ANOUT(vpin,value,0,0)</code></p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#use-as-binary-flag-groups-advanced","title":"Use as binary flag groups (advanced)","text":"<p>Virtual pins (and others that respond to an analog read in order to provide bit mapped digital data, such as SensorCam) can be set and tested with new special EXRAIL commands</p> <p><code>IFBITMAP_ALL(vpin,mask)</code>   Bitwise ANDs the  the vpin value with the mask value and is true if ALL the 1 bits in the mask are also 1 bits in the value.     e.g.    <code>IFBITMAP_ALL(1013,0x0f)</code>  would be true if ALL the last 4 bits of the value are 1s.</p> <p><code>IFBITMAP_ANY(1013,0x0f)</code> would be true if ANY of the last 4 bits are 1s.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/flags/#modifying-bitmap-values","title":"Modifying bitmap values","text":"<p><code>BITMAP_AND(vpin,mask)</code> performs a bitwise AND operation. <code>BITMAP_OR(vpin,mask)</code>  performs a bitwise OR operation <code>BITMAP_XOR(vpin,mask)</code> performs a bitwise EXCLUSIVE OR (which is basically a toggle).</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/flags-and-latches/latches/","title":"Latches","text":"<p>Latches were first introduced into EXRAIL as a way of latching a sensor value or pushbutton on, so that once detected it could be checked later and not suffer from bouncing. This use is comparatively rare and has generally been superseded by the more recent ONBUTTON event handler.</p> <p>Latches were also used as a way of setting a flag that could be read later, for example to remember whether a light had been switched on by a ROUTE so that the next call to the same route could switch it off again.</p> <p>Unfortunately, the LATCH implementation was designed in a limited way to support tiny processors like the UNO or NANO so the latch numbers were limited and could only apply to on-board pins and not extended VPINs. It became common to use latch numbers above the real pin numbers but below the artificial software limit (63 on a UNO, 255 on bigger CPUs) for various flags in routes and automations.</p> <p>Because of these limitations, it is recommended that you use the much simpler flags feature which provides virtual VPINs that can be set, reset and tested without the limitations of LATCH.</p> <p>For example:</p> <pre><code>HAL(Bitmap,800,16) // create flags 800..815 \nROUTE(600,\"Shed lights\")\n  IF(800)  // is the light on? \n     RESET(120)  // lights off\n     RESET(800)\n  ELSE  // light is off \n     SET(120)  // lights on\n     SET(800)\n  ENDIF\n  DONE\n</code></pre> <p>Note that the code cannot use <code>IF(120)</code> to test if the light is on because pin 120 is an OUTPUT pin on a physical device.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/neopixels/","title":"NeoPixel support","text":"<p>The IO_NeoPixel.h driver supports the adafruit neopixel seesaw board. It turns each pixel into an individual VPIN which can be given a colour and turned on or off using the the NEOPIXEL EXRAIL macro. EXRAIL SIGNALS can also drive a single pixel signal or multiple separate pixels.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/neopixels/#defining-the-hardware-driver","title":"Defining the hardware driver","text":"<p>Add a driver definition in myAutomation.h for each adafruit I2C driver.</p> <pre><code>    HAL(neoPixel, firstVpin, numberOfPixels [, mode [, i2caddress])\n</code></pre> <p>Where mode is selected from the various pixel string types which have varying colour order or refresh frequency. For MOST strings this mode will be NEO_GRB but for others refer to the comments in IO_NeoPixel.h</p> <p>If omitted the node and i2caddress default to NEO_GRB, 0x60.</p> <p>For example:</p> <pre><code>    HAL(NeoPixel,1000,20)\n</code></pre> <p>This is a NeoPixel driver defaulting to I2C aqddress 0x60 for a GRB pixel string. Pixels are given vpin numbers from 1000 to 1019.</p> <pre><code>    HAL(NeoPixel,1020,20,NEO_GRB,0x61)\n</code></pre> <p>This is a NeoPixel driver on i2c address 0x61.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/neopixels/neopixels/","title":"Setting neopixels","text":"<p>The NEOPIXEL macro provides the ability to set neopixels on or off change the colour. either individually or over a range of pixels.</p> <pre><code>NEOPIXEL([-]vpin, red, green, blue [,count])\n</code></pre> <p>vpin = pin number of the individual pixel in the range defined by the HAL(NeoPixel...) command. red = 0..255 intensity of the red channel green = 0..255 intensity of the green channel blue = 0..255 intensity of the blue channel count = numver of pixels to set, starting at vpin. Default =1.</p> <p>Setting pixels on or off (without colour change) can be done with SET/RESET.</p> <p>Because the pixels obey SET/RESET, the BLINK command can also be used to control blinking a pixel.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/neopixels/signals/","title":"Neopixel signals","text":"<p>There are two types possible:</p> <ul> <li>a mast with separate fixed colour pixels for each aspect</li> <li>a mast with one multiple colour pixel for all aspects.</li> </ul> <p>Bear in mind that a single multicolour neopixel used above might be physically a multi-colour LED (as in a searchlight signal), or 3 individual LEDS wired to a single neopixel chip (as in a 2 or 3 lamp signal).  </p> <p>For separate pixels, the colours should be established at startup and a normal SIGNALH macro used.</p> <pre><code>AUTOSTART \n  SIGNALH(1010,1011,1012)\n  NEOPIXEL(1010,255,0,0)       \n  NEOPIXEL(1011,128,128,0)\n  NEOPIXEL(1012,0,255,0)\n  RED(1010)  // force signal state otherwise all 3 lights will be on\n  DONE\n</code></pre> <p>For signals with 1 neopixel, the NEOPIXEL_SIGNAL macro will create a signal on one vpin with three separate colours</p> <pre><code>NEOPIXEL_SIGNAL(vpin,redfx,amberfx,greenfx)\n</code></pre> <p>redfx,amberfx,greenfx = colour values</p> <p>The fx values above can be created by the NeoRGB macro so a bright red would be <code>NeoRGB(255,0,0)</code>  bright green <code>NeoRGB(0,255,0)</code> and amber something like <code>NeoRGB(255,100,0)</code>. NeoRGB creates a single int32_t value so it can be used in several ways as convenient (but can't be used in an ALIAS command).</p> <pre><code>// create 1-lamp signal with NeoRGB colours\nNEOPIXEL_SIGNAL(1000,NeoRGB(255,0,0),NeoRGB(255,100,0),NeoRGB(0,255,0))\n\n// Create 1-lamp signal with named colours.\n// This is better if you have multiple signals.\n// (Note: ALIAS is not suitable due to word length defaults) \n#define REDLAMP NeoRGB(255,0,0)\n#define AMBERLAMP NeoRGB(255,100,0)\n#define GREENLAMP NeoRGB(0,255,0)\nNEOPIXEL_SIGNAL(1001,REDLAMP,AMBERLAMP,GREENLAMP)\n\n// Create 1-lamp signal with web type RGB colours \nNEOPIXEL_SIGNAL(1002,0xFF0000,0xFF6400,0x00FF00)\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/02-defining-dcc-turnouts/","title":"Defining DCC turnouts","text":"<p>DCC Turnouts (or points) operate by listening to DCC messages sent along the track by the command station. Each turnout has a DCC address which may be specified as a pair of values (address,subaddress) or a single value linear address. Its generally easier to think in terms of the linear address but it makes no difference whatever to the kind of DCC message sent, other than the conversion from (address,subaddress) to linear is badly thought out and inconsistent between DCC implementations due to historically/histerically ambiguous standards.</p> <p>Define DCC based turnouts using EXRAIL.</p> <pre><code>TURNOUTL(id, address, \"description\")\n\nTURNOUT(id, shortAddress, subAddress, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>address- the DCC address that the turnout decoder is listening to   or shortAddress,subAddress - the alternative form of the same address.</p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes <code>\"\"</code>. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>For example:</p> <pre><code>TURNOUTL(123,55,\"Up the junction\")\nTURNOUT(124,12,3,\"Down the mine\")\nTURNOUTL(125,56,HIDDEN) // not visible to throttles\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/03-defining-pin-turnouts/","title":"Defining PIN turnouts","text":"<p>PIN Turnouts operate by detecting the state of an output pin.</p> <p>Define pin based turnouts using EXRAIL.</p> <pre><code>PIN_TURNOUT(id, vpin, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>vpin- the pin to be set HIGH for thrown and LOW for closed  </p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes \u201c\u201d. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>For example:</p> <pre><code>PIN_TURNOUT(6,201,\"Round the bend\")\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/04-defining-servo-turnouts/","title":"Defining Servo turnouts","text":"<p>(This does not include servos driven from track connected DCC decoders. See DCC Decoders)</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/04-defining-servo-turnouts/#important-considerations-for-servo-operation","title":"Important considerations for servo operation","text":"<p>Servo turnouts are driven through a PCA9685 servo control board or an EX-IOExpander.</p> <p>Test, test, test your servo parameters prior to connecting to an actual turnout/point. If you have defined angles that exceed the physical limits of your turnout, you will likely damage it and/or the servo mechanism.</p> <p>Treat each servo and turnout as an individual as not all servos (or turnouts/points for that matter) are created equal. An angle that works with one servo and associated turnout will not necessarily provide the exact same result with another. Differences in servo brands, mounting methods, and even normal manufacturing tolerances will need to be factored in to the servo angles in use.</p> <p>The EX-Toolbox Android application provides a servo movement testing tool to help you discover the necessary values for the angles below.</p> <p>Use flexible wire to connect your servo arm to the turnout/point. Using a flexible connection between the turnout and the servo mechanism means if anything does go wrong such as the turnout getting jammed or an incorrect servo angle being sent, it reduces the chance of damaging the turnout or servo.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/04-defining-servo-turnouts/#defining-servo-based-turnout-objects","title":"Defining servo based turnout objects","text":"<p>Define servo based turnouts using EXRAIL.</p> <pre><code>SERVO_TURNOUT(id, vpin, active_angle, inactive_angle, profile, \"description\")\n</code></pre> <p>id = Unique turnout ID within the CommandStation. All other turnout commands will refer to this turnout by this id.</p> <p>pin = The ID of the pin the servo is connected to, which would typically be the VPin ID of the PCA9685 controller board.</p> <p>active_angle = The angle to which the servo will move when the turnout is thrown (This is a value passed to the servo drtiver, it is not in degrees).</p> <p>inactive_angle = The angle to which the servo will move when the turnout is closed.</p> <p>profile = The speed at which a turnout will move: Instant, Fast, Medium, Slow.</p> <p>description = A human-friendly description of the turnout that will appear in WiThrottle apps and Engine Driver. Note that this must be enclosed in quotes \u201c\u201d. In some cases the HIDDEN keyword can be used here to prevent the turnout being visible to the throttles.</p> <p>An example definition for a servo connected to the second control pins of the first PCA9685 connected to the CommandStation, using the slow profile for prototypical operation:</p> <pre><code>SERVO_TURNOUT(200, 101, 450, 110, Slow, \"Coal yard exit\")\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/11-facing-turnouts/","title":"Facing turnouts","text":"<p>When you have turnouts that face each other, its awkward for the throttle user to have to manually switch both to match each other. By treating the crossover as a single turnout, control is simplified and incorrect combinations are prevented.</p> <p>To do this, we need to hide one of the turnouts from the user, and make sure that throwing/closing the visible turnout automatically throws/closes the other turnout.</p> <p>All turnout definitions in EXRAIL allow for a text description to be shown to the user throttle. The HIDDEN keyword, used instead of a turnout description prevents it being visible to the throttle or JMRI/iTrain etc.</p> <pre><code>TURNOUTL(1,101,\"Cross inner to outer\")\nTURNOUTL(2,102,HIDDEN)\n\nONTHROW(1) THROW(2) DONE\nONCLOSE(1) CLOSE(2) DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/12-animated-turnouts/","title":"Animated turnouts","text":"<p>Switching turnouts is easy, but sometimes you want to make it more realistic by introducing signals, delays and other automations.</p> <p>The combination of hidden and virtual turnouts makes this easy.</p> <p>Lets suppose you have a turnout ID 100 and to make it look realistic you need to set some signal to stop, wait for the signalman to walk accross the lever frame, throw the turnout, wait again and set another signal to green.</p> <p>First we need to hide the real turnout from the throttles. This is done by changing the description to the keyword HIDDEN and giving it a different id so we can refer to it later.</p> <pre><code>  TURNOUTL(100,1,\"Coal yard exit\")  // for example\n</code></pre> <p>is changed to</p> <pre><code>  TURNOUTL(1001,1,HIDDEN) \n</code></pre> <p>Now we can create a virtual turnout that will be seen by the throttles and specify what we want to happen when it is thrown or closed.</p> <pre><code>   VIRTUAL_TURNOUT(100,\"Coal yard exit\")\n\n   ONCLOSE(100)\n     RED(501)  // set approach signal\n     RED(505)  // set approach signal\n     DELAY(4000) // wait for signalman to move\n     CLOSE(1001) // close the real turnout \n     DELAY(5000)\n     GREEN(501) // set approach signal\n     DONE\n\n   ONTHROW(100)\n     RED(501)  // set approach signal\n     RED(505)  // set approach signal\n     DELAY(4000) // wait for signalman to move\n     THROW(1001) // throw the real turnout \n     DELAY(5000)\n     GREEN(505) // set approach signal\n     DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/turnouts/13-toggle-with-button/","title":"Toggle turnouts with button or sensor","text":"<p>A turnout of any type can be toggled by a button or sensor of any type.</p> <pre><code>ONBUTTON(173) TOGGLE_TURNOUT(6) DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/duinoNodes/","title":"Lew's Duino Gear boards","text":"<p>CAUTION: these boards require several GPIO pins on the Command Station and are therefore unsuitable for use with a CSB1 which has all available pins essentially reserved for track management.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/duinoNodes/#dnin8-8-input-board","title":"DNIN8 8 Input board","text":"<p>This is a shift-register implementation of a digital input collector. Multiple DNIN8 may be connected in a chain sequence but it is IMPORTANT that the software configuratuion correctly represents the number of boards connected otherwise the results will be meaningless.</p> <p>Define boards in EXRAIL using HAL(IO_DNIN8, firstVpin, numPins, clockPin, latchPin, dataPin)</p> <pre><code>   HAL(IO_DNIN8, 400, 16, 40, 42, 44)\n</code></pre> <p>This will create VPINs 400-415 using two DNIN8 boards connected in sequence. VPINS 400-407 will be on the first board (closest to the CS) and 408-415 on the second.</p> <p>Note: 16 pins uses two boards. You may specify a non-multiple-of-8 pins but this will be rounded up to a multiple of 8 and you must connect ONLY the number of boards that this takes.</p> <p>This example used Arduino GPIO pins 40,42,44 as these are conveniently side-by-side on a Mega which is easier when you are using a 3 strand cable.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/duinoNodes/#dnin8k-8-input-board","title":"DNIN8K 8 Input board","text":"<p>This module works the same as DNIN8 but you must use DNIN8K in the HAL setup instead of DNIN8. You can't mix 8 and 8k versions in the same string of boards but you can create another string of boards.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/duinoNodes/#dnou8-8-output-board","title":"DNOU8 8 Output board","text":"<p>DNOU8 works in a very similar fashion to the the DNIN boards and is defined in EXRAIL using  HAL(IO_DNOU8, firstVpin, numPins, clockPin, latchPin, dataPin)</p> <pre><code>HAL(IO_DNOU8, 450, 16, 45, 47, 49)\n</code></pre> <p>This creates a string of output VPINs 450-465 (and thus on 2 boards). Note the clock/latch/data pins must be different to any DNIN8 or DNIN8K pins.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/tm-1638/","title":"TM1638 Buttons, leds and 7 segment display","text":"<p>CAUTION: This boards require several GPIO pins on the Command Station but as speed is unimportant, these 3 may be VPINS on another hardware expander such as an MCP23017.</p> <p>The TM1638 board provides a very cheap way of implementing 8 buttons, 8 leds and an 8 digit 7segment display in a package requiring just 5 Dupont wires (vcc, gnd + 3 GPIO pins) from the command station without soldering.</p> <p>This is ideal for prototyping and testing, simulating sensors and signals, displaying states etc. For a built layout, this could provide a control for things that are not particularly suited to throttle 'route' buttons, perhaps lineside automations or fiddle yard lane selection.  </p> <p>The board is defined in EXRAIL using HAL(TM1638,firstVpin,clk,dio,stb)</p> <pre><code>HAL(TM1638,500,29,31,33)\n</code></pre> <p>Creates VPINs 500-507 And describes the VPINs used to connect the clk,dio,stb pins on the TM1638 board.</p> <p>Setting each of the VPINs will control the associated LED (using for example SET, RESET or BLINK in EXRAIL or `   from a command). <p>Unlike most pins, you can also read the same pin number and get the button state, using EXRAIL IF/AT/ONBUTTON etc.</p> <p>All the following examples assume you are using VPIN 500 as the first, leftmost,  led/button on the TM1638 board.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/tm-1638/#using-buttons-and-leds","title":"Using buttons and LEDs","text":"<pre><code>ONBUTTON(500)  // when button 500 is pressed \n  SET(500)     // light the first led\n  BLINK(501,500,500) // blink the second led\n  DELAY(2000)\n  RESET(500) RESET(501)  // turn leds off\n  DONE\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/tm-1638/#using-the-7-segment-display","title":"Using the 7 Segment display","text":"<p>The 8 digit display can be treated as 8 separate digits (left most being the same VPIN as the leftmost button and led) or be written to in sections of any length. Writing uses the existing analogue interface to the common HAL but is awkward to use directly.  To make this easier from EXRAIL, a SEG7 macro provides a remapping to the ANOUT facility that makes more sense.</p> <pre><code>SEG7(vpin,value,format)\n</code></pre> <p>The vpin determines which digit to start writing at. The value can be a 32bit unsigned integer but is interpreted differently according to the format.</p> <p>Format values:</p> <ul> <li>1..8  give the length (number of display digits) to fill, and defaults to decimal number with leading zeros.</li> <li>1X..8X give the length but display in hex.</li> <li>1R..4R treats each byte of the value as raw 7-segment patterns so that it can write letters and symbols using any combination of the 7segments and decimal point. There is a useful description here:</li> </ul> <p>Examples:</p> <pre><code>SEG7(500,3,4)           // writes 0003 to first 4 digits of the display\nSEG7(504,0xcafe,4X)     // writes CAFE to the last 4 digits\nSEG7(500,0xdeadbeef,8X) // writes dEAdbEEF to all 8 digits. \n</code></pre> <p>Writing raw segment patters requires knowledge of the bit pattern to segment relationship:</p> <pre><code>    == 0 ==\n   5|     | 1\n    == 6 ==\n  4 |     | 2\n    == 3 == 7    (7 is decimal point)  \n</code></pre> <p>Thus Letter A is segments  6 5 4 2 1 0, represented in binary (zero bit is on right) as 0b01110111 or 0x77.</p> <p>This is not easy to do my hand and thus a new string type suffix <code>_s7</code> has been introduced to make simple text messages. Note that the HAL interface only has width for 32 bits which is only 4 symbols so writing 8 digits requires two calls.</p> <pre><code>SEG7(500,\"Hell\"_s7,4R) SEG7(504,\"o\"_s7,4R)\nDELAY(1000)\nSEG7(500,\"Worl\"_s7,4R) SEG7(504,\"d\"_s7,4R)\n</code></pre> <p>Note that some letters like k,m,v,x do not have particularly readable 7-segment representation.</p> <p>Credit to https://github.com/dvarrel/TM1638 for the basic formulae.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/trainbrains/","title":"Trainbrains Devices","text":"<p>These devices are available from trainbrains.eu and operate over I2C.</p> <p>They auto-detect the device type so it is only necessary to provide HAL statements in myAutomation.h to identify that the device on the given address is a Trainbrains device and the number of VPINs that will be reserved for it by DCC-EX. </p>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/trainbrains/#turnout-drivers-solenoid-and-servo","title":"Turnout drivers (solenoid and servo)","text":"<p>Use the HAL statement to identify the device I2C address and create PIN_TURNOUT definitions so that DCC-EX sees the vpins as turnouts.</p> <pre><code>HAL(Trainbrains,700,2,0x14)\nPIN_TURNOUT(1,700,\"Coal yard exit\")\nPIN_TURNOUT(1,701,\"Oil yard exit\")\n</code></pre> <p>This creates VPINS 700 and 701 as turnouts. All other turnout operations in DCC-EX operate as normal. This isn't going to work if the devivce at I2C address 0x15 is not a Trainbrains turnout controller.</p>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/trainbrains/#signal-controller","title":"Signal controller","text":"<p>The signal controller only has one VPIN but may have hundreds of different combinations of lamps, blinking and state. This can be handled by pretending it is a NEOPIXEL signal and setting the Red channel to the lamp combination, the Blue channel to the blinking combination and the Green channel to the signal state. (Refer to Trainbrains documentation for details)</p> <p>For example: (This is taken from the NEOPIXEL definitions, TODO we can replace this with a suitable alias. Just replace the colour values with the lamps,blink,state values. )</p> <pre><code>HAL(Trainbrains,720,1,0x15)\n\n// create 1-lamp signal with NeoRGB colours\nNEOPIXEL_SIGNAL(720,NeoRGB(255,0,0),NeoRGB(255,100,0),NeoRGB(0,255,0))\n\n// Create 1-lamp signal with named colours.\n// This is better if you have multiple signals.\n// (Note: ALIAS is not suitable due to word length defaults) \n#define REDLAMP NeoRGB(255,0,0)\n#define AMBERLAMP NeoRGB(255,100,0)\n#define GREENLAMP NeoRGB(0,255,0)\nNEOPIXEL_SIGNAL(702,REDLAMP,AMBERLAMP,GREENLAMP)\n\n// Create 1-lamp signal with web type RGB colours \nNEOPIXEL_SIGNAL(702,0xFF0000,0xFF6400,0x00FF00)\n</code></pre> <p>Signal values can be manually tested using the  command like this <pre><code>&lt;o vpin lamps flashes state&gt;\n</code></pre> <p>To have a disco party, try </p> <pre><code>&lt;o 702 255 255 1&gt;\n</code></pre> <p>For more than 3 signal aspects (other than RED/AMBER/GREEN) it is suggested that you create macros that will set the signal to the nearest equivalent RED/AMBER/GREEN and then overwrite the aspect with a NEOPIXEL command. In this way the IFRED/ONRED etc features will still work but the actual lamp display could be anything.</p> <pre><code>#define SHUNT(x) \\\nAMBER(x)  \\\nNEOPIXEL(x,10,2,2)\n</code></pre>"},{"location":"products/ex-commandstation/exrail/cookbooks/various-devices/trainbrains/#sensors","title":"Sensors","text":"<p>The block occupancy sensor has 3 blocks.</p> <pre><code>HAL(Trainbrains,730,3,0x13)\n</code></pre> <p>makes virtual pins 730..732 usable as sensors like any other in DCC-EX</p>"},{"location":"products/ex-commandstation/trackmanager/00-trackmanager/","title":"TrackManager","text":"<p>TrackManager is what lets you dynamically configure the outputs of your Command Station as either:</p> <ul> <li>Main DCC track output</li> <li>Programming DCC track output</li> <li>DC mode</li> <li>DCC Auto Reverse</li> <li>DCC Booster</li> </ul> <p>Track A defaults to MAIN.  Track B defaults to PROG.  </p> <p>Track mode can be defined in myAutomation.h Example: Set a track to DC</p> <p>This screen shows where track modes can be set with Engine Driver:  </p> <p> </p> <p>NOTE: \u00a0 DC output is only available with specific hardware requirements.</p> <p>TrackManager  -  reference document Multi-district DC mode track sync -  additional detail As these pages are under development, you may also want to refer to the legacy documentation</p>"},{"location":"products/ex-fastclock/01-overview/","title":"EX-FastClock","text":"<p>Welcome to the home of EX-FastClock, a fully integrated Fast Clock for EX-CommandStation.</p> <p>EX-FastClock is a standalone adjustable speed clock built using an additional Arduino Uno microcontroller and a plug-in shield type TFT touch screen.  The commands built into the DCC_EX Command Station make it possible to also integrate an existing microcontroller based fast clock.</p>"},{"location":"products/ex-fastclock/01-overview/#background","title":"Background","text":"<p>This project is based on a project originally written by Jim Gifford (Hallet Cove Southern) in June 2017.  This project used a 32 x 8 LED matrix to display the time and was controlled by a number of pushbuttons.</p> <p>See Jim's Original Project here.</p> <p>I felt that this project was ripe for an update and decided to convert Jim's code to operate using a cheap TFT/LCD touch screen to run on my own layout. This project is the result.  Much of the code has been rewritten into smaller functions with additional features added, but the time clock calculations are the originals.</p> <p>This project has now been extended to add the capability of integrating the clock to the DCC-EX Command Station and more specifically the EXRAIL automation feature which now allows time based control. This feature is optional and can be controlled by the config.h file.</p>"},{"location":"products/ex-fastclock/01-overview/#what-is-ex-fastclock","title":"What is EX-FastClock?","text":"<p>EX-FastClock is a standalone microprocessor based fast adjustable speed clock, using an additional Arduino Uno in conjunction with a shield based TFT touchscreen. Features have been added to EX-CommandStation to allow the clock to integrate to the EX-CommandStation and control EXRAIL based on time events.</p> <p></p> <p>Each time the time changes the EX-CommandStation looks for a time change event and if it finds a match it executes the commands recorded for that event as defined in the EXRAIL myAutomation.h file.  Additionally the EX-CommandStation will issue a time broadcast so that other devices such as clock repeaters can capture the time.  Also where WiThrottle devices are connected a WiThrottle broadcast is made which means that connected devices such as Engine Driver can display the time.</p> <p>EX-FastClock allows the FastClock device to connect to the EX-CommandStation via either Serial Communications or I2C.  Even though EX-FastClock provides the code for an Uno based Clock it should be possible for tinkerer level users to add the relevant code if they already have a working clock that they wish to integrate to EX-CommandStation.</p> <p>To make full use of EX-FastClock**, you will need a basic understanding of EX-RAIL automation, but we'll share the details and some examples to help with this.</p> <p>NOTE: EX-FastClock is in public Beta testing, and as such, we encourage regular feedback on the success or otherwise of both the software and documentation. Please reach out via any of our support methods and help us get EX-FastClock as easy to use and reliable as possible.</p> <p>The EX-FastClock integration includes:</p> <ul> <li>A ready-made Arduino program for an Arduino Uno based Fast Clock</li> <li>Support for Serial connection</li> <li>|I2C| device driver</li> <li>EX-RAIL automation support</li> <li>Time Broadcast for time display on WiThrottle controllers such as |Engine Driver|</li> <li>Debug output to Serial Monitor</li> </ul>"},{"location":"products/ex-fastclock/01-overview/#credit-where-credit-is-due","title":"Credit where credit is due","text":"<p>*The EX-FastClock is based on a project originally written by Jim Gifford (Hallet Cove Southern) in June 2017. That project used a 32 x 8 LED matrix to display the time and was controlled by a number of pushbuttons. You can see Jim's Original Project here.</p> <ul> <li>MCUFRIEND.kbv credit: This library was written by David Prentice and has become the De-Facto standard for the shield based TFT screens used in this project. This library inherits from the Adafruit GFX library.</li> <li>Adafruit for the Adafruit GFX Library.</li> </ul>"},{"location":"products/ex-fastclock/01-overview/#next-steps","title":"Next Steps","text":"<p>Now that you have a general overview of EX-FastClock's features and capabilities, click the \"next\" button see what is needed to create an EX-FastClock.</p>"},{"location":"products/ex-fastclock/02-hardware/","title":"Hardware","text":""},{"location":"products/ex-fastclock/02-hardware/#what-you-need-for-ex-fastclock","title":"What you need for EX-FastClock","text":"<ul> <li>An EX-CommandStattion running version 5.0.0 or later</li> <li>An Arduino Uno microcontroller</li> <li>An MCUFRIEND type plug in shield TFT touchscreen</li> <li>A suitable power supply</li> <li>Dupont type wires to connect the components, male to female or female to female as required</li> <li>A USB cable to connect the Arduino to a PC to load the software</li> </ul> <p>The software for the  EX-FastClock can be found in the  EX-FastClock repository in the DCC-EX GitHub.  The code can be configured to run a clock which will communicate to the Command Station by either Serial or I2C.  The options are chosen from the file config.h.  Instructions are contained in the README.md file.  Which option you choose will depend upon weather you have serial throttles connected to the serial ports in which case I2C might be the better option.  Alternatively if you already have lots of I2C devices then it might be better to run the Serial option.</p> <p>Given that the MCUFREIND style shield is a shield and uses the A4 pin as LCD_RST it is necessary to make a modification to enable the I2C communication.  This involces cutting the A4 pin and soldering a jumper from LCD_RST on the back of the TFT board to the pin that aligns with the UNO RST pin.  However if one is intending to configure the clock as a serial device then this modification is not required.</p> <p></p> <p>This modification allow the A4 &amp; A5 to operate correctly as I2C and was suggested by David Prentice who wrote the MCUFRIEND.kbv library that this project uses.  A discussion on this modification can be found on the Arduino forum here.</p> <p>If using Serial communication no modification is required. Pins 0 &amp; 1 (TX/RX) are unused on the LCD PCB therefore wires may be soldered to the Arduino PCB to run to Serial connections on the CS.</p> <p>Now that you know what you need, click the \"next\" button see how you use  EX-FastClock.</p>"},{"location":"products/ex-fastclock/04-calibration/","title":"Calibration","text":"<p>The MCUFRIEND style shield used in this project is usually a cheap(ish) import from China.  These come with a variety of processor chips and various tolerances on the touch screen.  As such before use it is necessary to carry out a calibration routine.  The MCUFRIEND library contains a routine for this and a number ot test programs to test out the functionality of the TFT/Touch screen.</p> <p>To carry out the calibration please carry out the following steps:</p> <p>In either VSCODE/PlatformIO or Arduino IDE locate and load the sketch TouchScreen_Calibr_Native.ino  This should be found in the MCUFRIEND_kbv/examples folder in the libraries.  By default this test is setup to run using the screen in Portrait mode which is the correct orientation.</p> <p>Load a System Monitor - this will display any output from the test program.</p> <p>Compile and upload this sketch to the Arduino UNO - this should generate the screen shown below.</p> <p></p> <p>Touching the screen will then display the calibration screen shown in Fig 2 below:</p> <p></p> <p>As requested - using a stylus press the crosses displayed in the squares in turn.  When this process is complete the configuration data will be displayed on the screen.  The same data should be displayed on the System Monitor.  The output should look like that shown in Fig 3 below:</p> <p></p> <p>Cut/Copy the two lines indicated in Fig 3. and paste them into the appropriate space in the config.h file from the EX-Fast_Clock code.</p>"},{"location":"products/ex-fastclock/05-installation/","title":"Installation","text":"<p>The EX-FastClock Software will be found in the appropriate repository in the DCC-EX repository on Github</p> <p>This repositry currently contains two branches:</p> <ol> <li>Main.  This branch contains a copy of the code and ancilliary files on PlatformIO configuration.</li> <li>Arduino IDE.  This branch contains the files in the necessary structure for use with the Ardiuino IDE</li> </ol>"},{"location":"products/ex-fastclock/05-installation/#libraries","title":"Libraries","text":"<p>The project requires three libraries -</p> <ul> <li>Adafruit_GFX</li> <li>Adafruit_Touchscreen</li> <li>MCUFRIEND_kbv.  </li> </ul> <p>All three can be installed from the Arduino IDE library manager or Platformio Library system as required however for compatability where possible use the copies supplied in the repositiory folder.</p>"},{"location":"products/ex-fastclock/05-installation/#platformio","title":"Platformio","text":"<p>Select the Main branch from the repository and click on the CODE button.  Select Download ZIP file option.  Extract the files from the download and place the files in a folder within your Projects directory.</p>"},{"location":"products/ex-fastclock/05-installation/#arduino-ide","title":"Arduino IDE","text":"<p>Select the Arduino IDE branch from the repository and click on the CODE button.  Select Download ZIP file option.  Create a folder within your Arduino sketch folder called EX-Fast_Clock.  Copy the files EX-Fast_Clock.ino, EX-FastClock.h and config.h to this folder.  Copy the directories from the libraries folder into the Arduino libraries folder.</p>"},{"location":"products/ex-fastclock/05-installation/#both-environments","title":"Both Environments","text":"<p>I have  generated two special fonts for the project which can be found in the Fonts folder in the Adafruit GFX Library in this repository.  These should be copied into the fonts folder in the Adafruit_GFX library once installed. The file Arial9pt7b.h congtains a fullset of the Arial Font as used in Windows.  The file Arial48pt7b.h contains a large 48pt Arial font containing only charachters 0-9 and :.  This is used to display the time clock on the screen.  The full font was too large to fit into the Uno memory.</p>"},{"location":"products/ex-fastclock/06-configuration/","title":"Configuration","text":"<p>The FastClock can either operate in one of three modes:</p> <ul> <li>Standalone</li> <li>Serial Communication with the CS</li> <li>I2C Communication with the CS.</li> </ul> <p>To indicate which mode is in use it is necessary to edit the config.h file.</p>"},{"location":"products/ex-fastclock/06-configuration/#standalone-use","title":"Standalone use","text":"<p>The config.h file comes pre-configured to use the clock in standalone mode.  No changes are necessary.</p>"},{"location":"products/ex-fastclock/06-configuration/#serial-mode","title":"Serial Mode","text":"<p>To communicatein Serial mode it is necessary to edit the config.h file and uncomment the following line:</p> <pre><code>//#define SEND_VIA_SERIAL true\n</code></pre> <p>This will load the appropriate code including the Wire library.</p>"},{"location":"products/ex-fastclock/06-configuration/#i2c-mode","title":"I2C mode","text":"<p>To operate in I2C mode edit the config.h file and uncomment the following lines:</p> <pre><code>//#define I2CAddress 0x55 // default I2C address\n//#define SEND_VIA_I2C true\n</code></pre> <p>In this mode the CS will poll the FastClock to obtain the time.  It is necessary to set the same I2C address here as used in the myHal.cpp file within the CS.  This is set to a default of 0x55 (decimal 85) but can be set to some other value if this conflicts with othere I2C devices on your setup.</p>"},{"location":"products/ex-fastclock/06-configuration/#screen-header","title":"Screen Header","text":"<p>By default the top of the clock screen displays the name of my own layout.  To inset your layout name then change the following line.</p> <pre><code>char header[HDDR_SIZE] = {\"Nantyderry Junction\"};\n</code></pre>"},{"location":"products/ex-fastclock/06-configuration/#touchscreen-configuration","title":"Touchscreen Configuration","text":"<p>Finally insert the output of the touchscreen configuration program into the file in place of the following two lines.</p> <pre><code>const byte XP = 7, XM = A1, YP = A2, YM = 6;\nconst int TS_LEFT=899,TS_RT=122,TS_TOP=100,TS_BOT=898;\n</code></pre>"},{"location":"products/ex-fastclock/06-configuration/#configure-existing-clock","title":"Configure existing clock","text":"<p>If you already have a FastCLock there are a number of couple of configuration options which allow you to connect your own clock to a  Command Station.</p> <p>The various configuration options are outlined below</p>"},{"location":"products/ex-fastclock/06-configuration/#connecting-your-own-fastclock","title":"Connecting your own FastClock","text":""},{"location":"products/ex-fastclock/06-configuration/#connecting-via-serial","title":"Connecting via Serial","text":"<p>Connecting via Serial is the simplest option if available.  </p> <ul> <li>Run a dupont cable from the TX pin on the arduino to a RX pin on the EX-CommandStation.  It is not usually necessary to run a cable from RX to the TX on the EX-CommandStation as  the FastClock is not receiving data back.</li> <li>Find the Serial defines in the config.h file (or copy config.example.h to config.h if you dont have one), locate the following lines:</li> </ul> <pre><code>//#define SERIAL1_COMMANDS\n//#define SERIAL2_COMMANDS\n//#define SERIAL3_COMMANDS\n</code></pre> <p>and uncomment the appropriate one for the serial port you are using.</p> <ul> <li>Add the following code to your Setup() function:</li> </ul> <pre><code>Serial.begin(115200);\nwhile (!Serial) {\n; // wait for serial port to connect. Needed for native USB port only\n}\n</code></pre> <ul> <li>Include the following routine within your code:</li> </ul> <pre><code>void SendTime(byte hour, byte mins, byte speed) {\n\n  int itime = (hour * 60) + mins;\n  char buffer[20];\n  sprintf(buffer, \"&lt;JC %d %d&gt;\", itime, speed);\n  Serial.println(buffer);\n}\n</code></pre> <ul> <li>Each time the time changes call the SendTime routine as follows:</li> </ul> <pre><code>SendTime(HH, MM, clockSpeed);\n</code></pre> <p>where HH = the hour, MM = minutes and clockSpeed = the fast speed (e.g. at spped 4, 15 seconds represents a minute).</p>"},{"location":"products/ex-fastclock/06-configuration/#connecting-via-i2c","title":"Connecting via I2C","text":"<p>Connecting via I2C involves a HAL driver file to the Command Station as well as adding some code to the existing FastClock code.  Follow the following steps:</p> <ul> <li>In the  Command Station code copy the file myHal.cpp_example.txt to myHal.cpp.</li> <li>Edit the file myHal.cpp and uncomment the following line near the beginning of the file</li> </ul> <pre><code>//  #include \"IO_EXFastClock.h\"  // FastClock driver\n</code></pre> <ul> <li>Uncomment the following line near the end of the file</li> </ul> <pre><code>//  EXFastClock::create(0x55);\n</code></pre> <p>0x55 (decimal 85) is the default address but needs to match that in the FastClock code (see below).</p> <ul> <li> <p>Using Dupont connectors connect SDA/SCL/Gnd on the clock to SDA/SCL/Gnd on the  Command Station</p> </li> <li> <p>Include the following code in your FastClock code:</p> </li> </ul> <p>Near the top of the sketch:</p> <pre><code>#include &lt;Wire.h&gt;\n</code></pre> <p>Within your Setup():</p> <pre><code>Wire.begin(I2CAddress);\nWire.onRequest(TransmitTime);\n</code></pre> <p>Add the following function within the sketch</p> <pre><code>void TransmitTime() {\n    // send the data over I2C\n    // send the time as &lt;mmmm&gt; as two bytes followed by clockspeed\n    int timetosend = (HH * 60) + MM;\n    byte TimeArray[2];\n\n    TimeArray[0] = (timetosend &gt;&gt; 8);\n    TimeArray[1] = timetosend &amp; 0xFF;\n    Wire.write(TimeArray, 2);\n    Wire.write(clockSpeed);      \n}\n</code></pre> <p>In the function above  HH is the time as hours (24hr. clock) and MM is the minutes.</p> <ul> <li>The CommandStation-EX will now poll the FastClock to request the time.  The frequency at which it does so is influenced by the clock speed (i.e. on a slow clock speed it polls less often).</li> </ul> <p>Now that you know how to connect your existing FastCLock, click the \"next\" button see how you use EX-FastClock.  </p>"},{"location":"products/ex-fastclock/10-operation/","title":"Operation","text":"<p>At startup the clock will calculate a start time based on either a) a coded start time (currently 6:00 a.m.) or b) a run time stored in the EEPROM (see item 2) below.</p> <p>The clock will start in a paused state and will display the speed rate factor (default = x 4).  Once any adjustemts have been made the clock can be started.  The usage of the six buttons are as below:</p> <ol> <li>Start - Pressing this button will start the clock and the button text will change to Pause.  </li> <li>Save - Pressing this button will pause the clock and save the current time and Speed Factor to the EEPROM.  These figures will be used to initialise the clock on nextstartup.</li> <li>Reset - Pressing this button will pause the clock and set the time to 06:00 with a speed factor of 4.</li> <li>T+ - Pressing this key will pause the clock and add 15 minutes to the time.</li> <li>T- - Pressing this key will pause the clock and deduct 15 minutes from the time.</li> <li>Rate - Pressing this key will increase the speed factor to the next level.  The speed factor will cycle around the seven speed settings of 1, 2, 4, 6,, 8, 12 &amp; 30.</li> </ol> <p>In Serial Mode, at startup the initial clock time will be sent to the Command Station but when in a paused state no further time commands are sent until the START button is pressed.</p> <p>In I2C mode the Command Station polls the FastClock at intervals.</p>"},{"location":"products/ex-fastclock/15-timecontrol/","title":"Time Control","text":""},{"location":"products/ex-fastclock/15-timecontrol/#exrail-commands","title":"EXRAIL Commands","text":"<p>Commands have been included in EXRAIL allow events to be controlled by the clock.  The new commands are:</p> <pre><code>ONCLOCKTIME( hour, mins)\n</code></pre> <p>and</p> <pre><code>ONCLOCKMINS( mins )\n</code></pre> <p>For details of how to use these commands see the Clock Control Cookbook.</p>"},{"location":"products/ex-fastclock/15-timecontrol/#testing-timed-sequences","title":"Testing Timed Sequences","text":"<p>If one is testing out a sequence using a timed command it can be done quickly without using the clock by entering commands from the System Monitor.  The form of the command is:</p> <pre><code>&lt;JC mmmm ss&gt; \n</code></pre> <p>Details are again on the Clock Control Cookbook.</p>"},{"location":"products/ex-ioexpander/00-ex-ioexpander/","title":"EX-IOExpander","text":"<p>TODO</p>"},{"location":"products/ex-motorshield8874/00-ex-motorshield8874/","title":"EX-MotorShield8874","text":"<p>TODO</p>"},{"location":"products/ex-turntable/00-ex-turntable/","title":"EX-Turntable","text":"<p>Refer to the legacy EX-Turntable documentation for the time being.</p>"},{"location":"products/ex-wifishield8266/00-ex-wifishield8266/","title":"EX-WiFiShield8266","text":"<p>TODO</p>"},{"location":"purchasing/01-official-sellers/","title":"Official DCC-EX Suppliers","text":"<p>With the ever increasing demand for hardware that is guaranteed to be DCC-EX compatible, and the uptake of EX-CommandStation by more Conductor level users, we are striving to make the DCC-EX ecosystem more accessible.</p> <p>As part of that, and starting with the release of the EX-MotorShield8874, we have a number of official DCC-EX dealers that can supply various different hardware devices as well as complete EX-CommandStation systems.</p> <p>The dealers listed on this page work with the DCC-EX team to ensure these devices are compatible.</p> <p>International purchasers</p> <p>If you are not in any of these countries, be aware that each dealer can usually ship anywhere in the world. Each dealer's primary territory is listed, so purchase from the one closest to you to save on shipping and duty charges.</p>"},{"location":"purchasing/01-official-sellers/#in-the-united-states-serving-usa-canada-mexico","title":"In the United States serving USA, Canada, &amp; Mexico","text":"<ul> <li>DCC-EX Store</li> <li>Smart Hobby, LLC</li> </ul>"},{"location":"purchasing/01-official-sellers/#in-england-serving-the-uk","title":"In England serving the UK","text":"<ul> <li>Chesterfield Model Making and Miniature Electronics (Chesterfield also sells cases for DIY builds)</li> <li>ACI Model Railways</li> </ul>"},{"location":"purchasing/01-official-sellers/#in-austria-serving-the-european-union-eu","title":"In Austria serving the European Union (EU)","text":"<ul> <li>Model Railway Electronics powered by Semify</li> </ul>"},{"location":"purchasing/01-official-sellers/#in-australia-serving-au-nz-and-apac","title":"In Australia serving AU, NZ, and APAC","text":"<ul> <li>Millennium Engineering Pty Ltd</li> <li>Buckambool Model Trains</li> </ul>"},{"location":"purchasing/02-third-party-sellers/","title":"Third Party Products and Sellers","text":""},{"location":"purchasing/02-third-party-sellers/#rosscoe","title":"Rosscoe","text":"<p>One of our very active Discord users Rosscoe offers various different accessory products, both DCC and I2C.</p> <p>Visit the Rosscoe Shop to see what's on offer.</p>"},{"location":"purchasing/02-third-party-sellers/#david-yale","title":"David Yale","text":"<p>David provides the files to make a 3D printed case or can sell an already made case to fit the Mega |EX-CS| with a motor shield, Wi-Fi shield, and LCD display. He has several designs.</p> <p>David's Makerbot Thingiverse page</p> <p>David's DCC-EX case designs</p> <p></p>"},{"location":"purchasing/02-third-party-sellers/#command-station-rack-the-mac-rack","title":"Command Station Rack (The Mac Rack)","text":"<p>Created by Neil McKechnie, this is a rack style 3D printed case that can hold the Command Station Arduino, Motor Shield and Raspberry Pi.</p> <p>Neil's DCC++/EX Controller Case</p> <p></p>"},{"location":"purchasing/02-third-party-sellers/#sumners-mega-dual-configuration-case-3d-print","title":"Sumner's Mega Dual Configuration Case (3D Print)","text":"<p>Created by Sumner Patterson, this is a range of Mega Command Station cases with different configurations and different tops at different heights to handle your boards:</p> <ul> <li>Uno and Motor Shield Case</li> <li>Mega and Motor Shield Case</li> <li>Mega, Motor Shield, and WiFi Board Case</li> <li>Mega, Motor Shield, and Raspberry Pi Case (for JMRI Users)</li> </ul> <p>Sumner's Thingiverse Case Page</p> <p>List of Sumner's 3D printed cases</p> <p></p>"},{"location":"purchasing/02-third-party-sellers/#hans-tanners-iott-cube-case-system-3d-print","title":"Hans Tanner's ioTT cube case system (3D Print)","text":"<p>Hans has created a stacking system of cases similar to the M5Stack system. Using his skill in design and TinkerCAD, he is offering the design files for free for you to 3D print yourself or have printed. He also sells kits and accessories (like a Loconet board) in his Tindie store:</p> <ul> <li>UNO Stackable Case</li> <li>MotorShield Stackable Case</li> </ul> <p>There are various remixes of Hans' designs, so be sure to check them all out.</p> <p>TinkerCAD design files</p> <p>Hans Tanner's IoTT Tindie store</p> <p>YouTube Video describing the enclosure system</p> <p></p> <p></p>"},{"location":"purchasing/02-third-party-sellers/#nebbishs-arduino-mega-case-for-dcc-ex-3d-print","title":"Nebbish's Arduino Mega case for DCC-EX (3D Print)","text":"<p>Case to hold Arduino Mega, motor shield, and .96\" display for DCC-EX</p> <ul> <li>Cover options with and without display</li> <li>Plain cover or one that says DCC Command Station</li> <li>Options for external connections</li> </ul> <p>Nebbish's cases on Thingiverse</p> <p></p> <p></p>"},{"location":"purchasing/03-merchandise/","title":"DCC-EX Merchandise","text":"<p>Another way you can support the DCC-EX Project is to buy our DCC-EX branded merchandise, EX-Merch! Show everyone you are part of our team. There are several items to choose from in various sizes and colours:</p> <ul> <li>Regular T-Shirts</li> <li>Premium T-Shirts</li> <li>Women's T-Shirts</li> <li>Long Sleeve T-Shirts</li> <li>Pullover Hoodies</li> <li>Baseball Hats</li> <li>Toboggans (winter hats)</li> <li>Mugs</li> <li>Stickers</li> </ul> <p>NOTE: There are 3 styles of shirts: plain back, \"I'm a DCC-EX Tinkerer\" on the back, and \"I'm a DCC-EX Engineer\" on the back. Be careful to choose the style you want. Shirts with printing on the back cost slightly more.</p> <p>DCC-EX Merchandise Store</p> <p></p> <p>Here is an example listing for shirts where you need to choose the correct description for either a blank back or the \"Tinkerer\" or \"Engineer\" printing on the back</p> <p></p> <p>And here is an example of an order page where you can select your size and colour for the T-Shirts, Long-Sleeve Shirts, Hoodies, etc.</p> <p></p> <p>We also have 2 kinds of hats, a mug, a sticker, and several different types of shirts. You can click on an image to go directly to that section in the store.</p> <p></p> <p></p> <p></p> <p></p> <p>DCC-EX Merchandise Store</p>"},{"location":"reference/01-serial-command-basics/","title":"Serial Command Basics","text":"<ul> <li>Serial commands are accepted as input from the USB serial connection or a TCP/IP connection.</li> <li>Commands have a single case dependent character opcode and optionaly parameters.</li> <li>Keyword parameters are shown in upper case but may be entered in mixed case.</li> <li>Value parameters are decimal numeric (unless otherwise noted)</li> <li>Not all commands have a response, and broadcasts mean that not all responses come from the last commands that you have issued.</li> <li>Commands entered like <code>&lt;JA&gt;</code> are actually read as <code>&lt;J A&gt;</code>, so <code>&lt;Ja&gt;</code> is also acceptible.</li> <li>Commands that produce diagnostic information (which is intended for human reading rather than code) only write to the USB Serial output.</li> <li>Commands that cause state changes (such as loco speeds, turnout position) cause broadcasts to all serial connections and, where appropriate, WiThrottle protocol connections.</li> </ul>"},{"location":"reference/04-track-manager/","title":"Track Manager","text":"<p>If you are only interested in a standard setup using just a DCC track and PROG track, then you DO NOT need to read the rest of this document.</p> <p>What follows is for advanced users interested in managing power districts and/or running DC locomotives through DCC-EX.</p>"},{"location":"reference/04-track-manager/#what-is-the-track-manager","title":"What is the Track Manager","text":"<p>Track Manger (TM from now on) is an integral part of the command station software that is responsible for:</p> <ul> <li>Managing track power state.</li> <li>Monitoring track overloads and shorts.</li> <li>Routing the DCC main or prog track waveforms to the correct Motor Driver and thus track.</li> <li>Managing the JOIN feature.</li> <li>Intercepting throttle commands to locos running on DC tracks.</li> <li>Handling user or EXRAIL commands to switch track status.</li> </ul> <p>In the default scenario of a single DCC track and a PROG track, the TM behaves as for the previous versions of DCC-EX so if thats what you want, you dont need to mess with it.</p> <p>The TM is able to handle up to 8 separate track domains. Each domain requires a hardware driver to supply track voltage. A typical motor driver shield supplies two tracks, which is what we have used in the past as main and prog.</p> <p>Unlike the older version of DCC-EX, where the shield channel A was always the DCC main and channel B was always the DCC prog track, TM allows:</p> <ul> <li>None, any or all the tracks can be DCC Main.</li> <li>None or ONE track may be DCC prog at any given time.</li> <li>Any track may be powered on or off independently of the others.</li> <li>Any track may be disconnected from the DCC signal and used as a DC track with a given loco address. (See DC discussion later)</li> </ul> <p>With such flexibility comes responsibility... the potential for making mistakes means taking extra care with your configuration!</p> <p>NOTE: TM does NOT use \"zero stretching\" to control your DC motor. Instead, it uses true Pulse Width Modulation (PWM) to efficiently run your loco using the same method a decoder uses to control a DCC loco's motor. DC locos can even run better on TM than they can on a normal analog throttle, especially at low speed, since it is always applying the full track voltage, albeit in pulses of varying duration.</p>"},{"location":"reference/04-track-manager/#using-the-track-manager-dcc","title":"Using the Track Manager (DCC)","text":"<p>TM names the tracks A to H. In a default setup, you will normally have tracks A and B where A will default to be the DCC main signal and B will be the DCC prog.</p> <p>There is a new user command <code>&lt;=&gt;</code> which is used to control the TM but the <code>&lt;0&gt;</code> and <code>&lt;1&gt;</code> commands operate as before.</p> <ul> <li><code>&lt;=&gt;</code>  lists the current track settings.</li> </ul> <p>In a default setup this will normally return</p> <pre><code>&lt;=A MAIN&gt;\n&lt;=B PROG&gt;\n</code></pre> <ul> <li><code>&lt;=t MAIN&gt;</code>  sets track t (A..H) to use the DCC main track.   For example <code>&lt;=C MAIN&gt;</code> sets track C. All tracks that are set to DCC will receive the same DCC signal waveform.</li> <li><code>&lt;=t PROG&gt;</code> Sets track t (A..H) to be the one and only PROG track. Any previous PROG track is turned off.</li> <li><code>&lt;=t OFF&gt;</code> turns off the track t. It will not power on with <code>&lt;1&gt;</code> because it will not know what signal to send.</li> </ul> <p>In an all-DCC environment it is unlikely that you will need to do anything other than setting any additional tracks (C...H) as DCC in your <code>myAutomation.h</code> file.  Example:  Startup - Define Tracks</p> <p>Bear in mind that a track may actually be only connected to DCC accessories such as signals and turnouts... your layout, your choice.</p> <p>Note that when setting a track to PROG or OFF, its power is switched off automatically. (The PROG track manages power on an as-needed basis under normal circumstances. When setting a track to MAIN (or DC, DCX see later) the power is applied according to the most recent <code>&lt;1&gt;</code> or <code>&lt;0&gt;</code> command as being the most compatible with previous versions.</p>"},{"location":"reference/04-track-manager/#using-the-track-manager-dc","title":"Using the Track Manager (DC)","text":"<p>TM allows any or all of your tracks to be individually selected as a DC track which responds to throttle commands on any given loco address. So for example if track A is set to DC address 55, then any throttle commands to loco 55 will be transmitted as DC onto track A and thus a DC loco can be driven along that track. almost exactly as if it was DCC. Your throttle (JMRI, EX-Webthrottle, Withrottle, Engine Driver etc.) do not know or care that this is a DC loco so nothing needs to change.</p> <p>For a simple Command Station setup to run just two DC tracks instead of DCC, you only need to assign DC addresses to tracks A and B. If you want DCC on track A and DC on track B, you just need to set track B to a suitable DC address.</p> <p>The command to set a track to a DC address is as follows</p> <ul> <li><code>&lt;=t DC a&gt;</code> Sets track t (A..H) to use loco address, example &lt;=A DC 3&gt;</li> </ul> <p>A simple two separate loop DC track, wired the traditional way in opposite directions, may be set like this to use loco addresses 1 and 2.  </p> <pre><code>&lt;=A DC 1&gt;\n&lt;=B DC 2&gt;\n</code></pre>"},{"location":"reference/04-track-manager/#crossing-between-dc-tracks","title":"Crossing between DC tracks","text":"<p>There are some slightly mind-bending issues to be addressed, especially if you want to be able to cross between two separate DC tracks or use your layout in DCC or DC mode. This is because the control of DC loco direction is relative to the TRACK and not the LOCO. (you turn a DC loco round on the track and it continues in the same geographical direction. You turn a DCC loco around and it continues to go forwards or backwards in the opposite geographical direction.)</p> <p>Generally DC tracks are wired so that two mainline tracks are in opposite direction which makes operation easy BUT crossovers between tracks will cause shorts unless you have very complex switching arrangements. This is generally incompatible with DCC wiring which expects to be able to cross between tracks with impunity because they are all wired with the same polarity.</p> <p>To get over this issue TM allows the polarity of a DC track to be swapped so that tracks wired for DCC may be switched to DC with a polarity chosen at run time according to your operations. So, for example, you may have two loops with a crossing between them. Normally you need them in opposite directions, but when you need to drive over the crossing, you need to switch one or other track so that they are at the same polarity. (This is a good case for using EXRAIL to help)</p> <p>The command <code>&lt;=t DCX a&gt;</code> will set track t (A..H) to be DC but with reversed polarity compared with a track set to DC.</p> <p>Its perfectly OK to cross between DC tracks by setting them to the same loco address and making sure you get the polarity right!</p>"},{"location":"reference/04-track-manager/#connecting-hardware","title":"Connecting Hardware","text":"<p>Each track requires hardware to control it</p> <ul> <li>Power on/off</li> <li>Polarity (direction, signal etc.)</li> <li>Brake (shorts tracks together)</li> <li>Current (analog reading)</li> </ul> <p>The standard motor shields provide this for two separate tracks and are predictable and easy to use. However STACKING shields is not a viable way of adding more tracks because it prevents the software from gaining access to the individual track pins. Similarly, wiring all the signal pins together for example, will give you a shared DCC signal but it will eliminate any possibility of switching the track purpose at run time. So, you are going to have to understand enough to wire track drivers to various pins if you wish to extend beyond 2 tracks and take advantage of TM.</p> <p>You will also need to consider the implications of differing electronic implementations that would cause unexpected issues when a loco moves between tracks. We know this works fine for a typical shield because we use <code>&lt;1 JOIN&gt;</code> quite happily but this may be different if you mix hardware types..... (NOT MY PROBLEM !)</p> <p>The easiest way to consider the wiring is to treat each track individually (either as a separate driver or as half of a shield).</p> <p>You will require, for each track, on the Arduino:</p> <ul> <li>A GPIO pin (or a HAL vpin perhaps on an I2C extender, code TBA!!!) to switch power.</li> <li>A GPIO pin to switch the signal direction</li> <li>A GPIO pin with PWM capability to switch the Brake (you may omit this if you don't want any DC capability)</li> <li>(Optional) An Analog pin to read the current (unless your hardware cant do that, perhaps its just feeding a booster)</li> <li>(Optional) A GPIO fault pin if that's how your hardware works. (NOT recommended as you're going to run out of pins)</li> </ul> <p>IF you have no more than 3 tracks and you can arrange for the signal pins to be one of 11,12,13 on a Mega, THEN there is a slight advantage internally and the waveform will be super-sharp.</p> <p>IMPORTANT: Hardware that has two signal pins still needs some code though</p>"},{"location":"reference/04-track-manager/#configuring-the-software","title":"Configuring the Software","text":"<p>Configuring the software to provide more tracks is a simple extension of the existing method of customising the #define of MOTOR_SHIELD_TYPE in config.h.</p> <p>Since there can be no standard setup of your wiring and hardware choices, it will be necessary to create your custom-built MOTOR_SHIELD_TYPE in the manner described in MotorDrivers.h and simply continue to add more <code>new MotorDriver(</code> definitions to the list, providing all the pin numbers and electronic limits for each track [or even shorten the list to 1] )</p>"},{"location":"reference/04-track-manager/#using-exrail-to-control-track-manager","title":"Using EXRAIL to control Track Manager","text":"<p>EXRAIL has a single additional command that can be used to automate TM.</p> <ul> <li> <p><code>SET_TRACK(t,mode)</code>, where t is the track letter A..H and mode is one of:</p> <ul> <li><code>OFF</code>: track is switched off</li> <li><code>MAIN</code>: track gets DCC signal</li> <li><code>PROG</code>: track gets DCC prog signal</li> <li><code>DC</code>: track is set to DC mode with the cab address of the currently executing EXRAIL sequence.</li> <li><code>DCX</code>: as DC but with reversed polarity.</li> </ul> </li> </ul> <p>DC/DCX are designed so that you can be automating a DCC loco, drive it onto a separate track and switch to DC without having to know the cab address. (e.g AUTOMATION) If however you are just running a ROUTE you can always do something like this:</p> <pre><code> ROUTE(77,\"Set track G to DC 123\")\n   SETLOCO(123)\n   SET_TRACK(G,DC)\n   SET_POWER(G,ON)\n   DONE\n</code></pre>"},{"location":"reference/04-track-manager/#where-and-how-for-the-code","title":"Where and How for the Code","text":"<p>The TM code is primarily in TrackManager.cpp which is responsible for coordinating the track settings and commands.</p> <p>Each individual track is handled by an instance of MotorDriver created from the <code>MOTOR_SHIELD_TYPE</code> definition in config.h</p> <p>Many functions formerly in the DCCWaveform code have been moved to TrackManager or MotorDriver, notably the power control and checking. This makes the code easier to follow.</p>"},{"location":"reference/05-dc-mode-logic/","title":"DC Mode - Logic Gate Circuits","text":"<p>This additional information may be useful for those who are not using CSB1 or EX8874, and would like to understand what would be needed for DC mode with other motor boards/shields.</p> <p>With DC mode, the PWM signal is provided with the brake pin.  The Signal-1 pin provides direction.</p> <p>These diagrams provide options on how logic gates could be used to provide imputs In1, In2 for motor boards, such as L298N or IBT_2.  </p> <p>NOTE: L298P and L298HN motor shields use the XNOR gate.  To enable low side brake in both directions, an additional logic gate can be used.</p> <p> </p>"},{"location":"reference/05-dc-track-sync/","title":"DC Mode Track Sync","text":"<p>This is additional information on how to sync adjacent districts when using DC mode tracks.</p> <p>The DCC signal for all tracks uses a single timer; the tracks in multiple DCC districts will be in sync.  The only issue is that the tracks must have the same phase when crossing to another district.</p> <p>With DC tracks and PWM voltages and frequencies, there are multiple timers to consider. In the case of a reversing loop, there are also hardware considerations. DC mode is not compatible with the DCC two signal pin method. (see below)  </p>"},{"location":"reference/05-dc-track-sync/#timers-brake-pins","title":"Timers / Brake Pins","text":"<p>CSB1 / ESP32 - Tracks with the same throttle will be in sync.  </p> <p>Mega - Tracks where the brake pin is on the same timer will be in sync when using the same throttle or speed. - Frequency updates will impact all tracks using the same timer.</p> <pre><code>timers/pins defined for DC mode on Mega 2560\n  Pins 9, 10      :  timer 2   Track A\n  Pins 6, 7, 8    :  timer 4   Tracks D, C, B\n  Pins 44, 45, 46 :  timer 5\n</code></pre> <p>Nucleo-F4 - Tracks with the same PWM frequency and throttle or speed will be in sync when updated code is used. - Frequency updates will impact all tracks using the same timer. - Timers 1-4, 9, 13 have been tested for use with Nucleo-F4.  Those timers should not be used for other purposes. - Further discussion on the Discord server may be helpful to gain an understanding of the issues.</p>"},{"location":"reference/05-dc-track-sync/#hardware-considerations","title":"Hardware considerations","text":"<p>Brake pin provides the PWM signal. Signal-1 pin provides direction in DC mode.  </p> <p>The two signal pin method is used with some motor boards for DCC.  Those boards do not work for DC mode, unless logic gate circuitry is added.</p> <p>CSB1 and EX8874 provide low side brake in both directions.</p> <p>Low side brake in both directions - - - The XNOR gate of the standard motor shield and clones will have high side brake in one direction and low side brake in the other.  This precludes a reversing loop, as the reverse does not result in tracks being in sync in the adjacent district.  </p> <p>The voltage between the rails results in the engine's direction. - With low side brake, one rail is low and the other has the PWM voltage. - With high side brake, one rail is high and the other has a PWM voltage offset.    </p> <p>\u00a0 \u00a0 \u00a0 \u00a0 Example with voltages at 25% throttle. </p> <p>Additional detail  -  DC mode - Logic Gate Circuit </p>"},{"location":"reference/06-advanced-config-h/","title":"Advanced config.h settings for Command Station build","text":"<p>The basic Motor Shield, WiFi and Ethernet settings are covered in detail in basic config.h</p> <p>The following additional settings are for special cases and are not normally created automatically by the EX-Installer.</p> <p>These options should be coded in the file <code>config.h</code> which will be automatically included in the compilation process.</p>"},{"location":"reference/06-advanced-config-h/#non-standard-motor-shields","title":"Non-standard Motor Shields","text":"<p>Further pre-defined shield names can be found in the code file MotorDrivers.h although their presence there does not necessarily mean that we can provide support for issues.</p> <p>In extreme cases, it is possible to craft your own definition for example:</p> <pre><code>#define MY_SHIELD F(\"MINE\"), \\\n new MotorDriver( 3, 12, UNUSED_PIN, 9, A0, 5.08, 3000, A4), \\\n new MotorDriver(11, 13, UNUSED_PIN, 8, A1, 5.08, 1500, A5)\n#define MOTOR_SHIELD_TYPE MY_SHIELD\n</code></pre> <p>refer to MotorDrivers.h for details of parameter meanings. Do NOT attempt to alter MotorDrivers.h or you will face versioning difficulties.</p> <p>NOTE: Before connecting these boards and selecting one in this software check the quick install guides! Some of these boards require a voltage generating resistor on the current sense pin of the device. Failure to select the correct resistor could damage the sense pin on your Arduino or destroy the device.</p>"},{"location":"reference/06-advanced-config-h/#motor-shield-max-current","title":"Motor shield max current","text":"<p>If you want to restrict the maximum current LOWER than what your motor shield can provide, you can do that here. For example if you have a motor shield that can provide 5A and your power supply can only provide 2.5A then you should restrict the maximum current to 2.25A (90% of 2.5A) so that DCC-EX shuts off the track before your PS does shut DCC-EX. MAX_CURRENT is in mA so for this example it would be 2250, adjust the number according to your PS. If your PS has a higher rating than your motor shield you do not need this. You can use this as well if you are cautious and your trains do not need full current.</p> <pre><code>#define MAX_CURRENT 2250\n</code></pre>"},{"location":"reference/06-advanced-config-h/#tcpip-advanced-settings","title":"TCP/IP Advanced settings","text":"<ul> <li>Control of IP port (default 2560). We cant think of any reason why this would ever need to be changed.</li> </ul> <pre><code>#define IP_PORT 2560\n</code></pre> <ul> <li>DONT_TOUCH_WIFI_CONF means WIFI config will be done with the &lt;+&gt; commands and this sketch will not change anything over AT commands and the other WIFI_* defines do not have any effect.</li> </ul> <pre><code>#define ENABLE_WIFI true\n#define DONT_TOUCH_WIFI_CONF\n</code></pre> <ul> <li>WIFI_HOSTNAME: The default is \"dccex\" but you can change this if you have more than one CS on you home router to make them show up with different names on the network. Host names starting with \"dccex\" are more readily found by WiFi throttles.</li> </ul> <pre><code>#define WIFI_HOSTNAME \"dccex-csb1\"\n</code></pre> <ul> <li>Ethernet IP_ADDRESS can be set but it is preferable to omit this and have the router assign an address using DHCP.</li> </ul> <pre><code>#define IP_ADDRESS { 192, 168, 1, 200 }\n</code></pre> <ul> <li>MAX_NUM_TCP_CLIENTS: If you on STM32 Ethernet (and only there) want more than  9 () TCP clients, change this number to for example 20 here *AND** in  STM32lwiopts.h and follow the instructions in STM32lwiopts.h</li> </ul> <p>(*) It would be 10 if there would not be a bug in LwIP by STM32duino.</p> <pre><code>#define MAX_NUM_TCP_CLIENTS 20\n</code></pre>"},{"location":"reference/06-advanced-config-h/#lcdoled-support","title":"LCD/OLED support","text":"<p>In order to avoid wasting memory the current scroll buffer is limited to 8 lines.  Some users wishing to display additional information such as TrackManager power states have requested additional rows aware of the warning that this will take extra RAM.  if you wish to include additional rows</p> <pre><code>#define MAX_CHARACTER_ROWS 12\n</code></pre>"},{"location":"reference/06-advanced-config-h/#disable-eeprom","title":"Disable EEPROM","text":"<p>The EEPROM feature is only there for backward support of deprecated methods of turnout, sensor and output creation inherited from DCC++. You are advised to turn this off to save memory.</p> <pre><code> #define DISABLE_EEPROM\n</code></pre>"},{"location":"reference/06-advanced-config-h/#disable-prog","title":"Disable PROG","text":"<p>If you do not need programming capability, you can disable all program track related commands. You might want to do that if you are building a command station that drives multiple tracks and you do not have a spare track output for programming.</p> <pre><code> #define DISABLE_PROG\n</code></pre>"},{"location":"reference/06-advanced-config-h/#redefine-dcc-boundary-between-short-and-long-loco-addresses","title":"Redefine DCC boundary between SHORT and LONG loco addresses","text":"<p>According to NMRA the last short address is 127 and the first long address is 128. There are manufacturers which have another view. Lenz CS, for example, have considered addresses long from 100. If  you want to change to that mode, do</p> <pre><code>#define HIGHEST_SHORT_ADDR 99\n</code></pre> <p>If you want to run all your locos addressed long format, you could even do</p> <pre><code>#define HIGHEST_SHORT_ADDR 0\n</code></pre> <p>DCC-EX does not support to use the same address, for example 100(long) and 100(short) at the same time, there must be a border.</p>"},{"location":"reference/06-advanced-config-h/#redefine-locomotive-state-table-size","title":"Redefine locomotive state table size","text":"<p>This is the maximum number of locos that can be controlled at the same time. This defaults to 50 (8 on a UNO/NANO). If you have enough free memory you can increase this to a maximum of 255. If you are short of memory (typically a Mega with WiFi and lots of accessories) you can decrease it  to a minimum of 2.</p> <pre><code>#define MAX_LOCOS 100\n</code></pre>"},{"location":"reference/06-advanced-config-h/#define-turnouts-and-accessories-to-follow-norm-rcn-213","title":"Define TURNOUTS and ACCESSORIES to follow norm RCN-213","text":"<p>According to norm RCN-213 a DCC packet with a 1 is closed-straight and one with a 0 is thrown-diverging.  In DCC++ Classic, and in previous versions of DCC++EX, a turnout throw command was implemented in the packet as '1' and a close command as '0'. The #define below makes the states match with the norm.  But we don't want to cause havoc on existent layouts, so we define this only for new installations. If you don't want this, don't add it to your config.h.</p> <pre><code>#define DCC_TURNOUTS_RCN_213\n</code></pre> <p>By default, the driver which defines a DCC accessory decoder does send out the same state change on the DCC packet as it receives. This means a VPIN state=1 sends D=1 (close turnout or signal green) in the DCC packet. This can be reversed if necessary.</p> <pre><code>#define HAL_ACCESSORY_COMMAND_REVERSE\n</code></pre> <p>If you have issues with that the direction of the accessory commands is reversed (for example when converting from another CS to DCC-EX) then you can use this to reverse the sense of all accessory commands sent over DCC-EX. This #define likewise inverts the behaviour of the  command for triggering DCC Accessory Decoders, so that  generates a DCC packet with D=1 (close turnout) and  generates D=0 (throw turnout). <pre><code>#define DCC_ACCESSORY_COMMAND_REVERSE\n</code></pre>"},{"location":"reference/06-advanced-config-h/#handling-multiple-serial-throttles","title":"Handling multiple serial throttles","text":"<p>The command station always operates with the default Serial port. Diagnostics are only emitted on the default serial port and not broadcast. Other serial throttles may be added to the Serial1...Serial6 ports which may or may not exist on your CPU. (Mega has 3, CSB1 has 1, and STM32 have up to 6.)</p> <p>To monitor a throttle on one or more serial ports, supply a #define for each serial port required.</p> <p>NOTE: DO NOT define here the WiFi shield serial port or your Wifi will not work.</p> <pre><code>// SERIAL1 in use by Wifi\n#define SERIAL2_COMMANDS\n#define SERIAL3_COMMANDS\n#define SERIAL4_COMMANDS\n#define SERIAL5_COMMANDS\n#define SERIAL6_COMMANDS\n</code></pre>"},{"location":"reference/06-advanced-config-h/#bluetooth-serial-on-esp32","title":"Bluetooth serial ON ESP32","text":"<p>On ESP32 you have the possibility to use the builtin BT serial to connect to the CS.</p> <p>The CS shows up as a pairable BT Classic device. Name is \"DCCEX-hexnumber\". BT is as an additional serial port, debug messages are still sent over USB, not BT serial.</p> <p>If you enable this there are some implications:</p> <ol> <li>WiFi will sleep more (as WiFi and BT share the radio). So WiFi performance may suffer</li> <li>The app will be bigger that 1.2MB, so the default partition scheme will not     work any more. You need to choose a partition scheme with 2MB (or bigger).     For example \"NO OTA (2MB APP, 2MB SPIFFS)\" in the Arduino IDE.</li> <li>There is no securuity (PIN) implemented. Everyone in radio range can pair     with your CS.</li> </ol> <pre><code>#define SERIAL_BT_COMMANDS\n</code></pre>"},{"location":"reference/06-advanced-config-h/#booster-input-pin-on-esp32-cs","title":"Booster input pin on ESP32 CS","text":"<p>On ESP32 you have the possibility to define a pin as booster input</p> <p>Arduino pin D2 is GPIO 26 is Booster Input on ESPDuino32</p> <pre><code>#define BOOSTER_INPUT 26\n</code></pre> <p>GPIO 32 is Booster Input on EX-CSB1</p> <pre><code>#define BOOSTER_INPUT 32\n</code></pre>"},{"location":"reference/06-advanced-config-h/#esp32-led-wifi-indicator","title":"ESP32 LED Wifi Indicator","text":"<p>GPIO 2 on ESPduino32</p> <pre><code>#define WIFI_LED 2\n</code></pre> <p>GPIO 33 on EX-CSB1</p> <pre><code>#define WIFI_LED 33\n</code></pre>"},{"location":"reference/06-advanced-config-h/#sabertooth","title":"SABERTOOTH","text":"<p>This is a very special option and only useful if you happen to have a Sabertooth motor controller from Dimension Engineering configured to take commands from and ESP32 via serial at 9600 baud from GPIO17 (TX) and GPIO16 (RX, currently unused).</p> <p>The number defined is the DCC address for which speed controls are sent to the sabertooth controller as_well. Default: Undefined.</p> <pre><code>#define SABERTOOTH 1\n</code></pre>"},{"location":"reference/06-advanced-config-h/#tuning-for-deprecated-unonano","title":"Tuning for deprecated UNO/NANO","text":"<p>By default VDPY and DIAGs are disabled on a Uno/Nano to reduce PROGMEM and RAM requirements.</p> <p>They can be re-enebled if you have space by the commands.</p> <p>It is also possible to save RAM using the MAX_LOCOS setting less than tghe default 8.</p> <pre><code>#define ENABLE_VDPY\n#define ENABLE_DIAG\n#define MAX_LOCOS 4\n</code></pre>"},{"location":"reference/07-command-station-arch/","title":"Command Station Internal Architecture","text":"<p>TODO</p> <p></p> <p>This diagram is old but basically ok. Needs editing to</p> <ul> <li>Do better at css dark/light</li> <li>TPL renamed to EXRAIL</li> <li>have hotlinks on boxes to the relevant adres of the doc and/or the actual code modules in git.</li> <li>maybe convert to mermaid.</li> </ul>"},{"location":"reference/08-throttle-writers-guide/","title":"Throttle Writers Guide (doc incomplete)","text":"<p>TODO</p> <p>The commonly used speed, function, loco programming and diagnostic commands are discussed elsewhere with users in mind. However, there are a large number of commands designed only to be used by other programs such as JMRI, Engine Driver or other throttles specifically aimed at the DCC-EX protocol. (not WiThrottle)</p> <p>Many commands that have been implemented to assist throttle authors to obtain information from the Command Station in order to implement turnout, route/automation and roster features. Some of these commands are deliberately milti-stage requests to avoid timing and blocking issues caused by massive transmissions (e.g. a full list of turnouts with descriptions) that can cause Command Station issues.</p> <p>Broadcast replies are also designed so that a throttle can maintain loco speed and function states, turnout poisitions and route states.</p>"},{"location":"reference/08-throttle-writers-guide/#turnouts","title":"Turnouts","text":"<p>The conventional turnout definition commands and the <code>&lt;H&gt;</code> responses do not contain information about the turnout description which may have been provided in an EXRAIL script. A turnout description is much more user friendly than T123 and having a list helps the throttle UI build a suitable set of buttons.</p> <p><code>&lt;JT&gt;</code> command returns a list of turnout ids. The throttle should be uninterested in the turnout technology used but needs to know the ids it can throw/close and monitor the current state. e.g.  response <code>&lt;jT 1 17 22 19&gt;</code></p> <p><code>&lt;JT 17&gt;</code> requests info on turnout 17. e.g. response <code>&lt;jT 17 T \"Coal yard exit\"&gt;</code> or <code>&lt;jT 17 C \"Coal yard exit\"&gt;</code> (T=thrown, C=closed) or <code>&lt;jT 17 C \"\"&gt;</code> indicating turnout description not given. or <code>&lt;jT 17 X&gt;</code> indicating turnout unknown (or possibly hidden.)</p> <p>NOTE: It is still the throttles responsibility to monitor the status broadcasts. There is no intention of providing a command that indicates the turnout list has been updated since the throttle started.</p> <p>NOTE: Turnouts marked in EXRAIL with the HIDDEN keyword instead of a \"description\" will NOT show up in these commands.</p>"},{"location":"reference/08-throttle-writers-guide/#automationsroutes","title":"Automations/Routes","text":"<p>A throttle need to know which EXRAIL Automations and Routes it can show the user.</p> <p><code>&lt;JA&gt;</code> Returns a list of Automations/Routes  e.g. <code>&lt;jA 13 16 23&gt;</code>  Indicates route/automation ids.  Information on each id needs to be obtained by  <code>&lt;JA 13&gt;</code>  returns e.g. <code>&lt;jA 13 R \"description\"&gt;</code> for a route  or  <code>&lt;jA 13 A \"description\"&gt;</code> for an automation.  or <code>&lt;jA 13 X&gt;</code> for id not found</p> <p>What's the difference:</p> <p>A Route is just a call to an EXRAIL ROUTE, traditionally to set some turnouts or signals but can be used to perform any kind of EXRAIL function... but its not expecting to know the loco.     Thus, a route can be triggered by sending in for example <code>&lt;/START 13&gt;</code>.</p> <p>An Automation is a handoff of the last accessed loco id to an EXRAIL AUTOMATION which would typically drive the loco away.    Thus, an Automation expects a start command with a cab id    e.g. <code>&lt;/START 13 3&gt;</code></p> <p>Routes and Automations can also have their current status and caption altered dynamically by EXRAIL (docs TODO)</p>"},{"location":"reference/08-throttle-writers-guide/#roster-information","title":"Roster Information","text":"<p>The <code>&lt;JR&gt;</code> command requests a list of cab ids from the roster. e.g. responding <code>&lt;jR 3 200 6336&gt;</code> or  for none. <p>Each Roster entry had a name and function map obtained by: <code>&lt;JR 200&gt;</code>  reply like <code>&lt;jR 200 \"Thomas\" \"whistle/*bell/squeal/panic\"&gt;</code></p> <p>Refer to EXRAIL ROSTER command for function map format.</p> <p>Obtaining throttle status.</p> <p><code>&lt;t cabid&gt;</code>  Requests a deliberate update on the cab speed/functions in the same format as the cab broadcast.     <code>&lt;l cabid slot speedbyte functionMap&gt;</code></p> <p>NOTE: A slot of -1 indicates that the cab is not in the reminders table and this command will not reserve a slot until such time as the cab is throttled.</p>"},{"location":"reference/08-throttle-writers-guide/#commands-to-avoid-todo","title":"COMMANDS TO AVOID TODO","text":"<p><code>&lt;f cab func1 func2&gt;</code>     Use <code>&lt;F cab function 1/0&gt;</code></p> <p><code>&lt;t  slot cab speed dir&gt;</code> Just drop the slot number</p> <p><code>&lt;T commands&gt;</code> other than <code>&lt;T id 0/1&gt;</code></p> <p><code>&lt;s&gt;</code></p> <p><code>&lt;c&gt;</code></p>"},{"location":"reference/08-throttle-writers-guide/#doc-todo","title":"doc TODO","text":"<ul> <li>Route status</li> <li>Momentum</li> <li>Gauges</li> </ul>"},{"location":"reference/serial-commands/","title":"DCC Command Station Protocol","text":"<p>TODO Review tables and commands</p> <p>Complete reference guide for serial commands used with DCC command stations.</p>"},{"location":"reference/serial-commands/#system-commands","title":"System Commands","text":"Command Description Parameters <code>&lt;#&gt;</code> Request number of simultaneously supported locos None <code>&lt;!&gt;</code> Emergency stop all locos None <code>&lt;s&gt;</code> Command station status None <code>&lt;E&gt;</code> Store EEPROM None <code>&lt;e&gt;</code> Clear EEPROM None"},{"location":"reference/serial-commands/#power-control","title":"Power Control","text":"Command Description Parameters <code>&lt;1&gt;</code> Power ON all tracks None <code>&lt;1 MAIN&gt;</code> Power on MAIN track None <code>&lt;1 PROG&gt;</code> Power on PROG track None <code>&lt;1 JOIN&gt;</code> JOIN prog track to MAIN and power None <code>&lt;1 track&gt;</code> Power on given track <code>track</code>: Track identifier <code>&lt;0&gt;</code> Power off all tracks None <code>&lt;0 MAIN&gt;</code> Power off MAIN track None <code>&lt;0 PROG&gt;</code> Power off PROG track None <code>&lt;0 track&gt;</code> Power off given track <code>track</code>: Track identifier"},{"location":"reference/serial-commands/#locomotive-control","title":"Locomotive Control","text":"Command Description Parameters Status <code>&lt;t loco&gt;</code> Request loco status <code>loco</code>: Locomotive ID Active <code>&lt;t loco tspeed direction&gt;</code> Set throttle speed and direction <code>loco</code>: ID, <code>tspeed</code>: 0-127, <code>direction</code>: 0/1 Active <code>&lt;t ignore loco tspeed direction&gt;</code> Set throttle speed and direction Legacy format \u26a0\ufe0f Deprecated <code>&lt;- loco&gt;</code> Remove loco state and reminders <code>loco</code>: Locomotive ID Active <code>&lt;-&gt;</code> Clear loco state and reminder table None Active"},{"location":"reference/serial-commands/#function-control","title":"Function Control","text":"Command Description Parameters Status <code>&lt;F loco function onoff&gt;</code> Set loco function ON/OFF <code>loco</code>: ID, <code>function</code>: Function number, <code>onoff</code>: 0/1 Active <code>&lt;F loco DCCFREQ freqvalue&gt;</code> Set DC frequency for loco <code>loco</code>: ID, <code>freqvalue</code>: Frequency value Active <code>&lt;f loco byte1&gt;</code> Set loco function group <code>loco</code>: ID, <code>byte1</code>: Function byte \u26a0\ufe0f Deprecated <code>&lt;f loco group byte2&gt;</code> Set loco function group <code>loco</code>: ID, <code>group</code>: Group ID, <code>byte2</code>: Function byte \u26a0\ufe0f Deprecated"},{"location":"reference/serial-commands/#turnout-control","title":"Turnout Control","text":"Command Description Parameters <code>&lt;T&gt;</code> List all turnouts None <code>&lt;T id&gt;</code> Delete turnout <code>id</code>: Turnout ID <code>&lt;T id X&gt;</code> List turnout details <code>id</code>: Turnout ID <code>&lt;T id T&gt;</code> Throw turnout <code>id</code>: Turnout ID <code>&lt;T id C&gt;</code> Close turnout <code>id</code>: Turnout ID <code>&lt;T id value&gt;</code> Close (value=0) or Throw turnout <code>id</code>: Turnout ID, <code>value</code>: 0/1 <code>&lt;T id SERVO vpin closedValue thrownValue&gt;</code> Create servo turnout <code>id</code>: ID, <code>vpin</code>: Pin, values for positions <code>&lt;T id VPIN vpin&gt;</code> Create pin turnout <code>id</code>: ID, <code>vpin</code>: Pin number <code>&lt;T id DCC addr subadd&gt;</code> Create DCC turnout <code>id</code>: ID, <code>addr</code>: Address, <code>subadd</code>: Sub-address <code>&lt;T id DCC linearAddr&gt;</code> Create DCC turnout <code>id</code>: ID, <code>linearAddr</code>: Linear address <code>&lt;T id addr subadd&gt;</code> Create DCC turnout <code>id</code>: ID, <code>addr</code>: Address, <code>subadd</code>: Sub-address <code>&lt;T id vpin closedValue thrownValue&gt;</code> Create SERVO turnout <code>id</code>: ID, <code>vpin</code>: Pin, position values"},{"location":"reference/serial-commands/#sensor-control","title":"Sensor Control","text":"Command Description Parameters <code>&lt;S id vpin pullup&gt;</code> Create sensor <code>id</code>: Sensor ID, <code>vpin</code>: Pin, <code>pullup</code>: Pull-up setting <code>&lt;S id&gt;</code> Delete sensor <code>id</code>: Sensor ID <code>&lt;S&gt;</code> List sensors None <code>&lt;Q&gt;</code> List all sensors None"},{"location":"reference/serial-commands/#cv-programming","title":"CV Programming","text":"Command Description Parameters Status <code>&lt;W cv value&gt;</code> Write CV value on PROG track <code>cv</code>: CV number, <code>value</code>: Value Active <code>&lt;W loco&gt;</code> Write loco address on PROG track <code>loco</code>: Address Active <code>&lt;W CONSIST loco&gt;</code> Write consist address on PROG track <code>loco</code>: Address Active <code>&lt;W CONSIST loco REVERSE&gt;</code> Write consist address and reverse flag <code>loco</code>: Address Active <code>&lt;W cv bitvalue bit&gt;</code> Write CV bit on prog track <code>cv</code>: CV, <code>bitvalue</code>: Bit value, <code>bit</code>: Bit position Active <code>&lt;W cv value ignore1 ignore2&gt;</code> Write CV value on PROG track Legacy format \u26a0\ufe0f Deprecated <code>&lt;R cv&gt;</code> Read CV <code>cv</code>: CV number Active <code>&lt;R&gt;</code> Read driveable loco ID None Active <code>&lt;R cv ignore1 ignore2&gt;</code> Read CV value on PROG track Legacy format \u26a0\ufe0f Deprecated <code>&lt;V cv value&gt;</code> Fast read CV with expected value <code>cv</code>: CV number, <code>value</code>: Expected value Active <code>&lt;V cv bit bitvalue&gt;</code> Fast read bit with expected value <code>cv</code>: CV, <code>bit</code>: Bit position, <code>bitvalue</code>: Expected Active <code>&lt;B cv bit bitvalue&gt;</code> Write CV bit <code>cv</code>: CV number, <code>bit</code>: Bit position, <code>bitvalue</code>: Value Active <code>&lt;w loco cv value&gt;</code> POM write CV on main track <code>loco</code>: ID, <code>cv</code>: CV number, <code>value</code>: Value Active <code>&lt;r loco cv&gt;</code> POM read CV on main track <code>loco</code>: ID, <code>cv</code>: CV number Active <code>&lt;b loco cv bit bitvalue&gt;</code> POM write CV bit on main track <code>loco</code>: ID, <code>cv</code>: CV, <code>bit</code>: Position, <code>bitvalue</code>: Value Active"},{"location":"reference/serial-commands/#dcc-accessory-commands","title":"DCC Accessory Commands","text":"Command Description Parameters <code>&lt;a address subaddress activate&gt;</code> Send DCC accessory command <code>address</code>: Address, <code>subaddress</code>: Sub-address, <code>activate</code>: 0/1 <code>&lt;a address subaddress activate onoff&gt;</code> Send DCC accessory command with on/off <code>address</code>: Address, <code>subaddress</code>: Sub, <code>activate</code>: 0/1, <code>onoff</code>: 0/1 <code>&lt;a linearaddress activate&gt;</code> Send DCC accessory command <code>linearaddress</code>: Linear address, <code>activate</code>: 0/1 <code>&lt;A address value&gt;</code> Send DCC extended accessory (Aspect) command <code>address</code>: Address, <code>value</code>: Aspect value"},{"location":"reference/serial-commands/#momentum-control","title":"Momentum Control","text":"Command Description Parameters <code>&lt;m LINEAR&gt;</code> Set momentum algorithm to linear acceleration None <code>&lt;m POWER&gt;</code> Set momentum algorithm based on speed difference None <code>&lt;m loco momentum&gt;</code> Set momentum for loco (accel and braking) <code>loco</code>: ID, <code>momentum</code>: Value <code>&lt;m loco accelerating braking&gt;</code> Set momentum for loco <code>loco</code>: ID, <code>accelerating</code>: Value, <code>braking</code>: Value"},{"location":"reference/serial-commands/#output-control","title":"Output Control","text":"Command Description Parameters <code>&lt;Z&gt;</code> List output definitions None <code>&lt;Z id pin iflag&gt;</code> Create output <code>id</code>: Output ID, <code>pin</code>: Pin number, <code>iflag</code>: Invert flag <code>&lt;Z id active&gt;</code> Set output <code>id</code>: Output ID, <code>active</code>: 0/1 <code>&lt;Z id&gt;</code> Delete output <code>id</code>: Output ID"},{"location":"reference/serial-commands/#pin-control","title":"Pin Control","text":"Command Description Parameters <code>&lt;z vpin&gt;</code> Set pin HIGH if vpin positive, LOW if negative <code>vpin</code>: Pin number (signed) <code>&lt;z vpin analog&gt;</code> Write analog device value <code>vpin</code>: Pin, <code>analog</code>: Value <code>&lt;z vpin analog profile&gt;</code> Write analog device using profile <code>vpin</code>: Pin, <code>analog</code>: Value, <code>profile</code>: Profile ID <code>&lt;z vpin analog profile duration&gt;</code> Change analog value over duration <code>vpin</code>: Pin, <code>analog</code>: Value, <code>profile</code>: Profile, <code>duration</code>: Time"},{"location":"reference/serial-commands/#neopixel-control","title":"NeoPixel Control","text":"Command Description Parameters <code>&lt;o vpin&gt;</code> Set neopixel on (vpin&gt;0) or off (vpin&lt;0) <code>vpin</code>: Pin number (signed) <code>&lt;o vpin count&gt;</code> Set multiple neopixels on/off <code>vpin</code>: Pin, <code>count</code>: Number of pixels <code>&lt;o vpin r g b&gt;</code> Set neopixel colour <code>vpin</code>: Pin, <code>r</code>: Red, <code>g</code>: Green, <code>b</code>: Blue <code>&lt;o vpin r g b count&gt;</code> Set multiple neopixels colour <code>vpin</code>: Pin, <code>r</code>: Red, <code>g</code>: Green, <code>b</code>: Blue, <code>count</code>: Count"},{"location":"reference/serial-commands/#turntable-control","title":"Turntable Control","text":"Command Description Parameters <code>&lt;I&gt;</code> List all turntables None <code>&lt;I id&gt;</code> Broadcast turntable type and current position <code>id</code>: Turntable ID <code>&lt;I id position&gt;</code> Rotate a DCC turntable <code>id</code>: ID, <code>position</code>: Position <code>&lt;I id DCC home&gt;</code> Create DCC turntable <code>id</code>: ID, <code>home</code>: Home position <code>&lt;I id position activity&gt;</code> Rotate an EXTT turntable <code>id</code>: ID, <code>position</code>: Position, <code>activity</code>: Activity <code>&lt;I id EXTT vpin home&gt;</code> Create an EXTT turntable <code>id</code>: ID, <code>vpin</code>: Pin, <code>home</code>: Home position <code>&lt;I id ADD position value angle&gt;</code> Add turntable position <code>id</code>: ID, <code>position</code>: Position, <code>value</code>: Value, <code>angle</code>: Angle"},{"location":"reference/serial-commands/#json-commands","title":"JSON Commands","text":"Command Description Parameters <code>&lt;J M&gt;</code> List stash values None <code>&lt;J M stash_id&gt;</code> Get stash value <code>stash_id</code>: Stash identifier <code>&lt;J M CLEAR ALL&gt;</code> Clear all stash values None <code>&lt;J M CLEAR stash_id&gt;</code> Clear given stash <code>stash_id</code>: Stash identifier <code>&lt;J M stashId locoId&gt;</code> Set stash value <code>stashId</code>: Stash ID, <code>locoId</code>: Loco ID <code>&lt;J M CLEAR ANY locoId&gt;</code> Clear all stash entries containing locoId <code>locoId</code>: Locomotive ID <code>&lt;J C&gt;</code> Get fastclock time None <code>&lt;J C mmmm nn&gt;</code> Set fastclock time <code>mmmm</code>: Minutes, <code>nn</code>: Rate <code>&lt;J G&gt;</code> Report gauge limits None <code>&lt;J I&gt;</code> Report currents None <code>&lt;J A&gt;</code> List routes None <code>&lt;J R&gt;</code> List roster None <code>&lt;J R id&gt;</code> Get roster for loco <code>id</code>: Locomotive ID <code>&lt;J T&gt;</code> Get turnout list None <code>&lt;J T id&gt;</code> Get turnout state and description <code>id</code>: Turnout ID <code>&lt;J O&gt;</code> List turntable IDs None <code>&lt;J O id&gt;</code> List turntable state <code>id</code>: Turntable ID <code>&lt;J P id&gt;</code> List turntable positions <code>id</code>: Turntable ID"},{"location":"reference/serial-commands/#track-manager","title":"Track Manager","text":"Command Description Parameters <code>&lt;=&gt;</code> List track manager states None <code>&lt;= track MAIN&gt;</code> Set track to MAIN <code>track</code>: Track identifier <code>&lt;= track MAIN_INV&gt;</code> Set track to MAIN inverted polarity <code>track</code>: Track identifier <code>&lt;= track MAIN_AUTO&gt;</code> Set track to MAIN with auto reversing <code>track</code>: Track identifier <code>&lt;= track PROG&gt;</code> Set track to PROG <code>track</code>: Track identifier <code>&lt;= track OFF&gt;</code> Set track power OFF <code>track</code>: Track identifier <code>&lt;= track NONE&gt;</code> Set track no output <code>track</code>: Track identifier <code>&lt;= track EXT&gt;</code> Set track to use external sync <code>track</code>: Track identifier <code>&lt;= track AUTO&gt;</code> Update track to auto reverse <code>track</code>: Track identifier <code>&lt;= track INV&gt;</code> Update track to inverse polarity <code>track</code>: Track identifier <code>&lt;= track DC loco&gt;</code> Set track to DC <code>track</code>: Track ID, <code>loco</code>: Loco ID <code>&lt;= track DC_INV loco&gt;</code> Set track to DC with inverted polarity <code>track</code>: Track ID, <code>loco</code>: Loco ID <code>&lt;= track DCX loco&gt;</code> Set track to DC with inverted polarity <code>track</code>: Track ID, <code>loco</code>: Loco ID"},{"location":"reference/serial-commands/#configuration-commands","title":"Configuration Commands","text":"Command Description Parameters <code>&lt;C PROGBOOST&gt;</code> Configure PROG track boost None <code>&lt;C RESET&gt;</code> Reset and restart command station None <code>&lt;C SPEED28&gt;</code> Set all DCC speed commands as 28 step None <code>&lt;C SPEED128&gt;</code> Set all DCC speed commands to 128 step (default) None <code>&lt;C RAILCOM ON&gt;</code> Enable Railcom cutout None <code>&lt;C RAILCOM OFF&gt;</code> Disable Railcom cutout None <code>&lt;C RAILCOM DEBUG&gt;</code> Enable Railcom cutout for scope testing None <code>&lt;C WIFI \"ssid\" \"password\"&gt;</code> Reconfigure stored WiFi credentials <code>ssid</code>: Network name, <code>password</code>: Password"},{"location":"reference/serial-commands/#diagnostic-commands","title":"Diagnostic Commands","text":"Command Description Parameters <code>&lt;D ACK ON&gt;</code> Enable PROG track diagnostics None <code>&lt;D ACK OFF&gt;</code> Disable PROG track diagnostics None <code>&lt;D ACK LIMIT value&gt;</code> Set ACK detection limit mA <code>value</code>: Current limit in mA <code>&lt;D ACK MIN value MS&gt;</code> Set ACK minimum duration mS <code>value</code>: Duration in milliseconds <code>&lt;D ACK MIN value&gt;</code> Set ACK minimum duration \u00b5S <code>value</code>: Duration in microseconds <code>&lt;D ACK MAX value MS&gt;</code> Set ACK maximum duration mS <code>value</code>: Duration in milliseconds <code>&lt;D ACK MAX value&gt;</code> Set ACK maximum duration \u00b5S <code>value</code>: Duration in microseconds <code>&lt;D ACK RETRY value&gt;</code> Set ACK retry count <code>value</code>: Retry count <code>&lt;D CABS&gt;</code> Diagnostic display loco state table None <code>&lt;D RAM&gt;</code> Diagnostic display free RAM None <code>&lt;D CMD ON&gt;</code> Enable command input diagnostics None <code>&lt;D CMD OFF&gt;</code> Disable command input diagnostics None <code>&lt;D RAILCOM ON&gt;</code> Enable Railcom diagnostics None <code>&lt;D RAILCOM OFF&gt;</code> Disable Railcom diagnostics None <code>&lt;D WIFI ON&gt;</code> Enable WiFi diagnostics None <code>&lt;D WIFI OFF&gt;</code> Disable WiFi diagnostics None <code>&lt;D ETHERNET ON&gt;</code> Enable Ethernet diagnostics None <code>&lt;D ETHERNET OFF&gt;</code> Disable Ethernet diagnostics None <code>&lt;D WIT ON&gt;</code> Enable Withrottle diagnostics None <code>&lt;D WIT OFF&gt;</code> Disable Withrottle diagnostics None <code>&lt;D LCN ON&gt;</code> Enable LCN diagnostics None <code>&lt;D LCN OFF&gt;</code> Disable LCN diagnostics None <code>&lt;D WEBSOCKET ON&gt;</code> Enable Websocket diagnostics None <code>&lt;D WEBSOCKET OFF&gt;</code> Disable Websocket diagnostics None <code>&lt;D EEPROM numentries&gt;</code> Dump EEPROM contents <code>numentries</code>: Number of entries <code>&lt;D ANOUT vpin position&gt;</code> Test analog output <code>vpin</code>: Pin, <code>position</code>: Position <code>&lt;D ANOUT vpin position profile&gt;</code> Test analog output with profile <code>vpin</code>: Pin, <code>position</code>: Position, <code>profile</code>: Profile <code>&lt;D SERVO vpin position&gt;</code> Test servo <code>vpin</code>: Pin, <code>position</code>: Position <code>&lt;D SERVO vpin position profile&gt;</code> Test servo with profile <code>vpin</code>: Pin, <code>position</code>: Position, <code>profile</code>: Profile <code>&lt;D ANIN vpin&gt;</code> Display analogue input value <code>vpin</code>: Pin number <code>&lt;D HAL SHOW&gt;</code> Show HAL devices table None <code>&lt;D HAL RESET&gt;</code> Reset all HAL devices None <code>&lt;D TT vpin steps&gt;</code> Test turntable <code>vpin</code>: Pin, <code>steps</code>: Step count <code>&lt;D TT vpin steps activity&gt;</code> Test turntable with activity <code>vpin</code>: Pin, <code>steps</code>: Steps, <code>activity</code>: Activity"},{"location":"reference/serial-commands/#raw-dcc-packets","title":"Raw DCC Packets","text":"Command Description Parameters Status <code>&lt;M ignore d0 d1 d2 d3 d4 d5&gt;</code> Send up to 5 byte DCC packet on MAIN track <code>ignore</code>: Ignored, <code>d0-d5</code>: Hex bytes Active <code>&lt;P ignore d0 d1 d2 d3 d4 d5&gt;</code> Send up to 5 byte DCC packet on PROG track <code>ignore</code>: Ignored, <code>d0-d5</code>: Hex bytes Active <code>&lt;c&gt;</code> Report main track current None \u26a0\ufe0f Deprecated <p>Speed Values</p> <ul> <li>0: Stop</li> <li>1-127: Variable speed (1=slowest, 127=fastest)</li> </ul> <p>Direction Values</p> <ul> <li>0: Reverse</li> <li>1: Forward</li> </ul> <p>Deprecated Commands</p> <p>Commands marked with \u26a0\ufe0f are deprecated and may be removed in future versions. Use the recommended alternatives where available.</p>"},{"location":"reference/z01-Legacy%20command%20references/","title":"Legacy Command Reference","text":"<p>TODO </p> <p>Legacy command reference</p>"},{"location":"reference/csb1/10-csb1-errors-faq/","title":"EX-CSB1 FAQ","text":"<ul> <li> <p>Error indicating the need for installing Windows drivers   link to driver</p> </li> <li> <p>Info regarding the need to add capacitor to enable uploading</p> </li> <li> <p>asdf</p> </li> <li> <p>jkl</p> </li> </ul>"},{"location":"reference/csb1/11-csb1-technical/","title":"EX-CSB1 Technical Reference","text":"<ul> <li> <p>Link to EX-CSB1 Schematic</p> </li> <li> <p>Arduino headers </p> </li> <li> <p>I2C headers </p> </li> <li> <p>How to utilize Serial2</p> </li> <li> <p>other</p> </li> <li> <p>Difference in current sensing vs EX8874</p> </li> </ul> <p>TODO</p>"},{"location":"reference/esp32/16-esp32-ex8874/","title":"WeMos D1 R32 + EX8874","text":"<p>Refer to Complex Build - ESP32 for a general overview. The information below may help explain how to overcome some of the complexities when using the WeMos D1 R32 ESP32.</p>"},{"location":"reference/esp32/16-esp32-ex8874/#wifi-reliability","title":"WiFi reliability","text":"<ul> <li>Solder a 250 to 330 ohms resistor, GPIO_0 to 3.3V, for reliable WiFi when using the WeMos D1 R32 ESP32duino.</li> </ul>"},{"location":"reference/esp32/16-esp32-ex8874/#ioref-voltage","title":"IOREF voltage","text":"<ul> <li> <p>Do not confuse adding the resistor to correct high voltage on GPIO_0 with the need to work around the incorrect voltage of the IOREF pin.</p> </li> <li> <p>From top to bottom the pins are: IO0, 5V (incorrect -- so not Arduino UNO R3 compliant), RESET, 3.3V, 5V, GND, GND, VIN as seen here:  </p> </li> </ul> <p></p> <ul> <li> <p>Note that some ESP32duino boards may not have the IOREF pin location labelled.  Measure the voltage if in doubt.  </p> </li> <li> <p>As the IOREF pin on the WeMos D1 R32 is 5V, modify the EX8874 using the 3V3 IOREF Override solder pad on the EX8874. If this is not done, the ADC inputs will receive up to 5V when the IOREF pin is 5V.</p> </li> <li> <p>Bend the IOREF pin or confirm that the trace connecting the pin is completely cut.  </p> </li> </ul>"},{"location":"reference/esp32/16-esp32-ex8874/#one-ex8874","title":"One EX8874","text":"<p>Review of motor shield define from MotorDrivers.h for ESP32 WeMos R1 D32</p> <pre><code>  #elif defined(ARDUINO_ARCH_ESP32)  \n  // STANDARD shield on an ESPDUINO-32 (ESP32 in Uno form factor). The shield must be eiter the  \n  // 3.3V compatible R3 version or it has to be modified to not supply more than 3.3V to the  \n  // analog inputs. Here we use analog inputs A2 and A3 as A0 and A1 are wired in a way so that  \n  // they are not useable at the same time as WiFi (what a bummer). The numbers below are the  \n  // actual GPIO numbers. In comments the numbers the pins have on an Uno.  \n  #define STANDARD_MOTOR_SHIELD F(\"STANDARD_MOTOR_SHIELD\"), \\  \n    new MotorDriver(25/* 3*/, 19/*12*/, UNUSED_PIN, 13/*9*/, 35/*A2*/, 0.70, 1500, UNUSED_PIN), \\  \n    new MotorDriver(23/*11*/, 18/*13*/, UNUSED_PIN, 12/*8*/, 34/*A3*/, 0.70, 1500, UNUSED_PIN)  \n\n  // EX 8874 based shield connected to a 3.3V system (like ESP32) and 12bit (4096) ADC  \n  // numbers are GPIO numbers. comments are UNO form factor shield pin numbers  \n  #define EX8874_SHIELD F(\"EX8874\"),\\  \n    new MotorDriver(25/* 3*/, 19/*12*/, UNUSED_PIN, 13/*9*/, 35/*A2*/, 1.27, 5000, 36 /*A4*/), \\  \n    new MotorDriver(23/*11*/, 18/*13*/, UNUSED_PIN, 12/*8*/, 34/*A3*/, 1.27, 5000, 39 /*A5*/)  \n</code></pre> <ul> <li>STANDARD_MOTOR_SHIELD and EX8874_SHIELD are pre-defined for use with ESP32 in MotorDrivers.h</li> <li>Do not edit MotorDrivers.h; a custom motor define would be added in config.h</li> <li>Note how the ESP32 GPIO pin numbers are used, and the Arduino pin locations are shown/commented.</li> </ul> <p>Alternate pins A2 and A3 are required for the WeMos D1 R32 / ESP32duino. One EX8874 motor shield would use the motor define EX8874_SHIELD, and update the solder pads to use A2 and A3.</p> <p> </p> <p>When one EX8874 motor shield is used with WeMos R1 D32 ESP32duino, the alternate current sense pins are used as the A0 and A1 pin locations cannot be used as ADC input when WiFi is enabled.</p> <p> </p>"},{"location":"reference/esp32/16-esp32-ex8874/#single-ex8874-checklist","title":"Single EX8874 Checklist","text":"<ul> <li> Cover the barrel connector on WeMos R1 D32, as VIN power will be provided by EX8874</li> <li> Add resistor for WiFi reliability</li> <li> IOREF Override set to 3v3</li> <li> Alternate pins enabled via solder pads</li> <li> <code>#define MOTOR_SHIELD_TYPE EX8874_SHIELD</code> on one line in config.h.</li> </ul>"},{"location":"reference/esp32/16-esp32-ex8874/#stacked-ex8874","title":"Stacked EX8874","text":"<ul> <li> <p>Reminder: No modifications are needed when installing EX8874 for 4 track outputs on EX-CSB1.</p> </li> <li> <p>IOREF: The IOREF override is also needed for the top shield.</p> </li> <li> <p>VIN: Refer to instructions on cutting the VIN trace and disabling the regulator for the top shield.</p> </li> <li> <p>Stacking motor shields on WeMos D1 R32 ESP32duino requires a combination of solder pads and complex wiring.   Note the location of GPIO pins 15 and 33 (image above), where wires or right-angle header pins will need to be installed on the WeMos R1 D32 ESP32duino.</p> </li> </ul> <p> </p> <ul> <li>A custom motor define will be needed in config.h</li> </ul> <pre><code>  #define EX8874_SHIELDX2 F(\"EX8874_SHIELDX2\"), \\  \n    new MotorDriver(25/* 3*/, 19/*12*/, UNUSED_PIN, 13/*9*/, 35/*A2*/, 1.52, 5000, 15), \\  \n    new MotorDriver(23/*11*/, 18/*13*/, UNUSED_PIN, 12/*8*/, 34/*A3*/, 1.52, 5000, 33), \\  \n    new MotorDriver(26/* 2*/,  5/*10*/, UNUSED_PIN, 14/*7*/, 36/*A4*/, 1.52, 5000, 2 /*A0*/), \\  \n    new MotorDriver(16/* 5*/, 17/* 4*/, UNUSED_PIN, 27/*6*/, 39/*A5*/, 1.52, 5000, 4 /*A1*/)  \n  #define MOTOR_SHIELD_TYPE EX8874_SHIELDX2\n</code></pre>"},{"location":"reference/esp32/16-esp32-ex8874/#stacked-ex8874-checklist","title":"Stacked EX8874 Checklist","text":"<ul> <li> Cover the barrel connector on WeMos R1 D32, as VIN power will be provided by one EX8874  </li> <li> Add resistor for WiFi reliability  </li> <li> IOREF Override set to 3v3 on both EX8874 boards  </li> <li> VIN trace cut and regulator disabled on top EX8874  </li> <li> Alternate pins enabled via solder pads  </li> <li> Complex wiring added  </li> <li> Jumpers added for GPIO 15 and 33  </li> <li> Add the custom motor define - 6 lines in config.h  </li> </ul> <p>TODO</p>"},{"location":"reference/esp32/18-esp32-acebott/","title":"ACEBOTT + EX8874","text":"<p>ACEBOTT Beta Testing</p> <p>Please note that the ACEBOTT board is currently in Beta testing, so this information may change at any time. If using this board, we highly recommend joining our Discord server and request access to the <code>#beta-testing</code> channel.</p> <p></p>"},{"location":"reference/esp32/18-esp32-acebott/#acebott-esp32-max-v10","title":"ACEBOTT ESP32 Max v1.0","text":"<ul> <li>Limited testing has been done with this board.</li> <li>Please report any anomalies when using the pins in the suggested custom motor defines.</li> <li>A custom motor define is required when using the ACEBOTT ESP32 board, as the pins are in different locations vs. the WeMos ESP32.</li> <li>There is another version of the ACEBOTT ESP32 which has not been tested.  ACEBOTT focus is on STEM education kits and robotics; uncertain if their quality is better than the WeMos boards, but recent prices are comparable.</li> <li>Do not be fooled by the 5V pin on the I2C header block; there is no onboard level shifting.</li> </ul>"},{"location":"reference/esp32/18-esp32-acebott/#acebott-vs-wemos-r1-d32","title":"ACEBOTT vs. WeMos R1 D32","text":"<ul> <li>Fewer modifications may be required.  </li> <li>WiFi does not need the resistor.  </li> <li>Pin locations A0, A1 can be used for current sensing.  </li> <li>Default pins can be used on EX8874.  </li> </ul>"},{"location":"reference/esp32/18-esp32-acebott/#ioref-voltage","title":"IOREF voltage","text":"<ul> <li>The IOREF pin location has the 5V pin.  If the pin on the EX8874 is bent, the IOREF could be jumpered to 3V3 pin on the EX8874.</li> <li>The preferable work-around to the incorrect 5V pin is to modify the EX8874, using the 3V3 IOREF Override solder pad on the EX8874. If voltage is not correct, the ADC inputs will receive up to 5V when the IOREF pin is 5V.</li> <li>When using the 3V3 IOREF Override, bend the IOREF pin or confirm that the trace connecting the pin is completely cut.</li> </ul>"},{"location":"reference/esp32/18-esp32-acebott/#one-ex8874","title":"One EX8874","text":"<ul> <li>ACEBOTT ESP32 motor defines are not included in MotorDrivers.h</li> <li>Do not edit MotorDrivers.h; a custom motor define should be added in config.h</li> <li>Note how the ESP32 GPIO pin numbers are used, and the Arduino pin locations are shown/commented.</li> </ul> <pre><code>  #define EX8874_ACEBOTT_ESP32 F(\"EX8874_ACEBOTT_ESP32\"), \\  \n    new MotorDriver(26/* 3*/, 16/*12*/, UNUSED_PIN, 19/*9*/, 32/*A0*/, 1.52, 5000, 36/*A4*/), \\  \n    new MotorDriver(17/*11*/,  5/*13*/, UNUSED_PIN, 23/*8*/, 33/*A1*/, 1.52, 5000, 39/*A5*/)  \n  #define MOTOR_SHIELD_TYPE EX8874_ACEBOTT_ESP32\n</code></pre> <ul> <li>When one EX8874 motor shield is used with ACEBOTT ESP32 Max v1.0, the default EX8874 pins are used.  </li> </ul>"},{"location":"reference/esp32/18-esp32-acebott/#single-ex8874-checklist","title":"Single EX8874 Checklist","text":"<ul> <li> Cover the barrel connector on ACEBOTT ESP32, as VIN power will be provided by EX8874  </li> <li> IOREF Override set to 3v3  </li> <li> Add the custom motor define - 4 lines in config.h  </li> </ul>"},{"location":"reference/esp32/18-esp32-acebott/#stacked-ex8874","title":"Stacked EX8874","text":"<ul> <li>Reminder: No modifications are needed when installing EX8874 for 4 track outputs on EX-CSB1.</li> <li>IOREF: The IOREF override is also needed for the top shield.</li> <li> <p>VIN: Refer to instructions on cutting the VIN trace and disabling the regulator for the top shield.</p> </li> <li> <p>Stacking motor shields on ACEBOTT ESP32 requires     a. use of solder pad for 8 alternate pins     b. for Fault pins, bend A4 and A5 pins and jumper to the GPIO headers  </p> </li> </ul> <p> </p> <ul> <li>A custom motor define will be needed in config.h</li> </ul> <pre><code>  #define EX8874X2_ACEBOTT_ESP32 F(\"EX8874X2_ACEBOTT_ESP32\"), \\  \n    new MotorDriver(26/* 3*/, 16/*12*/, UNUSED_PIN, 19/*9*/, 32/*A0*/, 1.52, 5000, 36/*A4*/), \\  \n    new MotorDriver(17/*11*/,  5/*13*/, UNUSED_PIN, 23/*8*/, 33/*A1*/, 1.52, 5000, 39/*A5*/), \\  \n    new MotorDriver(27/* 2*/, 18/*10*/, UNUSED_PIN, 12/*7*/, 34/*A4*/, 1.52, 5000, 2 /*A4*/), \\  \n    new MotorDriver(14/* 5*/, 25/* 4*/, UNUSED_PIN, 13/*6*/, 35/*A5*/, 1.52, 5000, 4 /*A5*/)  \n  #define MOTOR_SHIELD_TYPE EX8874X2_ACEBOTT_ESP32\n</code></pre>"},{"location":"reference/esp32/18-esp32-acebott/#stacked-ex8874-checklist","title":"Stacked EX8874 Checklist","text":"<ul> <li> Cover the barrel connector on WeMos R1 D32, as VIN power will be provided by one EX8874  </li> <li> IOREF Override set to 3v3 on both EX8874 boards  </li> <li> VIN trace cut and regulator disabled on top EX8874  </li> <li> Alternate pins enabled via solder pads  </li> <li> Jumpers added for GPIO 2 and 4  </li> <li> Add the custom motor define - 6 lines in config.h  </li> </ul> <p>TODO</p>"},{"location":"reference/esp32/22-esp32-l298-shield/","title":"ESP32 + L298 Shields","text":""},{"location":"reference/esp32/22-esp32-l298-shield/#genuine-arduino-motor-shield-r3","title":"Genuine Arduino Motor Shield R3","text":"<ul> <li> <p>IOREF voltage </p> <ul> <li>The IOREF pin on the ESP32 Uno form factor boards is 5V -- and not correct for a 3.3V microprocessor.  </li> <li>To avoid damaging the ESP32\u2019s analog inputs, correct the IOREF voltage by bending the IOREF pin on the L298 motor shield, and use a jumper to connect the 3.3V pin to IOREF on the motor shield itself.  </li> <li>On the Genuino Arduino Motor Shield R3, the IOREF voltage is used as the supply voltage on the LMV358 op-amp and provides a waterfall effect for the Schottky diodes on the A2, A3 pins of the motor shield.</li> </ul> </li> <li> <p>Current sensing </p> <ul> <li>For current sensing bend or cut the A0 and A1 pins.  </li> <li>On the top of the motor shield connect A0 to A2 and A1 to A3 via jumpers.  </li> <li>On the Wemos D1 R32 ESP32, the A0, A1 pins are connected to GPIO2 and GPIO4 -- not useable for ADC input at the same time as WiFi.  Connecting to the A2, A3 pins also provides the benefit of the Schottky diodes.</li> </ul> </li> <li> <p>Motor define - STANDARD_MOTOR_SHIELD </p> <ul> <li>When STANDARD_MOTOR_SHIELD is defined in config.h, the definition for the WeMos D1 R32 is in place when ESP32 is selected as the build target.</li> </ul> </li> </ul>"},{"location":"reference/esp32/22-esp32-l298-shield/#clone-motor-shields","title":"Clone Motor Shields","text":"<ul> <li> <p>IOREF voltage </p> <ul> <li>The IOREF pin on the ESP32 Uno form factor boards is 5V -- and not correct for a 3.3V microprocessor.  </li> <li>Correct the IOREF voltage by bending the IOREF pin on the L298 motor shield, then   IOREF will can be connected to the 3.3V pin to provide a waterfall effect for the Schottky diodes on the A2, A3 pins of the motor shield.</li> </ul> </li> <li> <p>Current sensing </p> <ul> <li> <p>Some clone shields have current sense circuits and can be used with Mega without modifications.   With ESP32-WROOM and Nucleo-F4, modifications are needed to protect ADC inputs.  </p> </li> <li> <p>We have found no shields which have the same current sensing circuit as the Genuine Arduino R3.   Clone shields may have current sensing, but will not have the LMV358 op-amp, or the LMV358 op-amp supply voltage is connected to 5V instead of the IOREF pin.</p> </li> </ul> </li> <li> <p>Modifications to protect ADC inputs </p> <ul> <li>Connecting IOREF to 3V3 will enable the Schottky diodes which connect to the A2, A3 pins.  </li> <li>Voltage divider resistor circuit is used to reduce the voltage from the op-amp </li> </ul> </li> </ul> <ul> <li> <p>Motor define - STANDARD_MOTOR_SHIELD </p> <ul> <li>When STANDARD_MOTOR_SHIELD is defined in config.h, the definition for the WeMos D1 R32 is in place when ESP32 is selected as the build target.</li> <li>Review of motor shield define from MotorDrivers.h for ESP32 WeMos R1 D32  </li> </ul> <pre><code>#define STANDARD_MOTOR_SHIELD F(\"STANDARD_MOTOR_SHIELD\"), \\  \n    new MotorDriver(25/* 3*/, 19/*12*/, UNUSED_PIN, 13/*9*/, 35/*A2*/, 0.70, 1500, UNUSED_PIN), \\  \n    new MotorDriver(23/*11*/, 18/*13*/, UNUSED_PIN, 12/*8*/, 34/*A3*/, 0.70, 1500, UNUSED_PIN)  \n</code></pre> </li> </ul> <p> </p> <ul> <li> <p>Motor define - ACEBOTT + L298 shield </p> <ul> <li>Even though the ACEBOTT A0, A1 pins locations are available, using the A2, A3 pins facilitates the voltage divider circuit along with the benefit of the Schottky diodes.  </li> <li>A custom motor define will be needed in config.h  </li> </ul> <pre><code>#define L298_ACEBOTT_ESP32 F(\"L298_ACEBOTT_ESP32\"), \\  \n    new MotorDriver(26/* 3*/, 16/*12*/, UNUSED_PIN, 19/*9*/, 34/*A2*/, 0.70, 1500, UNUSED_PIN), \\  \n    new MotorDriver(17/*11*/,  5/*13*/, UNUSED_PIN, 23/*8*/, 35/*A3*/, 0.70, 1500, UNUSED_PIN)  \n#define MOTOR_SHIELD_TYPE L298_ACEBOTT_ESP32\n</code></pre> </li> </ul> <p> </p>"},{"location":"reference/hardware/motorboards/ex-8874/","title":"EX\u2011MotorShield8874","text":"<p>Designed in conjunction with the DCC-EX development team, the EX\u2011MotorShield8874 is extremely simple to use with all current and future generations of EX\u2011CommandStation hardware.</p> <p>This board is the new standard by which we compare other boards.</p>"},{"location":"reference/hardware/motorboards/ex-8874/#features","title":"Features","text":"<ul> <li>Pin compatible with the original Arduino Motor Shield Rev3 but provides significantly improved electrical performance for driving higher loads, and improved usability.</li> <li>Rated for 5 Amps of continuous output current.</li> <li>No need to cut traces or bend out pins for stacking on the EX-CommandStation.</li> <li>2 outputs (Main and Programming Track or 2 Mains).</li> <li>Single power supply input powers the shield, the Arduino, and the track (motor output). Powering of Arduino boards is possible due to the onboard DC/DC buck converter, supporting a wide input supply range from 9 to 30V. The reverse polarity protection prevents damage to the circuit and its components in case the power supply is accidentally connected backwards.</li> <li>Wide input voltage range from 9V to 30V DC.</li> <li>5V and 3.3V compatible.</li> <li>Virtually no voltage drop, even at high currents.</li> <li>I2C header and STEMMA Qwiic connector for accessories (displays, port expanders, servo boards, etc.).</li> <li>Reverse polarity protection.</li> <li>Fault detection in addition to overcurrent reporting for extra safety.</li> <li>Alternative power in and out solder pads for different connector types.</li> <li>Stackable (Support Multiple Power Districts).</li> <li>Optional OLED header to connect a display directly to the shield.</li> <li>Based on two DRV8874 H-bridge motor drivers with integrated current sensing from Texas Instruments (TI). It is used to drive inductive loads like relays, solenoids, DC, stepping motors, as well as provide the DCC signal, and power to the model railroad tracks. Status LED for supply, which provides a visual indication of the power supply status in addition to LEDs to show each side of the A and B power outputs.</li> </ul> <p>The boards 5V and 3V friendly design makes it suitable for a broad range of Arduino compatible platforms, with an override that compensates for designs with incomplete support (such as an incorrect IORef voltage).</p>"},{"location":"reference/hardware/motorboards/ex-8874/#why-did-we-make-it","title":"Why did we make it","text":"<p>EX\u2011MotorShield8874 is specifically designed for use with DCC-EX Command Station for controlling model railroads, but can also be used as generally better replacement for Arduino Motor Shield R3 in any device that needs to control a motor. We needed higher current capacity to power more motors/trains and have little to no voltage drop due to advanced MOSFET driver technology.</p>"},{"location":"reference/hardware/motorboards/ex-8874/#purchase","title":"Purchase","text":"<p>The EX\u2011MotorShield8874 is available from many suppliers.</p>"},{"location":"reference/hardware/motorboards/ex-8874/#licensing","title":"Licensing","text":"<p>The EX\u2011MotorShield8874 was created through the gracious support and design facilities of Semify, who, along with DCC-EX, license it to manufacturers. The hardware design has been made open source for individual users and the schematics are available on the DCC-EX GitHub repository.</p> <p>For quantities of 10 or less per annum, you may utilise a PCB manufacturing and assembly service such as JLCPCB without licensing fees. A donation to DCC-EX would be appreciated, so click the donate button. The production files are available on the DCC-EX GitHub.</p> <p>Entrepreneurs wanting to use the design to offer commercial quantities to their local communities should contact Semify (service @ semify-eda.com) to arrange a bulk purchase or DCC-EX (support @ dcc-ex.com) for a license to manufacture. Licensing includes donating a royalty to DCC-EX per board sold.</p>"},{"location":"reference/hardware/motorboards/ex-8874/#assembly-with-ex-motorshield8874","title":"Assembly with EX-MotorShield8874","text":"<p>The shield stacks onto a CSB1 without modification. The CSB1 firmware must be configured with the EX-Installer to recognise the additional two tracks. </p> <p>For self-built command station, please consult the relevant build instructions.</p> <p>DO NOT connect power to BOTH the EX-MotorShield8874 barrel jack and the underlying Arduino motherboard via its DC barrel jack as you may damage your Arduino and/or EX-MotorShield8874.</p>"},{"location":"reference/hardware/motorboards/ex-8874/#engineering-notes","title":"Engineering notes","text":"<p>The EX-MotorShield8874 DC barrel jack is the only power source required to power both the tracks and the EX\u2011CommandStation into which it is plugged into. It supplies carefully regulated 7.2V DC power to the underlying Arduino R3 compatible motherboard via the VIN pin. This voltage is safely regulated down from the track power input to ensure Command Station motherboards will stay cool and work well. There is no need to power the Command Station via its barrel jack, or USB power. It is safe, however, to connect the USB cable as it will not create a conflict.</p> <p>Applying a voltage above what a decoder was designed for, may permanently damage it, because the EX-MotorShield8874 does not drop voltage like the standard L298 based motor shields take care over track voltage selection.</p> <p>NOTE: The EX-MotorShield8874 can supply up to 5A of track power per channel, a power supply of more than 10A peak capacity is required to run both channels at full peak current and have power left for the Command Station. A power supply that is unable to provide the current at which the software detects a short-circuit will not be safe as the Command Station will not be able to detect the short.</p> <p>If the track power supply is not plugged in, the Command Station will report track faults.</p>"},{"location":"reference/hardware/motorboards/ex-8874/#stacking-two-motor-shields","title":"Stacking two motor shields","text":"<p>Stacking an EX-8874 and another motor shield type is not recommended. There are complex pin conflicts and software configuration requirements.</p> <p>The CSB1 can only have a single EX8874 stacked on it, unmodified. There are insufficient pins available on the internal ESP32 processor to handle more.</p>"},{"location":"reference/hardware/motorboards/ex-8874/#steps-to-stack","title":"Steps to Stack","text":"<ul> <li>Leave the first EX-MotorShield8874 in the stack entirely unmodified. </li> </ul> <p>NOTE: If you are using an Ethernet shield, it must be the very first board in the stack, with the unmodified EX-MotorShield8874 next immediately on top of that. Test this first before proceeding to modifying the second EX-MotorShield8874 and adding it on.</p> <ul> <li>You must CUT the regulator to VIN pin on the top of the PCB which is not labelled on the original version, but has been labelled on later versions</li> </ul> <p></p> <ul> <li>Cut the \u201cRegulator Enable\u201d trace on the bottom of the board</li> </ul> <p></p> <ul> <li>Cut the jumper pads for both Driver A and Driver B</li> </ul> <p></p> <ul> <li>Solder bridge the right hand ALT pads but NOT the FAULT pins</li> </ul> <p></p> <p>The reason we did not solder the FAULT pins to their righthand ALT pads is that this would connect the FAULT pins to D0/D1 on the Arduino R3 headers which is not ideal because D0/D1 typically carry the serial port. You can of course bend those pins out if you wish to use them, and simply jumper them that way. Please refer to the self-build instructions for your processor type. </p> <p>After hardware installation, you will need to re-run the EX-Installer to configure the Command Station code to recognize the new board and allow you to control the third and fourth tracks.</p>"},{"location":"reference/hardware/motorboards/l298-shields/","title":"L298P &amp; L298HN Shields","text":"<ul> <li> <p>DCC mode requires motor boards/shields where the switching frequency is capable of 10kHz on each output wire.</p> </li> <li> <p>DC mode uses the brake pin for the PWM signal.  </p> </li> <li> <p>Arduino and clone L298 shields use the XNOR gate to provide the inverted signal for DCC, but this does not provide low side brake in both directions for DC mode -- an issue for a reversing loop. DC mode logic gate circuits</p> </li> <li> <p>There is a significant voltage drop when using L298 motor drivers. (see table below)  </p> </li> <li> <p>VIN from L298 motor shields should not be used to power the microprocessor board.   Cut the VIN trace or bend the VIN pin on L298 shields.  </p> </li> </ul>"},{"location":"reference/hardware/motorboards/l298-shields/#genuine-arduino-r3","title":"Genuine Arduino R3","text":"<ul> <li>The Genuine Arduino R3 motor shield can be used with 5V and 3.3V microprocessors.   Arduino Motor Shield R3 included updates to the current sense circuit, which has not been adopted by any clones tested.  </li> </ul>"},{"location":"reference/hardware/motorboards/l298-shields/#clone-shields","title":"Clone shields","text":"<ul> <li> <p>Some clone shields have current sense circuits and can be used with Mega.   With ESP32-WROOM and Nucleo-F4, modifications are needed to protect ADC inputs.  </p> </li> <li> <p>Do not buy a motor shield without current sensing. </p> </li> <li> <p>We have found no shields which have the same current sensing circuit as the Genuine Arduino R3.</p> </li> <li> <p>Clone shields may have current sensing, but will not have the LMV358 op-amp, or the LMV358 op-amp supply voltage is connected to 5V instead of the IOREF pin.</p> </li> </ul>"},{"location":"reference/hardware/motorboards/l298-shields/#voltage-drop","title":"Voltage drop","text":"<ul> <li>Note the 3V drop at 1.1A with the L298 shield.   The 9.36V amplitude is the 'across the tracks' voltage. </li> </ul>"},{"location":"reference/hardware/motorboards/schematics/","title":"Schematics","text":"<p>Links to download/view schematics, etc.</p> <ul> <li> <p>EX-MotorShield8874 EX8874 </p> </li> <li> <p>Arduino Motor Shield R3 L298P</p> </li> <li> <p>IBT_2 BTS7960 - Schematic Handson Technology datasheet</p> </li> </ul>"},{"location":"reference/nucleo/03-nucleo-firmware/","title":"Nucleo - STLink Firmware","text":"<p>when/if it is needed</p>"},{"location":"reference/nucleo/04-nucleo-drivers/","title":"Nucleo - USB Drivers","text":"<p>when/if it is needed</p>"},{"location":"reference/nucleo/05-nucleo-debug/","title":"Nucleo - Debug","text":"<p>One of the features of the Nucleo-F4 boards is their included debug facility.</p> <ul> <li> <p>Advanced topic -- find link/video where it is explained</p> </li> <li> <p>Images of how/where to set a breakpoint and step thru the code.</p> </li> </ul>"},{"location":"reference/nucleo/15-nucleo-144-power/","title":"Nucleo - Power","text":""},{"location":"reference/nucleo/15-nucleo-144-power/#vin-from-ex8874","title":"VIN from EX8874","text":"<ul> <li> <p>EX-MotorShield8874 provides VIN output, which can be used to power the Nucleo 64/144.  </p> </li> <li> <p>In order to take advantage of the EX-MotorShield8874\u2019s single power source capability, you will need to move the Nucleo power source jumper.  </p> </li> <li> <p>On the Nucleo-64s it\u2019s jumper JP5 which you move from the U5V position (pins 1+2 jumpered, USB 5V source being used) to the E5V position (pins 2+3 jumpered).  </p> </li> <li> <p>On the Nucleo-144s it\u2019s jumper JP3 which you move from the U5V position (centre pins 3+4 jumpered, USB 5V source being used) to the VIN-5V position (rightmost pins 5+6 jumpered).  </p> </li> <li> <p>In both cases this will power your Nucleo using the EX-MotorShield8874\u2019s onboard switch mode power supply of 7.2V to the VIN pin, and allows some 800mA of 5V power to be available for the Nucleo and peripherals.  </p> </li> <li> <p>Note for programming: Once you do this it will mean you need both the EX-MotorShield8874 barrel jack to be powered AND the USB cable to enable programming. Or you can temporarily move JP5 back to U5V whilst uploading EX\u2011CommandStation.  </p> </li> <li> <p>Power connection sequence: The correct sequence is power on the EX-MotorShield8874 barrel jack, then attach the USB cable according to the STMicroelectronics documentation. </p> </li> </ul>"},{"location":"reference/nucleo/15-nucleo-144-power/#vin-voltage","title":"VIN voltage","text":"<ul> <li>Optimum VIN voltage is 7 volts.   VIN range is from 7 V to 12 V only and input current capability is linked to input voltage:   \u00a0  \u00a0 800 mA input current when Vin = 7 V   \u00a0  \u00a0 450 mA input current when 7 V &lt; Vin &lt;= 9 V   \u00a0  \u00a0 250 mA input current when 9 V &lt; Vin &lt;= 12 V</li> </ul>"},{"location":"reference/nucleo/15-nucleo-144-power/#usb","title":"USB","text":"<ul> <li> <p>USB can be used for power, but accessory power will be limited.  </p> </li> <li> <p>Caution:  If VIN jumpers is not set to use USB - and - USB is connected prior to EX8874 being powered, expect enumeration issues and reduced power.  </p> </li> <li> <p>Refer to st.com user manuals UM1974 Nucleo-144 UM1724 Nucleo-64</p> </li> </ul>"},{"location":"reference/nucleo/16-nucleo-144-ex8874/","title":"Nucleo 144 - EX8874","text":"<p>Review of motor shield define from MotorDrivers.h for F429ZI or F439ZI</p> <pre><code>  #if defined(ARDUINO_NUCLEO_F429ZI) || defined(ARDUINO_NUCLEO_F439ZI) || defined(ARDUINO_NUCLEO_F4X9ZI)  \n  // EX 8874 based shield connected to a 3V3 system with 12-bit (4096) ADC  \n  // The Ethernet capable STM32 models cannot use Channel B BRAKE on D8, and must use the ALT pin of D6,  \n  // AND cannot use Channel B PWN on D11, but must use the ALT pin of D5  \n  #define EX8874_SHIELD F(\"EX8874\"), \\  \n    new MotorDriver( 3, 12, UNUSED_PIN, 9, A0, 1.27, 5000, A4), \\  \n    new MotorDriver( 5, 13, UNUSED_PIN, 6, A1, 1.27, 5000, A5)  \n</code></pre> <p>Alternate pins D5 and D6 are required for the Nucleo-144 boards with Ethernet. One EX8874 motor shield would use the standard motor define EX8874_SHIELD, and update the solder pads to use D5 and D6.  </p> <p> </p>"},{"location":"reference/nucleo/16-nucleo-144-ex8874/#stacked-ex8874-motor-shields-on-f429zi-f439zi","title":"Stacked EX8874 motor shields on F429ZI F439ZI","text":"<ul> <li>When using two EX8874 motor shields, the VIN on one shield can be used to power the Nucleo-144.   Cut two traces to disable VIN on the stacked/second shield. \u00a0 Link to Hardware EX8874 page</li> </ul> <ul> <li>Review where jumpers will be required, due to pin conflict/function/availability.</li> </ul> <ul> <li>Tracks A and B can use the same alternate pins D5 and D6 as they would if only one shield was used.   Pins were selected so that the stacked motor shield pins D11,D9,D8,A4,A5 can be bent out, and short jumpers added to connect pins D7,D28,D29,D64,D65.</li> </ul> <ul> <li>A custom motor define will be needed in config.h</li> </ul> <pre><code>  #define EX8874_SHIELDX2 F(\"EX8874_SHIELDX2\"), \\  \n    new MotorDriver( 3, 12, UNUSED_PIN,  9, A0, 1.27, 5000, A4), \\  \n    new MotorDriver( 5, 13, UNUSED_PIN,  6, A1, 1.27, 5000, A5), \\  \n    new MotorDriver( 2, 10, UNUSED_PIN, 28, A2, 1.27, 5000, 64), \\  \n    new MotorDriver( 7,  4, UNUSED_PIN, 29, A3, 1.27, 5000, 65)  \n  #define MOTOR_SHIELD_TYPE EX8874_SHIELDX2\n</code></pre>"},{"location":"reference/nucleo/16-nucleo-144-ex8874/#ex8874-f413zh-f446ze","title":"EX8874 - F413ZH F446ZE","text":"<ul> <li> <p>If using two EX8874 motor shields, the VIN on one shield can be used to power the Nucleo-144.   Cut two traces to disable VIN on the stacked/second shield. \u00a0 Link to Hardware EX8874 page</p> </li> <li> <p>D11 can be used as there is no Ethernet conflict. Brake and Fault pin updates as shown for F429ZI F439ZI.</p> </li> </ul> <p>TODO - update MotorDrivers.h for D8</p> <ul> <li>This motor define can be used with E8874 and F413ZH F446RE   - alternate Brake pin is used for Track B   - presently a custom motor define is needed in config.h</li> </ul> <pre><code> #define EX8874_F413ZH F(\"EX8874_F413ZH\"), \\  \n    new MotorDriver( 3, 12, UNUSED_PIN, 9, A0, 1.27, 5000, A4), \\  \n    new MotorDriver(11, 13, UNUSED_PIN, 6, A1, 1.27, 5000, A5)  \n #define MOTOR_SHIELD_TYPE EX8874_F413ZH\n</code></pre> <p> </p> <ul> <li>Stacked EX8874 shields on F413ZH F446ZE   - Very similar to modifications/jumpers of F429ZI F439ZI   - D11 can be used for track B; D5 can be used for track D   - Brake and Fault pin modifications/jumpers as above   - A custom motor define will be needed in config.h</li> </ul> <pre><code>  #define EX8874_F413ZH_X2 F(\"EX8874_F413ZH_X2\"), \\  \n    new MotorDriver( 3, 12, UNUSED_PIN,  9, A0, 1.27, 5000, A4), \\  \n    new MotorDriver(11, 13, UNUSED_PIN,  6, A1, 1.27, 5000, A5), \\  \n    new MotorDriver( 2, 10, UNUSED_PIN, 28, A2, 1.27, 5000, 64), \\  \n    new MotorDriver( 5,  4, UNUSED_PIN, 29, A3, 1.27, 5000, 65)  \n  #define MOTOR_SHIELD_TYPE EX8874_F413ZH_X2\n</code></pre>"},{"location":"reference/nucleo/17-nucleo-144-wifi/","title":"Nucleo 144 - WiFi","text":""},{"location":"reference/nucleo/17-nucleo-144-wifi/#makerfabs-wifi-shield","title":"MakerFabs WiFi shield","text":"<ul> <li>   The shorting jumpers can be used for pins D0/D1 (USART6) to connect the 5V WiFi shield pins.    3.3V headers can be installed on the WiFi shield and flying wire jumpers used to connect USART6 or UART2 pins.  (remove the shorting jumpers)    The defined serial pins are 5V tolerant on the Nucleo-F4 boards.</li> </ul>"},{"location":"reference/nucleo/17-nucleo-144-wifi/#serial-pins","title":"Serial pins","text":"<ul> <li>Specific pins are defined for the Nucleo-144 boards.   This shows how 3 serial ports are defined for some Nucleo-144 boards; two are polled to see if WiFi is connected.</li> </ul> <pre><code>  HardwareSerial Serial6(PG9, PG14);  // Rx=PG9, Tx=PG14 -- USART6  \n  HardwareSerial Serial2(PD6, PD5);  // Rx=PD6, Tx=PD5 -- UART2  \n  #if !defined(ARDUINO_NUCLEO_F412ZG)  // F412ZG does not have UART5  \n    HardwareSerial Serial5(PD2, PC12);  // Rx=PD2, Tx=PC12 -- UART5  \n</code></pre> <ul> <li>WiFi Polling alias   The SERIAL1 or SERAIL3 alias would be used in config.h, if Serial6 or Serial2 are used for other purposes.</li> </ul> <pre><code>  #define SERIAL1 Serial6  \n  #define SERIAL3 Serial2  \n</code></pre> <ul> <li>Serial pins for Nucleo-64 and Nucleo-144 boards </li> </ul>"},{"location":"reference/nucleo/17-nucleo-144-wifi/#pin-diagram","title":"Pin diagram","text":"<ul> <li>Pin diagram for Nucleo-144 boards   Read the notes added to the diagram. </li> </ul>"},{"location":"reference/nucleo/19-nucleo-144-pin-reference/","title":"Nucleo 144 - Pins","text":""},{"location":"reference/nucleo/19-nucleo-144-pin-reference/#pin-diagrams","title":"Pin diagrams","text":"<ul> <li>Pin diagrams of Zio headers are edited to include Arduino style pin numbers.   These are F429ZI/F439ZI; F446ZE and F413ZH are quite similar.  Refer to varaint files to confirm.</li> </ul> <ul> <li> <p>Links to st.com for each Nucleo-144 and the UM1234 pdf https://os.mbed.com/platforms/ST-Nucleo-F429ZI/ https://os.mbed.com/platforms/ST-Nucleo-F446ZE/ https://os.mbed.com/platforms/ST-Nucleo-F413ZH/ UM1974 Nucleo-144 UM1724 Nucleo-64</p> </li> <li> <p>Location of variant files   C:\\Users\\username\\.platformio\\packages\\framework-arduinoststm32\\variants\\STM32F4xx\\F427Z(G-I)T_F429ZET_F429Z(G-I)(T-Y)_F437Z(G-I)T_F439Z(G-I)(T-Y)   C:\\Users\\username\\AppData\\Local\\Arduino15\\packages\\STMicroelectronics\\hardware\\stm32\\2.9.0\\variants\\STM32F4xx\\F427Z(G-I)T_F429ZET_F429Z(G-I)(T-Y)_F437Z(G-I)T_F439Z(G-I)(T-Y)</p> </li> </ul>"},{"location":"reference/nucleo/19-nucleo-144-pin-reference/#8-district-pcb","title":"8 District PCB","text":"<p>This is a prototype/development board - - almost plug-n-play, once the headers and other components are soldered.  Motor shields are installed without modifications.</p> <ul> <li> <p>Table of pins used in motor define   \u00a0 \u00a0 \u00a0 \u00a0 </p> </li> <li> <p>Link to pdf with pins assigned for 8 districts and other accessories Nucleo-144 pin use table - pdf</p> </li> <li> <p>Add custom motor define in config.h   Example shows two EX8874 and two L298 motor shields</p> </li> </ul> <pre><code>  #define F439_4X2 F(\"F439_4X2\"), \\\n    new MotorDriver(16, 21, UNUSED_PIN, 10, A13, 1.27, 5000, 20), \\  \n    new MotorDriver(22, 23, UNUSED_PIN, 5, A6, 1.27, 5000, 25), \\  \n    new MotorDriver(26, 43, UNUSED_PIN, 28, A2, 1.27, 5000, 27), \\  \n    new MotorDriver(30, 44, UNUSED_PIN, 29, A8, 1.27, 5000, 49), \\  \n    new MotorDriver(39, 36, UNUSED_PIN, 38, A3, 0.73, 1500, UNUSED_PIN), \\  \n    new MotorDriver(34, 35, UNUSED_PIN, 58, A4, 0.73, 1500, UNUSED_PIN), \\  \n    new MotorDriver(57, 64, UNUSED_PIN, 59, A5, 0.73, 1500, UNUSED_PIN), \\  \n    new MotorDriver(66, 65, UNUSED_PIN, 61, A14, 0.73, 1500, UNUSED_PIN)  \n  #define MOTOR_SHIELD_TYPE F439_4X2\n</code></pre> <p> </p> <ul> <li> <p>Schematic</p> </li> <li> <p>Limited availability upon request - open a ticket on the discord server</p> </li> </ul>"},{"location":"reference/wiring/i2C/04-tuning-info/","title":"I2C Tuning Summary","text":"<p>This is an introductory guide for tinkerers, which may help many to quickly get an overview of the main points and hopefully can be followed by most with a few minutes effort.</p>"},{"location":"reference/wiring/i2C/04-tuning-info/#guide-to-tuning-a-standard-mode-100khz-i2c-bus","title":"Guide to tuning a standard mode (100kHz) I2C bus:","text":"<ol> <li> <p>The two signal lines (SCL &amp; SDA) EACH require a resistor to pull them to a logic high voltage and a device output pin to pull them low.     All devices on an I2C bus segment must use the correct voltage level.     i.e. 5V (or 3.3V) supply voltage to all pull-up resistors (typically 10k ohms included on each I2C device).</p> </li> <li> <p>Do NOT mix incompatible 3.3V and 5V devices on a segment (without a passive level-shifter).     The segment (or sub-bus) is the full wire length from extremities, passing through some devices - end-to-end (e.g. PCA9685), but NOT through a multiplexer (mux) or bus buffers. (A mux or level shifter can interface different sub-buses/segments).</p> </li> <li> <p>Connected devices may, or may not, have a (weak) pullup resistor (pair) on them, typically 10k ohms.     We need to add up the number of 10k (pairs) of resistors to see if we need to add/remove some.  (Alternatively, see NOTE below about measuring this in situ.)</p> </li> <li> <p>The pull-up has to be neither too strong (output pins can't pull it down) nor too weak (resistor can't pull it up fast enough).</p> </li> <li> <p>The MAXIMUM number (of 10k ohm pullups) that the (SCL or SDA) output pin can pull down is about 6 (9 on a 3.3V bus), so we MAY have to disconnect some pullups (jumpers?) or use a mux.</p> </li> <li> <p>Some devices may not have any pullups, and other devices may EFFECTIVELY have 2 or 3 (4.7k Endpoint = 2x10k)</p> </li> <li> <p>The load the resistors have to drive depends on the NUMBER OF DEVICES and the total LENGTH of the segment wire/cable (passing through some devices) between bus segment ends.</p> </li> <li> <p>The required minimum NUMBER(P) of 10k pullups on SCL must not be less than (number of devices(D) on bus + length(L feet) divided by 3. i.e. P = (D + L)/3   This ensures the signal can rise quickly to a good high level.</p> </li> <li> <p>Inversely, allowable max LENGTH(ft) = number of pullups(P) x 3 - number of devices(D) i.e. L = Px3 - D.     The practical length varies somewhat with cable type (twisted pair, ribbon, dupont, etc.) so limit your segment length, say 2/3 of max., to avoid errors and timeouts.</p> </li> <li> <p>If number of available pullups is too low, extra pullups (max 6 @10cents each)(or a LTC4311, $10) may be added for length, BUT if number of pullups is TOO HIGH the only quick fix is to remove/cut jumpers/unsolder some pullups.      NOTE:  If unsure of the effective number of active pullup resistors(10k), it is possible, after ALL POWER OFF     FOR SEVERAL MINUTES, to use an ohm meter to measure the net resistance between the SCL line (or SDA) to the     pullup supply rail (Vcc).  Divide 10k by the resistance for the effective number of pullups.     (e.g. if it measures 2500 ohms, there are effectively 4 pullups in the circuit)     (Do not use any diode test function or continuity test function on the meter, just basic resistance range.)</p> </li> </ol>"},{"location":"reference/wiring/i2C/04-tuning-info/#examples","title":"EXAMPLES:","text":"<pre><code>[for length(L), pullup count(P) &amp; device count(D)]\n</code></pre> <p>A. Mega bus:   3 Devices: Mega(10k), 1x MCP23017(10k) and one sparkfun Endpoint (with jumpers cut; no pullups)          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max length L = P x 3 - D = 2x3-3 = 3ft (safe 2ft)</p> <p>B. Mega bus:   7 Devices: Mega(10k), 3x MCP23017(10k), 2x PCA9685(10k) &amp; Endpoint(4k7)          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pullups P = 8 (8x10k) too high!  Can cut Endpoint jumpers to remove 2. Then...          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max length L = P x 3 - D = 6x3-7 = 11ft (safe 7ft)</p> <p>C. MUX sub-bus:4 Devices: Mux (no 10k) and 3x MCP23017(10k each)          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max length L = P x 3 - D = 3x3-4 = 5ft (safe 3.5ft)</p> <p>D. MUX sub-bus:2 Devices: Mux (no 10k) and a single PCA9685(10k)          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max length L = P x 3 - D = 1x3-2 = 1ft (safe 8inch)</p> <p>E. Remote bus: 3 Devices: Endpoint (4k7=2x10k) and 2x esp32 slaves(no k)          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max length L = P x 3 - D = 2x3-3 = 3ft (safe 2ft)</p> <p>F. Remote bus: 3 Devices+extras: Endpoint (4k7=2x10k), 2x esp32 and EXTRA 4k7(2x10k)          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max length L = P x 3 - D = 4x3-3 = 9ft (safe 6ft)</p> <p>G. To achieve 400kHz fast-mode use Px1.5 e.g. example F. (with 4 effective pullups)          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max length L = P x 1.5 - D = 4x1.5 - 3 = 3ft (safe 2ft)</p> <ul> <li> <p>In all cases, to increase workable length or speed, add pullups towards the max. number, or add one LTC4311 I2C Accelerator, provided P is not over the max. allowed pullup count.  </p> </li> <li> <p>LTC4311 detects a rising edge and injects a strong, current-limited pull-up current to quickly charge the bus capacitance. This actively accelerates the rise time, producing a cleaner, faster signal without compromising the signal's ability to be pulled low.</p> </li> <li> <p>Note: LTC4311 to be placed at the head of the chain, not the tail.</p> </li> <li> <p>If you decide you need extra pullups for length, it is a good idea to be generous and add \"spare\" pullups (i.e. use a lower value resistor) while keeping within the max count(6/9), as this will give extra safety margins and noise immunity at no extra cost.</p> </li> </ul>"},{"location":"support/00-support/","title":"Help and Support","text":"<p>At some point you will likely need to get some help or support for our products, and the available methods are outlined on this page.</p> <p>NOTE For users of hardware products purchased from resellers, in the event of a hardware issue please contact the reseller in the first instance. Each reseller is responsible for supporting the hardware they sell.</p> <p>Please note that the DCC-EX team are all volunteers and are distributed globally, so while we endeavour to help as much and as quickly as we can, all support is provided on a best-effort basis only, and there will be times where no team members are available.</p> <p>This is why we strongly recommend Discord as the best source of support, because there is a global community of over 4,000 users, some of whom may be able to help before a DCC-EX team member is online.</p>"},{"location":"support/00-support/#information-required-for-support-queries","title":"Information required for support queries","text":"<p>When requesting support for any of our products, there is some critical information you must provide in order for us to be able to help you. As volunteers, our time is limited and therefore the more information you can provide up front, the quicker we can help you resolve any issues rather than spend valuable time repeating requests for missing information.</p> <p>This is the information typically required:</p> <ul> <li>The product and version</li> <li>The exact hardware in use</li> <li>Upload serial/console logs</li> <li>Upload all configuration files for the software in use</li> <li>Detail any troubleshooting steps you have already performed</li> </ul>"},{"location":"support/00-support/#product-and-version","title":"Product and Version","text":"<pre><code>&lt;s&gt;\n</code></pre>"},{"location":"support/00-support/#get-startup-logs","title":"Get startup logs","text":"<p>TODO</p> <p>Instructions required here to obtain the startup logs from EX-Installer.</p>"},{"location":"support/00-support/#discord-recommended","title":"Discord (recommended)","text":"<p>Our strongly recommended support option is the DCC-EX Discord server, where you can interact directly with the DCC-EX team as well as a global community of over 4,400 users. Issues are usually resolved quite quickly in comparison with the other options, and you can also interact with the community in real-time.</p> <p>Please refer to our Discord page which outlines how to join our Discord server, interact with the community, and how to raise support tickets.</p>"},{"location":"support/00-support/#github","title":"GitHub","text":"<p>If you are an existing GitHub user, you can also get support via GitHub which is particularly useful for bug reports. While all the DCC-EX team members have GitHub accounts and can respond, this is typically not as quick as getting support via our recommended Discord server option.</p> <p>Please refer to our GitHub page on the various repositories you can raise issues in.</p>"},{"location":"support/00-support/#trainboard","title":"TrainBoard","text":"<p>If you're a member of the TrainBoard forum, there is a DCC++ Forum you can post in for help. Yes, it is still called DCC++.</p> <p>Note that this isn't the busiest forum and only a few of the DCC-EX team are members of TrainBoard, so resolution of issues may be slow. There are other members of the forum that may try to assist though.</p>"},{"location":"support/00-support/#email-not-recommended","title":"Email (not recommended)","text":"<p>While email support is available for those who have no other way to obtain support, there is only one team member with access to reply to your queries, and therefore this is a slow process and is not recommended.</p> <p>If necessary, you can email us at support@dcc-ex.com.</p>"},{"location":"support/01-discord/","title":"The DCC-EX Discord Server","text":"<p>The DCC-EX team has a strong preference for providing support via the DCC-EX Discord server, and we have information on joining and using Discord on this page.</p> <p></p> <p>Discord is free to join, and provides these benefits over our other support methods:</p> <ul> <li>The DCC-EX team actively participate in Discord, so you can talk to the people who create the products</li> <li>There is a global community of over 4,000 DCC-EX users in Discord</li> <li>When people are online at the same time, you can have a live, interactive chat</li> <li>There is the opportunity for DCC-EX users to help other users, which happens frequently</li> </ul> <p>In short, Discord gives you the best access to the broadest set of people who can help with DCC-EX; an entire, global community of users.</p> <p>Please ensure when you first join, you review the Server Guide which will help you get started with our Discord server.</p>"},{"location":"support/01-discord/#joining-and-using-discord","title":"Joining and Using Discord","text":"<ol> <li> <p>Use the button below to navigate to your invitation to join our Discord server:</p> <p>DCC-EX Discord server</p> </li> <li> <p>Click ``Register on the sign-in page:</p> <p></p> </li> <li> <p>Fill in your details, click <code>Continue</code>, and follow the instructions:</p> <p></p> </li> <li> <p>Choose which channels you are interested in and if you're unsure, just select <code>Get help to setup an EX-CommandStation</code>:</p> <p></p> </li> </ol>"},{"location":"support/01-discord/#sharing-code-and-configuration-snippets","title":"Sharing Code and Configuration Snippets","text":"<p>Quite often in interactions in Discord, you will need to share either some code you have entered or parts of configuration files as text in the channel. Just pasting raw code or configuration text in Discord doesn't render well in the screen, and often characters are interpreted as emojis or other random ASCII characters which confuse the issue.</p> <p>Discord has a handy way of rendering code correctly so it appears correctly. To do this, you need to use the grave accent or backtick key  ` on your keyboard.</p> <p>On English QWERTY keyboards, this typically coexists with the tilde ~ key and is located in the top left near the Escape Esc key.</p> <p>This may appear elsewhere on other international keyboards, but Googling \"grave accent key\" or \"backtick key\" for your keyboard type should provide guidance on where it is located.</p> <p>To use this in Discord, simply surround your code or configuration snippets in three grave accents or backticks:</p> <pre><code>```\n// config.h entry for the EX8874\n#define MOTORSHIELD EX8874_SHIELD\n```\n</code></pre> <p>If you're sharing code, sometimes it can be helpful to specify the language, which in the case of DCC-EX is typically C++:</p> <pre><code>```cpp\nuint8_t dummy = 0;\n```\n</code></pre>"},{"location":"support/01-discord/#discord-channels","title":"Discord Channels","text":"<p>We have organised the Discord server into various channels which help keep similar topics grouped together.</p> <p>Please try to post questions in the relevant channel, and please do not post the same question in multiple channels.</p> <p>If you can't see channels which seem relevant or of interest to you, you can customise which channels you can see:</p> <ul> <li> <p>Click <code>Channels &amp; Roles</code> under the DCC-EX server menu:</p> <p></p> </li> <li> <p>You can change your customisation options if you wish:</p> <p></p> </li> <li> <p>Or you can browse the channels and select which ones you'd like to see:</p> <p></p> </li> </ul> <p>Here are some examples of commonly used channels, and there are plenty more:</p> <ul> <li><code>#support-and-issues__ex-commandstation</code> - Use this channel for general EX-CommandStation conversations and help</li> <li><code>#exrail</code> - Use this channel for general EXRAIL conversations and help</li> <li><code>#tack-manager</code> - Use this channel for general TrackManager conversations and help</li> <li><code>#accessories</code> - Use this channel for topics such as PCA9685 servo controllers and servos, MCP23017 I/O expansion boards, and other accessories</li> <li><code>#sensors</code></li> <li><code>signals</code></li> </ul> <p>Our other products typically have their own channel also:</p> <ul> <li><code>#ex-ioexpander</code> - EX-IOExpander, not to be confused with other I/O expansion modules such as PCA9685 or MCP23017 devices, see <code>#accessories</code></li> <li><code>#ex-dccinspector</code></li> <li><code>#ex-turntable</code></li> <li><code>#ex-fastclock</code></li> </ul>"},{"location":"support/01-discord/#opening-a-support-ticket","title":"Opening a Support Ticket","text":"<p>If you need help with a specific issue and the conversation in the general support channels haven't resolved the issue, you are welcome to open a support ticket in Discord to get help for your specific issue.</p> <ul> <li> <p>From the <code>Server Guide</code>, you can select the <code>Open a Support Ticket</code> option:</p> <p></p> <p></p> </li> <li> <p>This takes you to the TicketTool app, and clicking the <code>Create ticket</code> icon will open a support ticket:</p> <p></p> </li> <li> <p>You will see the message <code>Ticket Created</code> with the channel name of your new ticket:</p> <p></p> </li> <li> <p>Clicking on the ticket channel will take you to the ticket, and it should also appear in your channels list, and you can now share all relevant information, upload the required logs and configuration files, and share any troubleshooting steps you've already attempted:</p> <p></p> </li> </ul> <p>Once your ticket has been created, only the DCC-EX support team members and yourself will have access to the ticket, but other users can be invited if necessary.</p> <p>In order to help the DCC-EX team give you the help you need, you will need to provide as much information as possible, as we cannot read minds, see your setup, access your hardware or configuration files, nor look over your shoulder to see what is going on.</p> <p></p> <p>To upload files to the ticket, click the <code>+</code> sign in the message box and select <code>Upload a File</code>.</p> <p>Please provide this information at the time you open the support ticket:</p> <ul> <li> The product and version</li> <li> The exact hardware in use</li> <li> Upload serial/console logs</li> <li> Upload all configuration files for the software in use</li> <li> Detail any troubleshooting steps you have already performed</li> </ul>"},{"location":"support/01-discord/#closing-a-support-ticket","title":"Closing a Support Ticket","text":"<p>Once your issue is resolved, we encourage you to close your support ticket, as you can only have one open at a time, and a new and different issue should be in a different ticket.</p> <p>You can either click the <code>Close</code> button (you may need to scroll all the way to the top of the ticket thread):</p> <p></p> <p>Or you can type <code>/close</code> in the message box and hit the Enter key.</p>"},{"location":"support/02-github/","title":"Raising GitHub Issues","text":"<p>Most of the DCC-EX GitHub repositories have issue templates which will guide you through the required information related to the type of issue you are raising.</p> <p>These typically include:</p> <ul> <li>Bug Report - Submit a bug report, preferably after interacting with the support team in Discord to validate it is a bug</li> <li>Documentation Update - Request an update to add missing information or report broken links or other inaccuracies</li> <li>Feature Request - Suggest a new feature you'd like to see</li> <li>Support Request - Request support or assistance, noting this is not as quick as interacting with the support team in Discord</li> </ul> <p>These are the common repositories you can create issues in:</p> <ul> <li>EX-CommandStation</li> <li>Documentation</li> <li>EX-Installer</li> <li>EX-CSB1</li> <li>EX-Toolbox</li> <li>EX-MotorShield8874</li> <li>EX-FastClock</li> <li>EX-WebThrottle</li> <li>EX-DCCInspector</li> <li>DCCEXProtocol</li> <li>EX-Turntable</li> <li>EX-IOExpander</li> </ul>"},{"location":"throttles/00-throttles/","title":"Throttles and Other Controllers","text":"<ul> <li>Engine Driver</li> <li>Throttle Card</li> <li>JMRI</li> <li>DCCEXProtocol</li> <li>Make your own</li> </ul>"},{"location":"throttles/01-engine-driver/","title":"Engine Driver","text":""},{"location":"throttles/02-throttlecard/","title":"ThrottleCard","text":""},{"location":"news/category/general-dcc-ex-news/","title":"General DCC-EX News","text":""}]}